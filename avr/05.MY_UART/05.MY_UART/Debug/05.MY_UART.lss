
05.MY_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00000d80  00000e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000342  008001ce  008001ce  00000ee2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103a  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3d  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cf  00000000  00000000  00002cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  00003764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000387  00000000  00000000  00003d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c1       	rjmp	.+676    	; 0x2e6 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c1       	rjmp	.+808    	; 0x372 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	6a c2       	rjmp	.+1236   	; 0x54e <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 3c       	cpi	r26, 0xCE	; 206
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	ae ec       	ldi	r26, 0xCE	; 206
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	33 d1       	rcall	.+614    	; 0x32a <main>
  c4:	5b c6       	rjmp	.+3254   	; 0xd7c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <flower_on>:
void flower_on(void)
{
#if 1
   static int i=0;

   if (msec_count >= 100)
  c8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <msec_count>
  cc:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <msec_count+0x1>
  d0:	84 36       	cpi	r24, 0x64	; 100
  d2:	91 05       	cpc	r25, r1
  d4:	64 f1       	brlt	.+88     	; 0x12e <flower_on+0x66>
   {
      msec_count=0;
  d6:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <msec_count+0x1>
  da:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <msec_count>
      if (i >= 4)
  de:	40 91 d8 01 	lds	r20, 0x01D8	; 0x8001d8 <i.1762>
  e2:	50 91 d9 01 	lds	r21, 0x01D9	; 0x8001d9 <i.1762+0x1>
  e6:	44 30       	cpi	r20, 0x04	; 4
  e8:	51 05       	cpc	r21, r1
  ea:	34 f0       	brlt	.+12     	; 0xf8 <flower_on+0x30>
      {
         i=PORTA=0x00;
  ec:	1b ba       	out	0x1b, r1	; 27
  ee:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <i.1762+0x1>
  f2:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <i.1762>
  f6:	08 95       	ret
         //state_transition();   // state를 천이 to shift_right_keep_ledon
      }
      else
      {
         PORTA |= 0x10 << i | 0x08 >> i++;
  f8:	ca 01       	movw	r24, r20
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <i.1762+0x1>
 100:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <i.1762>
 104:	5b b3       	in	r21, 0x1b	; 27
 106:	60 e1       	ldi	r22, 0x10	; 16
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	04 2e       	mov	r0, r20
 10c:	02 c0       	rjmp	.+4      	; 0x112 <flower_on+0x4a>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <flower_on+0x46>
 116:	28 e0       	ldi	r18, 0x08	; 8
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <flower_on+0x58>
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	4a 95       	dec	r20
 122:	e2 f7       	brpl	.-8      	; 0x11c <flower_on+0x54>
 124:	cb 01       	movw	r24, r22
 126:	82 2b       	or	r24, r18
 128:	93 2b       	or	r25, r19
 12a:	85 2b       	or	r24, r21
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	08 95       	ret

00000130 <flower_off>:
   unsigned char l=0x0f;
   
#if 1
static int i=0;

if (msec_count >= 30)
 130:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <msec_count>
 134:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <msec_count+0x1>
 138:	4e 97       	sbiw	r24, 0x1e	; 30
 13a:	74 f1       	brlt	.+92     	; 0x198 <flower_off+0x68>
{
   msec_count=0;
 13c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <msec_count+0x1>
 140:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <msec_count>
   if (i >= 4)
 144:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <i.1768>
 148:	50 91 d7 01 	lds	r21, 0x01D7	; 0x8001d7 <i.1768+0x1>
 14c:	44 30       	cpi	r20, 0x04	; 4
 14e:	51 05       	cpc	r21, r1
 150:	34 f0       	brlt	.+12     	; 0x15e <flower_off+0x2e>
   {
      i=PORTA=0x00;
 152:	1b ba       	out	0x1b, r1	; 27
 154:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <i.1768+0x1>
 158:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <i.1768>
 15c:	08 95       	ret
      //state_transition();   // state를 천이 to shift_right_keep_ledon
   }
   else
   {
      PORTA = ( ((h >> i) & 0xf0) | ((l << i) & 0x0f));
 15e:	80 ef       	ldi	r24, 0xF0	; 240
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	04 2e       	mov	r0, r20
 164:	02 c0       	rjmp	.+4      	; 0x16a <flower_off+0x3a>
 166:	95 95       	asr	r25
 168:	87 95       	ror	r24
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <flower_off+0x36>
 16e:	28 2f       	mov	r18, r24
 170:	20 7f       	andi	r18, 0xF0	; 240
 172:	8f e0       	ldi	r24, 0x0F	; 15
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <flower_off+0x4c>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	4a 95       	dec	r20
 17e:	e2 f7       	brpl	.-8      	; 0x178 <flower_off+0x48>
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	82 2b       	or	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
      i++;
 186:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <i.1768>
 18a:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <i.1768+0x1>
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <i.1768+0x1>
 194:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <i.1768>
 198:	08 95       	ret

0000019a <shift_left_keep_ledon>:
void shift_left_keep_ledon(void)
{
#if 1
static int i=0;

   if (msec_count >= 30)
 19a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <msec_count>
 19e:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <msec_count+0x1>
 1a2:	4e 97       	sbiw	r24, 0x1e	; 30
 1a4:	14 f1       	brlt	.+68     	; 0x1ea <shift_left_keep_ledon+0x50>
   {
      msec_count=0;
 1a6:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <msec_count+0x1>
 1aa:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <msec_count>
      if (i >= 8)
 1ae:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <i.1772>
 1b2:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <i.1772+0x1>
 1b6:	28 30       	cpi	r18, 0x08	; 8
 1b8:	31 05       	cpc	r19, r1
 1ba:	34 f0       	brlt	.+12     	; 0x1c8 <shift_left_keep_ledon+0x2e>
      {
         i = PORTA = 0x00;
 1bc:	1b ba       	out	0x1b, r1	; 27
 1be:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <i.1772+0x1>
 1c2:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <i.1772>
 1c6:	08 95       	ret
         //state_transition();  // state를 천이 to shift_right_keep_ledon
      }
      else
      {
         PORTA =PORTA |= 0b00000001 << i++;
 1c8:	c9 01       	movw	r24, r18
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <i.1772+0x1>
 1d0:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <i.1772>
 1d4:	3b b3       	in	r19, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <shift_left_keep_ledon+0x46>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	2a 95       	dec	r18
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <shift_left_keep_ledon+0x42>
 1e4:	83 2b       	or	r24, r19
 1e6:	8b bb       	out	0x1b, r24	; 27
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	08 95       	ret

000001ec <shift_right_keep_ledon>:
void shift_right_keep_ledon(void)
{
#if 1
   static int i=0;

   if (msec_count >= 30)
 1ec:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <msec_count>
 1f0:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <msec_count+0x1>
 1f4:	4e 97       	sbiw	r24, 0x1e	; 30
 1f6:	0c f1       	brlt	.+66     	; 0x23a <shift_right_keep_ledon+0x4e>
   {
      msec_count=0;
 1f8:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <msec_count+0x1>
 1fc:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <msec_count>
      if (i >= 8)
 200:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <i.1776>
 204:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <i.1776+0x1>
 208:	28 30       	cpi	r18, 0x08	; 8
 20a:	31 05       	cpc	r19, r1
 20c:	34 f0       	brlt	.+12     	; 0x21a <shift_right_keep_ledon+0x2e>
      {
         i=PORTA=0x00;
 20e:	1b ba       	out	0x1b, r1	; 27
 210:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <i.1776+0x1>
 214:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <i.1776>
 218:	08 95       	ret
         //state_transition();   // state를 천이 to shift_right_keep_ledon
      }
      else
      {
         PORTA |= 0b10000000 >> i++;
 21a:	c9 01       	movw	r24, r18
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <i.1776+0x1>
 222:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <i.1776>
 226:	3b b3       	in	r19, 0x1b	; 27
 228:	80 e8       	ldi	r24, 0x80	; 128
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <shift_right_keep_ledon+0x46>
 22e:	95 95       	asr	r25
 230:	87 95       	ror	r24
 232:	2a 95       	dec	r18
 234:	e2 f7       	brpl	.-8      	; 0x22e <shift_right_keep_ledon+0x42>
 236:	83 2b       	or	r24, r19
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret

0000023c <shift_left_ledon>:
{
#if 1 
   // (1)for문 제거  (2) _delay_ms(30) 제거
   static int i=0;
   
   if (msec_count >= 30)
 23c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <msec_count>
 240:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <msec_count+0x1>
 244:	4e 97       	sbiw	r24, 0x1e	; 30
 246:	0c f1       	brlt	.+66     	; 0x28a <shift_left_ledon+0x4e>
   {
      msec_count=0;
 248:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <msec_count+0x1>
 24c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <msec_count>
      if (i >= 8)
 250:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <i.1780>
 254:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <i.1780+0x1>
 258:	88 30       	cpi	r24, 0x08	; 8
 25a:	91 05       	cpc	r25, r1
 25c:	34 f0       	brlt	.+12     	; 0x26a <shift_left_ledon+0x2e>
      {
         i=PORTA=0;
 25e:	1b ba       	out	0x1b, r1	; 27
 260:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <i.1780+0x1>
 264:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <i.1780>
 268:	08 95       	ret
         //state_transition();
      }
      else
      {
         PORTA = 0b00000001 << i++;  // (1) PORTA = 0b00000001 << i  (2) i++
 26a:	9c 01       	movw	r18, r24
 26c:	2f 5f       	subi	r18, 0xFF	; 255
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	30 93 d1 01 	sts	0x01D1, r19	; 0x8001d1 <i.1780+0x1>
 274:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <i.1780>
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	a9 01       	movw	r20, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <shift_left_ledon+0x48>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	8a 95       	dec	r24
 286:	e2 f7       	brpl	.-8      	; 0x280 <shift_left_ledon+0x44>
 288:	4b bb       	out	0x1b, r20	; 27
 28a:	08 95       	ret

0000028c <shift_right_ledon>:
void shift_right_ledon(void)
{
#if 1
   static int i=0;

   if (msec_count >= 30)
 28c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <msec_count>
 290:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <msec_count+0x1>
 294:	4e 97       	sbiw	r24, 0x1e	; 30
 296:	0c f1       	brlt	.+66     	; 0x2da <shift_right_ledon+0x4e>
   {
      msec_count=0;
 298:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <msec_count+0x1>
 29c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <msec_count>
      if (i >= 8)
 2a0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
 2a4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <__data_end+0x1>
 2a8:	88 30       	cpi	r24, 0x08	; 8
 2aa:	91 05       	cpc	r25, r1
 2ac:	34 f0       	brlt	.+12     	; 0x2ba <shift_right_ledon+0x2e>
      {
         i=PORTA=0x00;
 2ae:	1b ba       	out	0x1b, r1	; 27
 2b0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <__data_end+0x1>
 2b4:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <__data_end>
 2b8:	08 95       	ret
         //state_transition();   // state를 천이 to shift_left_keep_ledon
      }
      else
      {
         PORTA = 0b10000000 >> i++;
 2ba:	9c 01       	movw	r18, r24
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	30 93 cf 01 	sts	0x01CF, r19	; 0x8001cf <__data_end+0x1>
 2c4:	20 93 ce 01 	sts	0x01CE, r18	; 0x8001ce <__data_end>
 2c8:	20 e8       	ldi	r18, 0x80	; 128
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	a9 01       	movw	r20, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <shift_right_ledon+0x48>
 2d0:	55 95       	asr	r21
 2d2:	47 95       	ror	r20
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <shift_right_ledon+0x44>
 2d8:	4b bb       	out	0x1b, r20	; 27
 2da:	08 95       	ret

000002dc <led_all_on>:
#endif 
}

void led_all_on(void)
{
   PORTA = 0xff;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	8b bb       	out	0x1b, r24	; 27
 2e0:	08 95       	ret

000002e2 <led_all_off>:
}

void led_all_off(void)
{
   PORTA = 0x00;
 2e2:	1b ba       	out	0x1b, r1	; 27
 2e4:	08 95       	ret

000002e6 <__vector_16>:
int led_toggle=0;

extern int led_mode;

ISR(TIMER0_OVF_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
   // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정하는것이다.
   TCNT0 = 6;
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	82 bf       	out	0x32, r24	; 50
   msec_count++; // 1ms마다 1씩 증가
 2f8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <msec_count>
 2fc:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <msec_count+0x1>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <msec_count+0x1>
 306:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <msec_count>
}
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <init_timer0>:
   // 분주비 계산
   // (1) 16000000HZ / 64 = 250.000HZ
   // (2) T(주기) 1clock의 소요시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
   // (3) 8bit timer OV(Overflow : 0.004ms x 256 = 0.001024sec --> 1.024ms
   // 1ms마다 정확하게 INT를 띄우고 싶으면 0.004ms x 250개를 count = 0.001sec ==>1ms
   TCNT0=6; // TCNT : 0~256 1마다 TIMER0_OVF_VEC로 진입한다.
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	82 bf       	out	0x32, r24	; 50
          // TCNT0 = 6으로 설정을 한 이유 : 6-->256 : 250개의 PULSE를 COUNT하기 때문에 정확히
         // 1ms가 된다.
   // (4) 분주비 설정 (25,000HZ --> 250KHZ) P296 표13-1
   TCCR0 |= 1<<CS02|0<<CS01|0<<CS00; // CS02 = 1 , CS01 = 0 , CS00 = 0 (64분주)
 31c:	83 b7       	in	r24, 0x33	; 51
 31e:	84 60       	ori	r24, 0x04	; 4
 320:	83 bf       	out	0x33, r24	; 51
   // (5) TIMER0 Overflow INT를 허용(enable) P297 표13-5
   TIMSK |= 1<<TOIE0;
 322:	87 b7       	in	r24, 0x37	; 55
 324:	81 60       	ori	r24, 0x01	; 1
 326:	87 bf       	out	0x37, r24	; 55
 328:	08 95       	ret

0000032a <main>:
   msec_count++; // 1ms마다 1씩 증가
}

int main(void)
{
   init_timer0();
 32a:	f6 df       	rcall	.-20     	; 0x318 <init_timer0>
   init_uart0();
 32c:	8f d0       	rcall	.+286    	; 0x44c <init_uart0>
   init_uart1();
 32e:	7d d1       	rcall	.+762    	; 0x62a <init_uart1>
 330:	8f ef       	ldi	r24, 0xFF	; 255
   DDRA = 0xff;
 332:	8a bb       	out	0x1a, r24	; 26
 334:	1b ba       	out	0x1b, r1	; 27
   PORTA = 0x00;
 336:	82 e1       	ldi	r24, 0x12	; 18
   stdout = &OUTPUT;
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <__iob+0x3>
 33e:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <__iob+0x2>
 342:	78 94       	sei
   //stdout = &OUTPUT1;
   sei();

   printf("UART initialized\n");
 344:	80 e4       	ldi	r24, 0x40	; 64
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	3c d2       	rcall	.+1144   	; 0x7c2 <puts>

   while (1)
   {
      bt_command_processing(); // 블루투스 명령을 먼저 확인
      pc_command_processing(); // PC 명령 확인
      fp[led_mode % 7]();
 34a:	c7 e0       	ldi	r28, 0x07	; 7
 34c:	d0 e0       	ldi	r29, 0x00	; 0

   printf("UART initialized\n");

   while (1)
   {
      bt_command_processing(); // 블루투스 명령을 먼저 확인
 34e:	82 d1       	rcall	.+772    	; 0x654 <bt_command_processing>
 350:	8f d0       	rcall	.+286    	; 0x470 <pc_command_processing>
      pc_command_processing(); // PC 명령 확인
 352:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <led_mode>
      fp[led_mode % 7]();
 356:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <led_mode+0x1>
 35a:	be 01       	movw	r22, r28
 35c:	ea d1       	rcall	.+980    	; 0x732 <__divmodhi4>
 35e:	fc 01       	movw	r30, r24
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	e0 50       	subi	r30, 0x00	; 0
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	01 90       	ld	r0, Z+
 36a:	f0 81       	ld	r31, Z
 36c:	e0 2d       	mov	r30, r0
 36e:	09 95       	icall
 370:	ee cf       	rjmp	.-36     	; 0x34e <main+0x24>

00000372 <__vector_18>:
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
   예) led_all_on\n ==> 11번 이곳으로 들어 온다.
       led_all_off\n 
*/
volatile uint8_t rx_msg_received=0;
ISR(USART0_RX_vect) //ST0P비트가 들어옴과 동시에 INTERRUPT
{
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	0b b6       	in	r0, 0x3b	; 59
 37e:	0f 92       	push	r0
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	1f 92       	push	r1
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
   volatile uint8_t rx_data;
   volatile static int i=0;
   
   //rx_data의 형은 안바꿔줘도됌 -> char로 가져와서 이차원배열에 저장하기 때문
   rx_data = UDR0; // uart0의 H/W register(UDR0)로 부터 1byte를 읽어 들인다.
 39e:	8c b1       	in	r24, 0x0c	; 12
 3a0:	89 83       	std	Y+1, r24	; 0x01
               // rx_data = UDR0;를 실행하면 UDR0의 내용이 비워진다.(empty)
   if (rx_data == '\n')
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	8a 30       	cpi	r24, 0x0A	; 10
 3a6:	11 f5       	brne	.+68     	; 0x3ec <__vector_18+0x7a>
   {
      rx_buff[rear++][i] = '\0';
 3a8:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <rear>
 3ac:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <rear+0x1>
 3b0:	c9 01       	movw	r24, r18
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <rear+0x1>
 3b8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <rear>
 3bc:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <i.2080>
 3c0:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <i.2080+0x1>
 3c4:	48 e2       	ldi	r20, 0x28	; 40
 3c6:	42 9f       	mul	r20, r18
 3c8:	f0 01       	movw	r30, r0
 3ca:	43 9f       	mul	r20, r19
 3cc:	f0 0d       	add	r31, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	e6 51       	subi	r30, 0x16	; 22
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	e8 0f       	add	r30, r24
 3d6:	f9 1f       	adc	r31, r25
 3d8:	10 82       	st	Z, r1
      rear % COMMAND_NUMBER; // rear : 0~9
 3da:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <rear>
 3de:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <rear+0x1>
      i=0;
 3e2:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <i.2080+0x1>
 3e6:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <i.2080>
 3ea:	1c c0       	rjmp	.+56     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
      i=0;
      */
   }
   else
   {
      rx_buff[rear][i++] = rx_data;
 3ec:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <rear>
 3f0:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <rear+0x1>
 3f4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <i.2080>
 3f8:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <i.2080+0x1>
 3fc:	9c 01       	movw	r18, r24
 3fe:	2f 5f       	subi	r18, 0xFF	; 255
 400:	3f 4f       	sbci	r19, 0xFF	; 255
 402:	30 93 dd 01 	sts	0x01DD, r19	; 0x8001dd <i.2080+0x1>
 406:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <i.2080>
 40a:	49 81       	ldd	r20, Y+1	; 0x01
 40c:	58 e2       	ldi	r21, 0x28	; 40
 40e:	56 9f       	mul	r21, r22
 410:	90 01       	movw	r18, r0
 412:	57 9f       	mul	r21, r23
 414:	30 0d       	add	r19, r0
 416:	11 24       	eor	r1, r1
 418:	26 51       	subi	r18, 0x16	; 22
 41a:	3e 4f       	sbci	r19, 0xFE	; 254
 41c:	f9 01       	movw	r30, r18
 41e:	e8 0f       	add	r30, r24
 420:	f9 1f       	adc	r31, r25
 422:	40 83       	st	Z, r20
      // COMMAND_LENGTH를 check하는 logic 추가
      
      
   }
}
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0b be       	out	0x3b, r0	; 59
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <init_uart0>:
   3. RX(수신) : 인터럽트 방식으로 구현
*/
void init_uart0(void)
{
   // 1. 9600bps로 설정
   UBRR0H = 0x00; //상위 4비트
 44c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
   UBRR0L = 207; // 9600bps P219 표 9-9 하위 8비트
 450:	8f ec       	ldi	r24, 0xCF	; 207
 452:	89 b9       	out	0x09, r24	; 9
   //UBRR0L = 16; // 115200bps P219 표 9-9 하위 8비트
   // 2. 2배속 통신 표9-1
   UCSR0A |= 1 << U2X0; // 2배속 통신
 454:	59 9a       	sbi	0x0b, 1	; 11
   UCSR0C |= 0x06; // 비동기/data=8bit/none parity
 456:	e5 e9       	ldi	r30, 0x95	; 149
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	86 60       	ori	r24, 0x06	; 6
 45e:	80 83       	st	Z, r24
   // P215 표9-1
   // RXEN0 : UART0로부터 수신이 가능하도록
   // TXEN0 : UART0로부터 송신이 가능하도록
   // RXCIE0 : UART0로부터 1byte가 들어오면(STOP BIT가 들어 오면) rx interrupt를 발생 시킨다.
   UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 460:	8a b1       	in	r24, 0x0a	; 10
 462:	88 69       	ori	r24, 0x98	; 152
 464:	8a b9       	out	0x0a, r24	; 10
 466:	08 95       	ret

00000468 <UART0_transmit>:

// UART0로 1byte를 전송 하는 함수 (polling방식)
void UART0_transmit(uint8_t data)
{
   // 데이터 전송 중이면 전송이 끝날 때 까지 기다린다.
   while (!(UCSR0A & 1 <<UDRE0)); //1이 될때 while 종료
 468:	5d 9b       	sbis	0x0b, 5	; 11
 46a:	fe cf       	rjmp	.-4      	; 0x468 <UART0_transmit>
   UDR0 = data; // data를 H/W전송 register에 쏜다.
 46c:	8c b9       	out	0x0c, r24	; 12
 46e:	08 95       	ret

00000470 <pc_command_processing>:
   "shift_right_keep_ledon",
   "flower_on",
   "flower_off"
};

void pc_command_processing(){
 470:	df 92       	push	r13
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
	if(front != rear)
 47e:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <front>
 482:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <front+0x1>
 486:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <rear>
 48a:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <rear+0x1>
 48e:	28 17       	cp	r18, r24
 490:	39 07       	cpc	r19, r25
 492:	09 f4       	brne	.+2      	; 0x496 <pc_command_processing+0x26>
 494:	54 c0       	rjmp	.+168    	; 0x53e <pc_command_processing+0xce>
	{
		printf("%s\n", (char*)rx_buff[front]);
 496:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <front>
 49a:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <front+0x1>
 49e:	48 e2       	ldi	r20, 0x28	; 40
 4a0:	42 9f       	mul	r20, r18
 4a2:	c0 01       	movw	r24, r0
 4a4:	43 9f       	mul	r20, r19
 4a6:	90 0d       	add	r25, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	86 51       	subi	r24, 0x16	; 22
 4ac:	9e 4f       	sbci	r25, 0xFE	; 254
 4ae:	89 d1       	rcall	.+786    	; 0x7c2 <puts>
 4b0:	c0 e2       	ldi	r28, 0x20	; 32
 4b2:	d1 e0       	ldi	r29, 0x01	; 1
		
		for (int i=0;i<8;i++){
 4b4:	00 e0       	ldi	r16, 0x00	; 0
 4b6:	10 e0       	ldi	r17, 0x00	; 0
			if(strncmp(rx_buff[front], fp_name[i],strlen(fp_name[i]))==NULL){
 4b8:	0f 2e       	mov	r0, r31
 4ba:	f8 e2       	ldi	r31, 0x28	; 40
 4bc:	df 2e       	mov	r13, r31
 4be:	f0 2d       	mov	r31, r0
 4c0:	f8 80       	ld	r15, Y
 4c2:	e9 80       	ldd	r14, Y+1	; 0x01
 4c4:	22 96       	adiw	r28, 0x02	; 2
 4c6:	af 2d       	mov	r26, r15
 4c8:	be 2d       	mov	r27, r14
 4ca:	fd 01       	movw	r30, r26
 4cc:	01 90       	ld	r0, Z+
 4ce:	00 20       	and	r0, r0
 4d0:	e9 f7       	brne	.-6      	; 0x4cc <pc_command_processing+0x5c>
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	af 01       	movw	r20, r30
 4d6:	4a 1b       	sub	r20, r26
 4d8:	5b 0b       	sbc	r21, r27
 4da:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <front>
 4de:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <front+0x1>
 4e2:	d2 9e       	mul	r13, r18
 4e4:	c0 01       	movw	r24, r0
 4e6:	d3 9e       	mul	r13, r19
 4e8:	90 0d       	add	r25, r0
 4ea:	11 24       	eor	r1, r1
 4ec:	6f 2d       	mov	r22, r15
 4ee:	7e 2d       	mov	r23, r14
 4f0:	86 51       	subi	r24, 0x16	; 22
 4f2:	9e 4f       	sbci	r25, 0xFE	; 254
 4f4:	45 d1       	rcall	.+650    	; 0x780 <strncmp>
 4f6:	89 2b       	or	r24, r25
 4f8:	49 f4       	brne	.+18     	; 0x50c <pc_command_processing+0x9c>
				printf(("find:%s\n", fp_name[i]));
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	4e d1       	rcall	.+668    	; 0x79c <printf>
				led_mode=i;
 500:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <led_mode+0x1>
 504:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <led_mode>
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
void pc_command_processing(){
	if(front != rear)
	{
		printf("%s\n", (char*)rx_buff[front]);
		
		for (int i=0;i<8;i++){
 50c:	0f 5f       	subi	r16, 0xFF	; 255
 50e:	1f 4f       	sbci	r17, 0xFF	; 255
 510:	08 30       	cpi	r16, 0x08	; 8
 512:	11 05       	cpc	r17, r1
 514:	a9 f6       	brne	.-86     	; 0x4c0 <pc_command_processing+0x50>
			if(strncmp(rx_buff[front], fp_name[i],strlen(fp_name[i]))==NULL){
				printf(("find:%s\n", fp_name[i]));
				led_mode=i;
			}
		}
		front++;
 516:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <front>
 51a:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <front+0x1>
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <front+0x1>
 524:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <front>
		front %= COMMAND_NUMBER;
 528:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <front>
 52c:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <front+0x1>
 530:	6a e0       	ldi	r22, 0x0A	; 10
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	fe d0       	rcall	.+508    	; 0x732 <__divmodhi4>
 536:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <front+0x1>
 53a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <front>
	}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	08 95       	ret

0000054e <__vector_30>:
#include <stdio.h>

extern int led_mode;

ISR(USART1_RX_vect) //ST0P비트가 들어옴과 동시에 INTERRUPT
{
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	0b b6       	in	r0, 0x3b	; 59
 55a:	0f 92       	push	r0
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	4f 93       	push	r20
 562:	5f 93       	push	r21
 564:	6f 93       	push	r22
 566:	7f 93       	push	r23
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	ef 93       	push	r30
 56e:	ff 93       	push	r31
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	1f 92       	push	r1
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t rx1_data;
	volatile static int i=0;
	
	rx1_data = UDR1; // uart0의 H/W register(UDR0)로 부터 1byte를 읽어 들인다.
 57a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 57e:	89 83       	std	Y+1, r24	; 0x01
	// rx_data = UDR0;를 실행하면 UDR0의 내용이 비워진다.(empty)
	if (rx1_data == '\n') {
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	8a 30       	cpi	r24, 0x0A	; 10
 584:	11 f5       	brne	.+68     	; 0x5ca <__vector_30+0x7c>
		rx1_buff[rear1++][i] = '\0'; ////////2차원 배열일 때
 586:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <rear1>
 58a:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <rear1+0x1>
 58e:	c9 01       	movw	r24, r18
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <rear1+0x1>
 596:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <rear1>
 59a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <i.2073>
 59e:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <i.2073+0x1>
 5a2:	48 e2       	ldi	r20, 0x28	; 40
 5a4:	42 9f       	mul	r20, r18
 5a6:	f0 01       	movw	r30, r0
 5a8:	43 9f       	mul	r20, r19
 5aa:	f0 0d       	add	r31, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	e6 58       	subi	r30, 0x86	; 134
 5b0:	fc 4f       	sbci	r31, 0xFC	; 252
 5b2:	e8 0f       	add	r30, r24
 5b4:	f9 1f       	adc	r31, r25
 5b6:	10 82       	st	Z, r1
		rear1 % COMMAND_NUMBER; // 0~9
 5b8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <rear1>
 5bc:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <rear1+0x1>
		i=0;
 5c0:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <i.2073+0x1>
 5c4:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <i.2073>
 5c8:	1c c0       	rjmp	.+56     	; 0x602 <__vector_30+0xb4>
		
	}
	else {
		rx1_buff[rear1][i++] = rx1_data;
 5ca:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <rear1>
 5ce:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <rear1+0x1>
 5d2:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <i.2073>
 5d6:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <i.2073+0x1>
 5da:	9c 01       	movw	r18, r24
 5dc:	2f 5f       	subi	r18, 0xFF	; 255
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	30 93 e5 01 	sts	0x01E5, r19	; 0x8001e5 <i.2073+0x1>
 5e4:	20 93 e4 01 	sts	0x01E4, r18	; 0x8001e4 <i.2073>
 5e8:	49 81       	ldd	r20, Y+1	; 0x01
 5ea:	58 e2       	ldi	r21, 0x28	; 40
 5ec:	56 9f       	mul	r21, r22
 5ee:	90 01       	movw	r18, r0
 5f0:	57 9f       	mul	r21, r23
 5f2:	30 0d       	add	r19, r0
 5f4:	11 24       	eor	r1, r1
 5f6:	26 58       	subi	r18, 0x86	; 134
 5f8:	3c 4f       	sbci	r19, 0xFC	; 252
 5fa:	f9 01       	movw	r30, r18
 5fc:	e8 0f       	add	r30, r24
 5fe:	f9 1f       	adc	r31, r25
 600:	40 83       	st	Z, r20
		// COMMAND_LENGTH를 check하는 logic 추가
	}
}
 602:	0f 90       	pop	r0
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0b be       	out	0x3b, r0	; 59
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <init_uart1>:

void init_uart1(void){
   // 1. 9600bps로 설정
   UBRR1H = 0x00;
 62a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
   UBRR1L = 207; //9600bps. (p219 표9-9)
 62e:	8f ec       	ldi	r24, 0xCF	; 207
 630:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

   
   // 2. 2배속 통신 (표9-1)
   UCSR1A |= 1<< U2X1; // 2배속 통신
 634:	eb e9       	ldi	r30, 0x9B	; 155
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	80 83       	st	Z, r24
   
   //UCSRnC   -       0     0      0 _      0      1    1    0
   //             비동기     parity(none)   1stop    databit 수
   UCSR1C |= 0x06; //(비동기, data8bit, none parity)
 63e:	ed e9       	ldi	r30, 0x9D	; 157
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	86 60       	ori	r24, 0x06	; 6
 646:	80 83       	st	Z, r24
   //UCSRnB 표9-2)7,4,3
   // p215 표 9-1
   // RXEN0: UART1로부터 수신이 가능하도록 4
   // TXEN0: UART1로부터 송신이 가능하도록 3
   // RXCIE0 : UART1로부터 1byte가 들어오면 (stop bit가 들어오면) rx interrupt를 발생시켜라 7
   UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
 648:	ea e9       	ldi	r30, 0x9A	; 154
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	88 69       	ori	r24, 0x98	; 152
 650:	80 83       	st	Z, r24
 652:	08 95       	ret

00000654 <bt_command_processing>:
   "flower_on",
   "flower_off"
};


void bt_command_processing(){
 654:	df 92       	push	r13
 656:	ef 92       	push	r14
 658:	ff 92       	push	r15
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
   if(front1 != rear1)
 662:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <front1>
 666:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <front1+0x1>
 66a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <rear1>
 66e:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <rear1+0x1>
 672:	28 17       	cp	r18, r24
 674:	39 07       	cpc	r19, r25
 676:	09 f4       	brne	.+2      	; 0x67a <bt_command_processing+0x26>
 678:	54 c0       	rjmp	.+168    	; 0x722 <bt_command_processing+0xce>
   {
      printf("%s\n", (char*)rx1_buff[front1]);
 67a:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <front1>
 67e:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <front1+0x1>
 682:	48 e2       	ldi	r20, 0x28	; 40
 684:	42 9f       	mul	r20, r18
 686:	c0 01       	movw	r24, r0
 688:	43 9f       	mul	r20, r19
 68a:	90 0d       	add	r25, r0
 68c:	11 24       	eor	r1, r1
 68e:	86 58       	subi	r24, 0x86	; 134
 690:	9c 4f       	sbci	r25, 0xFC	; 252
 692:	97 d0       	rcall	.+302    	; 0x7c2 <puts>
 694:	c0 e3       	ldi	r28, 0x30	; 48
 696:	d1 e0       	ldi	r29, 0x01	; 1
      
      for (int i=0;i<8;i++){
 698:	00 e0       	ldi	r16, 0x00	; 0
 69a:	10 e0       	ldi	r17, 0x00	; 0
         if(strncmp(rx1_buff[front1], fp1_name[i],strlen(fp1_name[i]))==NULL){
 69c:	0f 2e       	mov	r0, r31
 69e:	f8 e2       	ldi	r31, 0x28	; 40
 6a0:	df 2e       	mov	r13, r31
 6a2:	f0 2d       	mov	r31, r0
 6a4:	f8 80       	ld	r15, Y
 6a6:	e9 80       	ldd	r14, Y+1	; 0x01
 6a8:	22 96       	adiw	r28, 0x02	; 2
 6aa:	af 2d       	mov	r26, r15
 6ac:	be 2d       	mov	r27, r14
 6ae:	fd 01       	movw	r30, r26
 6b0:	01 90       	ld	r0, Z+
 6b2:	00 20       	and	r0, r0
 6b4:	e9 f7       	brne	.-6      	; 0x6b0 <bt_command_processing+0x5c>
 6b6:	31 97       	sbiw	r30, 0x01	; 1
 6b8:	af 01       	movw	r20, r30
 6ba:	4a 1b       	sub	r20, r26
 6bc:	5b 0b       	sbc	r21, r27
 6be:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <front1>
 6c2:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <front1+0x1>
 6c6:	d2 9e       	mul	r13, r18
 6c8:	c0 01       	movw	r24, r0
 6ca:	d3 9e       	mul	r13, r19
 6cc:	90 0d       	add	r25, r0
 6ce:	11 24       	eor	r1, r1
 6d0:	6f 2d       	mov	r22, r15
 6d2:	7e 2d       	mov	r23, r14
 6d4:	86 58       	subi	r24, 0x86	; 134
 6d6:	9c 4f       	sbci	r25, 0xFC	; 252
 6d8:	53 d0       	rcall	.+166    	; 0x780 <strncmp>
 6da:	89 2b       	or	r24, r25
 6dc:	49 f4       	brne	.+18     	; 0x6f0 <bt_command_processing+0x9c>
            printf(("find:%s\n", fp1_name[i]));
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	5c d0       	rcall	.+184    	; 0x79c <printf>
            led_mode=i;
 6e4:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <led_mode+0x1>
 6e8:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <led_mode>
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
void bt_command_processing(){
   if(front1 != rear1)
   {
      printf("%s\n", (char*)rx1_buff[front1]);
      
      for (int i=0;i<8;i++){
 6f0:	0f 5f       	subi	r16, 0xFF	; 255
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	08 30       	cpi	r16, 0x08	; 8
 6f6:	11 05       	cpc	r17, r1
 6f8:	a9 f6       	brne	.-86     	; 0x6a4 <bt_command_processing+0x50>
         if(strncmp(rx1_buff[front1], fp1_name[i],strlen(fp1_name[i]))==NULL){
            printf(("find:%s\n", fp1_name[i]));
            led_mode=i;
         }
      }
      front1++;
 6fa:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <front1>
 6fe:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <front1+0x1>
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <front1+0x1>
 708:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <front1>
      front1 %= COMMAND_NUMBER;
 70c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <front1>
 710:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <front1+0x1>
 714:	6a e0       	ldi	r22, 0x0A	; 10
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	0c d0       	rcall	.+24     	; 0x732 <__divmodhi4>
 71a:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <front1+0x1>
 71e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <front1>
   }
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	08 95       	ret

00000732 <__divmodhi4>:
 732:	97 fb       	bst	r25, 7
 734:	07 2e       	mov	r0, r23
 736:	16 f4       	brtc	.+4      	; 0x73c <__divmodhi4+0xa>
 738:	00 94       	com	r0
 73a:	06 d0       	rcall	.+12     	; 0x748 <__divmodhi4_neg1>
 73c:	77 fd       	sbrc	r23, 7
 73e:	08 d0       	rcall	.+16     	; 0x750 <__divmodhi4_neg2>
 740:	0b d0       	rcall	.+22     	; 0x758 <__udivmodhi4>
 742:	07 fc       	sbrc	r0, 7
 744:	05 d0       	rcall	.+10     	; 0x750 <__divmodhi4_neg2>
 746:	3e f4       	brtc	.+14     	; 0x756 <__divmodhi4_exit>

00000748 <__divmodhi4_neg1>:
 748:	90 95       	com	r25
 74a:	81 95       	neg	r24
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__divmodhi4_neg2>:
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255

00000756 <__divmodhi4_exit>:
 756:	08 95       	ret

00000758 <__udivmodhi4>:
 758:	aa 1b       	sub	r26, r26
 75a:	bb 1b       	sub	r27, r27
 75c:	51 e1       	ldi	r21, 0x11	; 17
 75e:	07 c0       	rjmp	.+14     	; 0x76e <__udivmodhi4_ep>

00000760 <__udivmodhi4_loop>:
 760:	aa 1f       	adc	r26, r26
 762:	bb 1f       	adc	r27, r27
 764:	a6 17       	cp	r26, r22
 766:	b7 07       	cpc	r27, r23
 768:	10 f0       	brcs	.+4      	; 0x76e <__udivmodhi4_ep>
 76a:	a6 1b       	sub	r26, r22
 76c:	b7 0b       	sbc	r27, r23

0000076e <__udivmodhi4_ep>:
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	5a 95       	dec	r21
 774:	a9 f7       	brne	.-22     	; 0x760 <__udivmodhi4_loop>
 776:	80 95       	com	r24
 778:	90 95       	com	r25
 77a:	bc 01       	movw	r22, r24
 77c:	cd 01       	movw	r24, r26
 77e:	08 95       	ret

00000780 <strncmp>:
 780:	fb 01       	movw	r30, r22
 782:	dc 01       	movw	r26, r24
 784:	41 50       	subi	r20, 0x01	; 1
 786:	50 40       	sbci	r21, 0x00	; 0
 788:	30 f0       	brcs	.+12     	; 0x796 <strncmp+0x16>
 78a:	8d 91       	ld	r24, X+
 78c:	01 90       	ld	r0, Z+
 78e:	80 19       	sub	r24, r0
 790:	19 f4       	brne	.+6      	; 0x798 <strncmp+0x18>
 792:	00 20       	and	r0, r0
 794:	b9 f7       	brne	.-18     	; 0x784 <strncmp+0x4>
 796:	88 1b       	sub	r24, r24
 798:	99 0b       	sbc	r25, r25
 79a:	08 95       	ret

0000079c <printf>:
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	ae 01       	movw	r20, r28
 7a6:	4b 5f       	subi	r20, 0xFB	; 251
 7a8:	5f 4f       	sbci	r21, 0xFF	; 255
 7aa:	fa 01       	movw	r30, r20
 7ac:	61 91       	ld	r22, Z+
 7ae:	71 91       	ld	r23, Z+
 7b0:	af 01       	movw	r20, r30
 7b2:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <__iob+0x2>
 7b6:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <__iob+0x3>
 7ba:	33 d0       	rcall	.+102    	; 0x822 <vfprintf>
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	08 95       	ret

000007c2 <puts>:
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <__iob+0x2>
 7ce:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <__iob+0x3>
 7d2:	23 81       	ldd	r18, Z+3	; 0x03
 7d4:	21 ff       	sbrs	r18, 1
 7d6:	1b c0       	rjmp	.+54     	; 0x80e <puts+0x4c>
 7d8:	8c 01       	movw	r16, r24
 7da:	d0 e0       	ldi	r29, 0x00	; 0
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
 7de:	f8 01       	movw	r30, r16
 7e0:	81 91       	ld	r24, Z+
 7e2:	8f 01       	movw	r16, r30
 7e4:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <__iob+0x2>
 7e8:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <__iob+0x3>
 7ec:	db 01       	movw	r26, r22
 7ee:	18 96       	adiw	r26, 0x08	; 8
 7f0:	ed 91       	ld	r30, X+
 7f2:	fc 91       	ld	r31, X
 7f4:	19 97       	sbiw	r26, 0x09	; 9
 7f6:	88 23       	and	r24, r24
 7f8:	31 f0       	breq	.+12     	; 0x806 <puts+0x44>
 7fa:	09 95       	icall
 7fc:	89 2b       	or	r24, r25
 7fe:	79 f3       	breq	.-34     	; 0x7de <puts+0x1c>
 800:	df ef       	ldi	r29, 0xFF	; 255
 802:	cf ef       	ldi	r28, 0xFF	; 255
 804:	ec cf       	rjmp	.-40     	; 0x7de <puts+0x1c>
 806:	8a e0       	ldi	r24, 0x0A	; 10
 808:	09 95       	icall
 80a:	89 2b       	or	r24, r25
 80c:	19 f0       	breq	.+6      	; 0x814 <puts+0x52>
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	9f ef       	ldi	r25, 0xFF	; 255
 812:	02 c0       	rjmp	.+4      	; 0x818 <puts+0x56>
 814:	8d 2f       	mov	r24, r29
 816:	9c 2f       	mov	r25, r28
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	1f 91       	pop	r17
 81e:	0f 91       	pop	r16
 820:	08 95       	ret

00000822 <vfprintf>:
 822:	2f 92       	push	r2
 824:	3f 92       	push	r3
 826:	4f 92       	push	r4
 828:	5f 92       	push	r5
 82a:	6f 92       	push	r6
 82c:	7f 92       	push	r7
 82e:	8f 92       	push	r8
 830:	9f 92       	push	r9
 832:	af 92       	push	r10
 834:	bf 92       	push	r11
 836:	cf 92       	push	r12
 838:	df 92       	push	r13
 83a:	ef 92       	push	r14
 83c:	ff 92       	push	r15
 83e:	0f 93       	push	r16
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	2b 97       	sbiw	r28, 0x0b	; 11
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	f8 94       	cli
 850:	de bf       	out	0x3e, r29	; 62
 852:	0f be       	out	0x3f, r0	; 63
 854:	cd bf       	out	0x3d, r28	; 61
 856:	6c 01       	movw	r12, r24
 858:	7b 01       	movw	r14, r22
 85a:	8a 01       	movw	r16, r20
 85c:	fc 01       	movw	r30, r24
 85e:	17 82       	std	Z+7, r1	; 0x07
 860:	16 82       	std	Z+6, r1	; 0x06
 862:	83 81       	ldd	r24, Z+3	; 0x03
 864:	81 ff       	sbrs	r24, 1
 866:	bf c1       	rjmp	.+894    	; 0xbe6 <vfprintf+0x3c4>
 868:	ce 01       	movw	r24, r28
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	3c 01       	movw	r6, r24
 86e:	f6 01       	movw	r30, r12
 870:	93 81       	ldd	r25, Z+3	; 0x03
 872:	f7 01       	movw	r30, r14
 874:	93 fd       	sbrc	r25, 3
 876:	85 91       	lpm	r24, Z+
 878:	93 ff       	sbrs	r25, 3
 87a:	81 91       	ld	r24, Z+
 87c:	7f 01       	movw	r14, r30
 87e:	88 23       	and	r24, r24
 880:	09 f4       	brne	.+2      	; 0x884 <vfprintf+0x62>
 882:	ad c1       	rjmp	.+858    	; 0xbde <vfprintf+0x3bc>
 884:	85 32       	cpi	r24, 0x25	; 37
 886:	39 f4       	brne	.+14     	; 0x896 <vfprintf+0x74>
 888:	93 fd       	sbrc	r25, 3
 88a:	85 91       	lpm	r24, Z+
 88c:	93 ff       	sbrs	r25, 3
 88e:	81 91       	ld	r24, Z+
 890:	7f 01       	movw	r14, r30
 892:	85 32       	cpi	r24, 0x25	; 37
 894:	21 f4       	brne	.+8      	; 0x89e <vfprintf+0x7c>
 896:	b6 01       	movw	r22, r12
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	d6 d1       	rcall	.+940    	; 0xc48 <fputc>
 89c:	e8 cf       	rjmp	.-48     	; 0x86e <vfprintf+0x4c>
 89e:	91 2c       	mov	r9, r1
 8a0:	21 2c       	mov	r2, r1
 8a2:	31 2c       	mov	r3, r1
 8a4:	ff e1       	ldi	r31, 0x1F	; 31
 8a6:	f3 15       	cp	r31, r3
 8a8:	d8 f0       	brcs	.+54     	; 0x8e0 <vfprintf+0xbe>
 8aa:	8b 32       	cpi	r24, 0x2B	; 43
 8ac:	79 f0       	breq	.+30     	; 0x8cc <vfprintf+0xaa>
 8ae:	38 f4       	brcc	.+14     	; 0x8be <vfprintf+0x9c>
 8b0:	80 32       	cpi	r24, 0x20	; 32
 8b2:	79 f0       	breq	.+30     	; 0x8d2 <vfprintf+0xb0>
 8b4:	83 32       	cpi	r24, 0x23	; 35
 8b6:	a1 f4       	brne	.+40     	; 0x8e0 <vfprintf+0xbe>
 8b8:	23 2d       	mov	r18, r3
 8ba:	20 61       	ori	r18, 0x10	; 16
 8bc:	1d c0       	rjmp	.+58     	; 0x8f8 <vfprintf+0xd6>
 8be:	8d 32       	cpi	r24, 0x2D	; 45
 8c0:	61 f0       	breq	.+24     	; 0x8da <vfprintf+0xb8>
 8c2:	80 33       	cpi	r24, 0x30	; 48
 8c4:	69 f4       	brne	.+26     	; 0x8e0 <vfprintf+0xbe>
 8c6:	23 2d       	mov	r18, r3
 8c8:	21 60       	ori	r18, 0x01	; 1
 8ca:	16 c0       	rjmp	.+44     	; 0x8f8 <vfprintf+0xd6>
 8cc:	83 2d       	mov	r24, r3
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	38 2e       	mov	r3, r24
 8d2:	e3 2d       	mov	r30, r3
 8d4:	e4 60       	ori	r30, 0x04	; 4
 8d6:	3e 2e       	mov	r3, r30
 8d8:	2a c0       	rjmp	.+84     	; 0x92e <vfprintf+0x10c>
 8da:	f3 2d       	mov	r31, r3
 8dc:	f8 60       	ori	r31, 0x08	; 8
 8de:	1d c0       	rjmp	.+58     	; 0x91a <vfprintf+0xf8>
 8e0:	37 fc       	sbrc	r3, 7
 8e2:	2d c0       	rjmp	.+90     	; 0x93e <vfprintf+0x11c>
 8e4:	20 ed       	ldi	r18, 0xD0	; 208
 8e6:	28 0f       	add	r18, r24
 8e8:	2a 30       	cpi	r18, 0x0A	; 10
 8ea:	40 f0       	brcs	.+16     	; 0x8fc <vfprintf+0xda>
 8ec:	8e 32       	cpi	r24, 0x2E	; 46
 8ee:	b9 f4       	brne	.+46     	; 0x91e <vfprintf+0xfc>
 8f0:	36 fc       	sbrc	r3, 6
 8f2:	75 c1       	rjmp	.+746    	; 0xbde <vfprintf+0x3bc>
 8f4:	23 2d       	mov	r18, r3
 8f6:	20 64       	ori	r18, 0x40	; 64
 8f8:	32 2e       	mov	r3, r18
 8fa:	19 c0       	rjmp	.+50     	; 0x92e <vfprintf+0x10c>
 8fc:	36 fe       	sbrs	r3, 6
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <vfprintf+0xea>
 900:	8a e0       	ldi	r24, 0x0A	; 10
 902:	98 9e       	mul	r9, r24
 904:	20 0d       	add	r18, r0
 906:	11 24       	eor	r1, r1
 908:	92 2e       	mov	r9, r18
 90a:	11 c0       	rjmp	.+34     	; 0x92e <vfprintf+0x10c>
 90c:	ea e0       	ldi	r30, 0x0A	; 10
 90e:	2e 9e       	mul	r2, r30
 910:	20 0d       	add	r18, r0
 912:	11 24       	eor	r1, r1
 914:	22 2e       	mov	r2, r18
 916:	f3 2d       	mov	r31, r3
 918:	f0 62       	ori	r31, 0x20	; 32
 91a:	3f 2e       	mov	r3, r31
 91c:	08 c0       	rjmp	.+16     	; 0x92e <vfprintf+0x10c>
 91e:	8c 36       	cpi	r24, 0x6C	; 108
 920:	21 f4       	brne	.+8      	; 0x92a <vfprintf+0x108>
 922:	83 2d       	mov	r24, r3
 924:	80 68       	ori	r24, 0x80	; 128
 926:	38 2e       	mov	r3, r24
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x10c>
 92a:	88 36       	cpi	r24, 0x68	; 104
 92c:	41 f4       	brne	.+16     	; 0x93e <vfprintf+0x11c>
 92e:	f7 01       	movw	r30, r14
 930:	93 fd       	sbrc	r25, 3
 932:	85 91       	lpm	r24, Z+
 934:	93 ff       	sbrs	r25, 3
 936:	81 91       	ld	r24, Z+
 938:	7f 01       	movw	r14, r30
 93a:	81 11       	cpse	r24, r1
 93c:	b3 cf       	rjmp	.-154    	; 0x8a4 <vfprintf+0x82>
 93e:	98 2f       	mov	r25, r24
 940:	9f 7d       	andi	r25, 0xDF	; 223
 942:	95 54       	subi	r25, 0x45	; 69
 944:	93 30       	cpi	r25, 0x03	; 3
 946:	28 f4       	brcc	.+10     	; 0x952 <vfprintf+0x130>
 948:	0c 5f       	subi	r16, 0xFC	; 252
 94a:	1f 4f       	sbci	r17, 0xFF	; 255
 94c:	9f e3       	ldi	r25, 0x3F	; 63
 94e:	99 83       	std	Y+1, r25	; 0x01
 950:	0d c0       	rjmp	.+26     	; 0x96c <vfprintf+0x14a>
 952:	83 36       	cpi	r24, 0x63	; 99
 954:	31 f0       	breq	.+12     	; 0x962 <vfprintf+0x140>
 956:	83 37       	cpi	r24, 0x73	; 115
 958:	71 f0       	breq	.+28     	; 0x976 <vfprintf+0x154>
 95a:	83 35       	cpi	r24, 0x53	; 83
 95c:	09 f0       	breq	.+2      	; 0x960 <vfprintf+0x13e>
 95e:	55 c0       	rjmp	.+170    	; 0xa0a <vfprintf+0x1e8>
 960:	20 c0       	rjmp	.+64     	; 0x9a2 <vfprintf+0x180>
 962:	f8 01       	movw	r30, r16
 964:	80 81       	ld	r24, Z
 966:	89 83       	std	Y+1, r24	; 0x01
 968:	0e 5f       	subi	r16, 0xFE	; 254
 96a:	1f 4f       	sbci	r17, 0xFF	; 255
 96c:	88 24       	eor	r8, r8
 96e:	83 94       	inc	r8
 970:	91 2c       	mov	r9, r1
 972:	53 01       	movw	r10, r6
 974:	12 c0       	rjmp	.+36     	; 0x99a <vfprintf+0x178>
 976:	28 01       	movw	r4, r16
 978:	f2 e0       	ldi	r31, 0x02	; 2
 97a:	4f 0e       	add	r4, r31
 97c:	51 1c       	adc	r5, r1
 97e:	f8 01       	movw	r30, r16
 980:	a0 80       	ld	r10, Z
 982:	b1 80       	ldd	r11, Z+1	; 0x01
 984:	36 fe       	sbrs	r3, 6
 986:	03 c0       	rjmp	.+6      	; 0x98e <vfprintf+0x16c>
 988:	69 2d       	mov	r22, r9
 98a:	70 e0       	ldi	r23, 0x00	; 0
 98c:	02 c0       	rjmp	.+4      	; 0x992 <vfprintf+0x170>
 98e:	6f ef       	ldi	r22, 0xFF	; 255
 990:	7f ef       	ldi	r23, 0xFF	; 255
 992:	c5 01       	movw	r24, r10
 994:	4e d1       	rcall	.+668    	; 0xc32 <strnlen>
 996:	4c 01       	movw	r8, r24
 998:	82 01       	movw	r16, r4
 99a:	f3 2d       	mov	r31, r3
 99c:	ff 77       	andi	r31, 0x7F	; 127
 99e:	3f 2e       	mov	r3, r31
 9a0:	15 c0       	rjmp	.+42     	; 0x9cc <vfprintf+0x1aa>
 9a2:	28 01       	movw	r4, r16
 9a4:	22 e0       	ldi	r18, 0x02	; 2
 9a6:	42 0e       	add	r4, r18
 9a8:	51 1c       	adc	r5, r1
 9aa:	f8 01       	movw	r30, r16
 9ac:	a0 80       	ld	r10, Z
 9ae:	b1 80       	ldd	r11, Z+1	; 0x01
 9b0:	36 fe       	sbrs	r3, 6
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <vfprintf+0x198>
 9b4:	69 2d       	mov	r22, r9
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <vfprintf+0x19c>
 9ba:	6f ef       	ldi	r22, 0xFF	; 255
 9bc:	7f ef       	ldi	r23, 0xFF	; 255
 9be:	c5 01       	movw	r24, r10
 9c0:	2d d1       	rcall	.+602    	; 0xc1c <strnlen_P>
 9c2:	4c 01       	movw	r8, r24
 9c4:	f3 2d       	mov	r31, r3
 9c6:	f0 68       	ori	r31, 0x80	; 128
 9c8:	3f 2e       	mov	r3, r31
 9ca:	82 01       	movw	r16, r4
 9cc:	33 fc       	sbrc	r3, 3
 9ce:	19 c0       	rjmp	.+50     	; 0xa02 <vfprintf+0x1e0>
 9d0:	82 2d       	mov	r24, r2
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	88 16       	cp	r8, r24
 9d6:	99 06       	cpc	r9, r25
 9d8:	a0 f4       	brcc	.+40     	; 0xa02 <vfprintf+0x1e0>
 9da:	b6 01       	movw	r22, r12
 9dc:	80 e2       	ldi	r24, 0x20	; 32
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	33 d1       	rcall	.+614    	; 0xc48 <fputc>
 9e2:	2a 94       	dec	r2
 9e4:	f5 cf       	rjmp	.-22     	; 0x9d0 <vfprintf+0x1ae>
 9e6:	f5 01       	movw	r30, r10
 9e8:	37 fc       	sbrc	r3, 7
 9ea:	85 91       	lpm	r24, Z+
 9ec:	37 fe       	sbrs	r3, 7
 9ee:	81 91       	ld	r24, Z+
 9f0:	5f 01       	movw	r10, r30
 9f2:	b6 01       	movw	r22, r12
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	28 d1       	rcall	.+592    	; 0xc48 <fputc>
 9f8:	21 10       	cpse	r2, r1
 9fa:	2a 94       	dec	r2
 9fc:	21 e0       	ldi	r18, 0x01	; 1
 9fe:	82 1a       	sub	r8, r18
 a00:	91 08       	sbc	r9, r1
 a02:	81 14       	cp	r8, r1
 a04:	91 04       	cpc	r9, r1
 a06:	79 f7       	brne	.-34     	; 0x9e6 <vfprintf+0x1c4>
 a08:	e1 c0       	rjmp	.+450    	; 0xbcc <vfprintf+0x3aa>
 a0a:	84 36       	cpi	r24, 0x64	; 100
 a0c:	11 f0       	breq	.+4      	; 0xa12 <vfprintf+0x1f0>
 a0e:	89 36       	cpi	r24, 0x69	; 105
 a10:	39 f5       	brne	.+78     	; 0xa60 <vfprintf+0x23e>
 a12:	f8 01       	movw	r30, r16
 a14:	37 fe       	sbrs	r3, 7
 a16:	07 c0       	rjmp	.+14     	; 0xa26 <vfprintf+0x204>
 a18:	60 81       	ld	r22, Z
 a1a:	71 81       	ldd	r23, Z+1	; 0x01
 a1c:	82 81       	ldd	r24, Z+2	; 0x02
 a1e:	93 81       	ldd	r25, Z+3	; 0x03
 a20:	0c 5f       	subi	r16, 0xFC	; 252
 a22:	1f 4f       	sbci	r17, 0xFF	; 255
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <vfprintf+0x214>
 a26:	60 81       	ld	r22, Z
 a28:	71 81       	ldd	r23, Z+1	; 0x01
 a2a:	07 2e       	mov	r0, r23
 a2c:	00 0c       	add	r0, r0
 a2e:	88 0b       	sbc	r24, r24
 a30:	99 0b       	sbc	r25, r25
 a32:	0e 5f       	subi	r16, 0xFE	; 254
 a34:	1f 4f       	sbci	r17, 0xFF	; 255
 a36:	f3 2d       	mov	r31, r3
 a38:	ff 76       	andi	r31, 0x6F	; 111
 a3a:	3f 2e       	mov	r3, r31
 a3c:	97 ff       	sbrs	r25, 7
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <vfprintf+0x230>
 a40:	90 95       	com	r25
 a42:	80 95       	com	r24
 a44:	70 95       	com	r23
 a46:	61 95       	neg	r22
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	f0 68       	ori	r31, 0x80	; 128
 a50:	3f 2e       	mov	r3, r31
 a52:	2a e0       	ldi	r18, 0x0A	; 10
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	a3 01       	movw	r20, r6
 a58:	33 d1       	rcall	.+614    	; 0xcc0 <__ultoa_invert>
 a5a:	88 2e       	mov	r8, r24
 a5c:	86 18       	sub	r8, r6
 a5e:	44 c0       	rjmp	.+136    	; 0xae8 <vfprintf+0x2c6>
 a60:	85 37       	cpi	r24, 0x75	; 117
 a62:	31 f4       	brne	.+12     	; 0xa70 <vfprintf+0x24e>
 a64:	23 2d       	mov	r18, r3
 a66:	2f 7e       	andi	r18, 0xEF	; 239
 a68:	b2 2e       	mov	r11, r18
 a6a:	2a e0       	ldi	r18, 0x0A	; 10
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	25 c0       	rjmp	.+74     	; 0xaba <vfprintf+0x298>
 a70:	93 2d       	mov	r25, r3
 a72:	99 7f       	andi	r25, 0xF9	; 249
 a74:	b9 2e       	mov	r11, r25
 a76:	8f 36       	cpi	r24, 0x6F	; 111
 a78:	c1 f0       	breq	.+48     	; 0xaaa <vfprintf+0x288>
 a7a:	18 f4       	brcc	.+6      	; 0xa82 <vfprintf+0x260>
 a7c:	88 35       	cpi	r24, 0x58	; 88
 a7e:	79 f0       	breq	.+30     	; 0xa9e <vfprintf+0x27c>
 a80:	ae c0       	rjmp	.+348    	; 0xbde <vfprintf+0x3bc>
 a82:	80 37       	cpi	r24, 0x70	; 112
 a84:	19 f0       	breq	.+6      	; 0xa8c <vfprintf+0x26a>
 a86:	88 37       	cpi	r24, 0x78	; 120
 a88:	21 f0       	breq	.+8      	; 0xa92 <vfprintf+0x270>
 a8a:	a9 c0       	rjmp	.+338    	; 0xbde <vfprintf+0x3bc>
 a8c:	e9 2f       	mov	r30, r25
 a8e:	e0 61       	ori	r30, 0x10	; 16
 a90:	be 2e       	mov	r11, r30
 a92:	b4 fe       	sbrs	r11, 4
 a94:	0d c0       	rjmp	.+26     	; 0xab0 <vfprintf+0x28e>
 a96:	fb 2d       	mov	r31, r11
 a98:	f4 60       	ori	r31, 0x04	; 4
 a9a:	bf 2e       	mov	r11, r31
 a9c:	09 c0       	rjmp	.+18     	; 0xab0 <vfprintf+0x28e>
 a9e:	34 fe       	sbrs	r3, 4
 aa0:	0a c0       	rjmp	.+20     	; 0xab6 <vfprintf+0x294>
 aa2:	29 2f       	mov	r18, r25
 aa4:	26 60       	ori	r18, 0x06	; 6
 aa6:	b2 2e       	mov	r11, r18
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <vfprintf+0x294>
 aaa:	28 e0       	ldi	r18, 0x08	; 8
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	05 c0       	rjmp	.+10     	; 0xaba <vfprintf+0x298>
 ab0:	20 e1       	ldi	r18, 0x10	; 16
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x298>
 ab6:	20 e1       	ldi	r18, 0x10	; 16
 ab8:	32 e0       	ldi	r19, 0x02	; 2
 aba:	f8 01       	movw	r30, r16
 abc:	b7 fe       	sbrs	r11, 7
 abe:	07 c0       	rjmp	.+14     	; 0xace <vfprintf+0x2ac>
 ac0:	60 81       	ld	r22, Z
 ac2:	71 81       	ldd	r23, Z+1	; 0x01
 ac4:	82 81       	ldd	r24, Z+2	; 0x02
 ac6:	93 81       	ldd	r25, Z+3	; 0x03
 ac8:	0c 5f       	subi	r16, 0xFC	; 252
 aca:	1f 4f       	sbci	r17, 0xFF	; 255
 acc:	06 c0       	rjmp	.+12     	; 0xada <vfprintf+0x2b8>
 ace:	60 81       	ld	r22, Z
 ad0:	71 81       	ldd	r23, Z+1	; 0x01
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 5f       	subi	r16, 0xFE	; 254
 ad8:	1f 4f       	sbci	r17, 0xFF	; 255
 ada:	a3 01       	movw	r20, r6
 adc:	f1 d0       	rcall	.+482    	; 0xcc0 <__ultoa_invert>
 ade:	88 2e       	mov	r8, r24
 ae0:	86 18       	sub	r8, r6
 ae2:	fb 2d       	mov	r31, r11
 ae4:	ff 77       	andi	r31, 0x7F	; 127
 ae6:	3f 2e       	mov	r3, r31
 ae8:	36 fe       	sbrs	r3, 6
 aea:	0d c0       	rjmp	.+26     	; 0xb06 <vfprintf+0x2e4>
 aec:	23 2d       	mov	r18, r3
 aee:	2e 7f       	andi	r18, 0xFE	; 254
 af0:	a2 2e       	mov	r10, r18
 af2:	89 14       	cp	r8, r9
 af4:	58 f4       	brcc	.+22     	; 0xb0c <vfprintf+0x2ea>
 af6:	34 fe       	sbrs	r3, 4
 af8:	0b c0       	rjmp	.+22     	; 0xb10 <vfprintf+0x2ee>
 afa:	32 fc       	sbrc	r3, 2
 afc:	09 c0       	rjmp	.+18     	; 0xb10 <vfprintf+0x2ee>
 afe:	83 2d       	mov	r24, r3
 b00:	8e 7e       	andi	r24, 0xEE	; 238
 b02:	a8 2e       	mov	r10, r24
 b04:	05 c0       	rjmp	.+10     	; 0xb10 <vfprintf+0x2ee>
 b06:	b8 2c       	mov	r11, r8
 b08:	a3 2c       	mov	r10, r3
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <vfprintf+0x2f0>
 b0c:	b8 2c       	mov	r11, r8
 b0e:	01 c0       	rjmp	.+2      	; 0xb12 <vfprintf+0x2f0>
 b10:	b9 2c       	mov	r11, r9
 b12:	a4 fe       	sbrs	r10, 4
 b14:	0f c0       	rjmp	.+30     	; 0xb34 <vfprintf+0x312>
 b16:	fe 01       	movw	r30, r28
 b18:	e8 0d       	add	r30, r8
 b1a:	f1 1d       	adc	r31, r1
 b1c:	80 81       	ld	r24, Z
 b1e:	80 33       	cpi	r24, 0x30	; 48
 b20:	21 f4       	brne	.+8      	; 0xb2a <vfprintf+0x308>
 b22:	9a 2d       	mov	r25, r10
 b24:	99 7e       	andi	r25, 0xE9	; 233
 b26:	a9 2e       	mov	r10, r25
 b28:	09 c0       	rjmp	.+18     	; 0xb3c <vfprintf+0x31a>
 b2a:	a2 fe       	sbrs	r10, 2
 b2c:	06 c0       	rjmp	.+12     	; 0xb3a <vfprintf+0x318>
 b2e:	b3 94       	inc	r11
 b30:	b3 94       	inc	r11
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <vfprintf+0x31a>
 b34:	8a 2d       	mov	r24, r10
 b36:	86 78       	andi	r24, 0x86	; 134
 b38:	09 f0       	breq	.+2      	; 0xb3c <vfprintf+0x31a>
 b3a:	b3 94       	inc	r11
 b3c:	a3 fc       	sbrc	r10, 3
 b3e:	10 c0       	rjmp	.+32     	; 0xb60 <vfprintf+0x33e>
 b40:	a0 fe       	sbrs	r10, 0
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <vfprintf+0x32e>
 b44:	b2 14       	cp	r11, r2
 b46:	80 f4       	brcc	.+32     	; 0xb68 <vfprintf+0x346>
 b48:	28 0c       	add	r2, r8
 b4a:	92 2c       	mov	r9, r2
 b4c:	9b 18       	sub	r9, r11
 b4e:	0d c0       	rjmp	.+26     	; 0xb6a <vfprintf+0x348>
 b50:	b2 14       	cp	r11, r2
 b52:	58 f4       	brcc	.+22     	; 0xb6a <vfprintf+0x348>
 b54:	b6 01       	movw	r22, r12
 b56:	80 e2       	ldi	r24, 0x20	; 32
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	76 d0       	rcall	.+236    	; 0xc48 <fputc>
 b5c:	b3 94       	inc	r11
 b5e:	f8 cf       	rjmp	.-16     	; 0xb50 <vfprintf+0x32e>
 b60:	b2 14       	cp	r11, r2
 b62:	18 f4       	brcc	.+6      	; 0xb6a <vfprintf+0x348>
 b64:	2b 18       	sub	r2, r11
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <vfprintf+0x34a>
 b68:	98 2c       	mov	r9, r8
 b6a:	21 2c       	mov	r2, r1
 b6c:	a4 fe       	sbrs	r10, 4
 b6e:	0f c0       	rjmp	.+30     	; 0xb8e <vfprintf+0x36c>
 b70:	b6 01       	movw	r22, r12
 b72:	80 e3       	ldi	r24, 0x30	; 48
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	68 d0       	rcall	.+208    	; 0xc48 <fputc>
 b78:	a2 fe       	sbrs	r10, 2
 b7a:	16 c0       	rjmp	.+44     	; 0xba8 <vfprintf+0x386>
 b7c:	a1 fc       	sbrc	r10, 1
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <vfprintf+0x364>
 b80:	88 e7       	ldi	r24, 0x78	; 120
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <vfprintf+0x368>
 b86:	88 e5       	ldi	r24, 0x58	; 88
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	b6 01       	movw	r22, r12
 b8c:	0c c0       	rjmp	.+24     	; 0xba6 <vfprintf+0x384>
 b8e:	8a 2d       	mov	r24, r10
 b90:	86 78       	andi	r24, 0x86	; 134
 b92:	51 f0       	breq	.+20     	; 0xba8 <vfprintf+0x386>
 b94:	a1 fe       	sbrs	r10, 1
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x37a>
 b98:	8b e2       	ldi	r24, 0x2B	; 43
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <vfprintf+0x37c>
 b9c:	80 e2       	ldi	r24, 0x20	; 32
 b9e:	a7 fc       	sbrc	r10, 7
 ba0:	8d e2       	ldi	r24, 0x2D	; 45
 ba2:	b6 01       	movw	r22, r12
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	50 d0       	rcall	.+160    	; 0xc48 <fputc>
 ba8:	89 14       	cp	r8, r9
 baa:	30 f4       	brcc	.+12     	; 0xbb8 <vfprintf+0x396>
 bac:	b6 01       	movw	r22, r12
 bae:	80 e3       	ldi	r24, 0x30	; 48
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	4a d0       	rcall	.+148    	; 0xc48 <fputc>
 bb4:	9a 94       	dec	r9
 bb6:	f8 cf       	rjmp	.-16     	; 0xba8 <vfprintf+0x386>
 bb8:	8a 94       	dec	r8
 bba:	f3 01       	movw	r30, r6
 bbc:	e8 0d       	add	r30, r8
 bbe:	f1 1d       	adc	r31, r1
 bc0:	80 81       	ld	r24, Z
 bc2:	b6 01       	movw	r22, r12
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	40 d0       	rcall	.+128    	; 0xc48 <fputc>
 bc8:	81 10       	cpse	r8, r1
 bca:	f6 cf       	rjmp	.-20     	; 0xbb8 <vfprintf+0x396>
 bcc:	22 20       	and	r2, r2
 bce:	09 f4       	brne	.+2      	; 0xbd2 <vfprintf+0x3b0>
 bd0:	4e ce       	rjmp	.-868    	; 0x86e <vfprintf+0x4c>
 bd2:	b6 01       	movw	r22, r12
 bd4:	80 e2       	ldi	r24, 0x20	; 32
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	37 d0       	rcall	.+110    	; 0xc48 <fputc>
 bda:	2a 94       	dec	r2
 bdc:	f7 cf       	rjmp	.-18     	; 0xbcc <vfprintf+0x3aa>
 bde:	f6 01       	movw	r30, r12
 be0:	86 81       	ldd	r24, Z+6	; 0x06
 be2:	97 81       	ldd	r25, Z+7	; 0x07
 be4:	02 c0       	rjmp	.+4      	; 0xbea <vfprintf+0x3c8>
 be6:	8f ef       	ldi	r24, 0xFF	; 255
 be8:	9f ef       	ldi	r25, 0xFF	; 255
 bea:	2b 96       	adiw	r28, 0x0b	; 11
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	f8 94       	cli
 bf0:	de bf       	out	0x3e, r29	; 62
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	cd bf       	out	0x3d, r28	; 61
 bf6:	df 91       	pop	r29
 bf8:	cf 91       	pop	r28
 bfa:	1f 91       	pop	r17
 bfc:	0f 91       	pop	r16
 bfe:	ff 90       	pop	r15
 c00:	ef 90       	pop	r14
 c02:	df 90       	pop	r13
 c04:	cf 90       	pop	r12
 c06:	bf 90       	pop	r11
 c08:	af 90       	pop	r10
 c0a:	9f 90       	pop	r9
 c0c:	8f 90       	pop	r8
 c0e:	7f 90       	pop	r7
 c10:	6f 90       	pop	r6
 c12:	5f 90       	pop	r5
 c14:	4f 90       	pop	r4
 c16:	3f 90       	pop	r3
 c18:	2f 90       	pop	r2
 c1a:	08 95       	ret

00000c1c <strnlen_P>:
 c1c:	fc 01       	movw	r30, r24
 c1e:	05 90       	lpm	r0, Z+
 c20:	61 50       	subi	r22, 0x01	; 1
 c22:	70 40       	sbci	r23, 0x00	; 0
 c24:	01 10       	cpse	r0, r1
 c26:	d8 f7       	brcc	.-10     	; 0xc1e <strnlen_P+0x2>
 c28:	80 95       	com	r24
 c2a:	90 95       	com	r25
 c2c:	8e 0f       	add	r24, r30
 c2e:	9f 1f       	adc	r25, r31
 c30:	08 95       	ret

00000c32 <strnlen>:
 c32:	fc 01       	movw	r30, r24
 c34:	61 50       	subi	r22, 0x01	; 1
 c36:	70 40       	sbci	r23, 0x00	; 0
 c38:	01 90       	ld	r0, Z+
 c3a:	01 10       	cpse	r0, r1
 c3c:	d8 f7       	brcc	.-10     	; 0xc34 <strnlen+0x2>
 c3e:	80 95       	com	r24
 c40:	90 95       	com	r25
 c42:	8e 0f       	add	r24, r30
 c44:	9f 1f       	adc	r25, r31
 c46:	08 95       	ret

00000c48 <fputc>:
 c48:	0f 93       	push	r16
 c4a:	1f 93       	push	r17
 c4c:	cf 93       	push	r28
 c4e:	df 93       	push	r29
 c50:	fb 01       	movw	r30, r22
 c52:	23 81       	ldd	r18, Z+3	; 0x03
 c54:	21 fd       	sbrc	r18, 1
 c56:	03 c0       	rjmp	.+6      	; 0xc5e <fputc+0x16>
 c58:	8f ef       	ldi	r24, 0xFF	; 255
 c5a:	9f ef       	ldi	r25, 0xFF	; 255
 c5c:	2c c0       	rjmp	.+88     	; 0xcb6 <fputc+0x6e>
 c5e:	22 ff       	sbrs	r18, 2
 c60:	16 c0       	rjmp	.+44     	; 0xc8e <fputc+0x46>
 c62:	46 81       	ldd	r20, Z+6	; 0x06
 c64:	57 81       	ldd	r21, Z+7	; 0x07
 c66:	24 81       	ldd	r18, Z+4	; 0x04
 c68:	35 81       	ldd	r19, Z+5	; 0x05
 c6a:	42 17       	cp	r20, r18
 c6c:	53 07       	cpc	r21, r19
 c6e:	44 f4       	brge	.+16     	; 0xc80 <fputc+0x38>
 c70:	a0 81       	ld	r26, Z
 c72:	b1 81       	ldd	r27, Z+1	; 0x01
 c74:	9d 01       	movw	r18, r26
 c76:	2f 5f       	subi	r18, 0xFF	; 255
 c78:	3f 4f       	sbci	r19, 0xFF	; 255
 c7a:	31 83       	std	Z+1, r19	; 0x01
 c7c:	20 83       	st	Z, r18
 c7e:	8c 93       	st	X, r24
 c80:	26 81       	ldd	r18, Z+6	; 0x06
 c82:	37 81       	ldd	r19, Z+7	; 0x07
 c84:	2f 5f       	subi	r18, 0xFF	; 255
 c86:	3f 4f       	sbci	r19, 0xFF	; 255
 c88:	37 83       	std	Z+7, r19	; 0x07
 c8a:	26 83       	std	Z+6, r18	; 0x06
 c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <fputc+0x6e>
 c8e:	8b 01       	movw	r16, r22
 c90:	ec 01       	movw	r28, r24
 c92:	fb 01       	movw	r30, r22
 c94:	00 84       	ldd	r0, Z+8	; 0x08
 c96:	f1 85       	ldd	r31, Z+9	; 0x09
 c98:	e0 2d       	mov	r30, r0
 c9a:	09 95       	icall
 c9c:	89 2b       	or	r24, r25
 c9e:	e1 f6       	brne	.-72     	; 0xc58 <fputc+0x10>
 ca0:	d8 01       	movw	r26, r16
 ca2:	16 96       	adiw	r26, 0x06	; 6
 ca4:	8d 91       	ld	r24, X+
 ca6:	9c 91       	ld	r25, X
 ca8:	17 97       	sbiw	r26, 0x07	; 7
 caa:	01 96       	adiw	r24, 0x01	; 1
 cac:	17 96       	adiw	r26, 0x07	; 7
 cae:	9c 93       	st	X, r25
 cb0:	8e 93       	st	-X, r24
 cb2:	16 97       	sbiw	r26, 0x06	; 6
 cb4:	ce 01       	movw	r24, r28
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	1f 91       	pop	r17
 cbc:	0f 91       	pop	r16
 cbe:	08 95       	ret

00000cc0 <__ultoa_invert>:
 cc0:	fa 01       	movw	r30, r20
 cc2:	aa 27       	eor	r26, r26
 cc4:	28 30       	cpi	r18, 0x08	; 8
 cc6:	51 f1       	breq	.+84     	; 0xd1c <__ultoa_invert+0x5c>
 cc8:	20 31       	cpi	r18, 0x10	; 16
 cca:	81 f1       	breq	.+96     	; 0xd2c <__ultoa_invert+0x6c>
 ccc:	e8 94       	clt
 cce:	6f 93       	push	r22
 cd0:	6e 7f       	andi	r22, 0xFE	; 254
 cd2:	6e 5f       	subi	r22, 0xFE	; 254
 cd4:	7f 4f       	sbci	r23, 0xFF	; 255
 cd6:	8f 4f       	sbci	r24, 0xFF	; 255
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	af 4f       	sbci	r26, 0xFF	; 255
 cdc:	b1 e0       	ldi	r27, 0x01	; 1
 cde:	3e d0       	rcall	.+124    	; 0xd5c <__ultoa_invert+0x9c>
 ce0:	b4 e0       	ldi	r27, 0x04	; 4
 ce2:	3c d0       	rcall	.+120    	; 0xd5c <__ultoa_invert+0x9c>
 ce4:	67 0f       	add	r22, r23
 ce6:	78 1f       	adc	r23, r24
 ce8:	89 1f       	adc	r24, r25
 cea:	9a 1f       	adc	r25, r26
 cec:	a1 1d       	adc	r26, r1
 cee:	68 0f       	add	r22, r24
 cf0:	79 1f       	adc	r23, r25
 cf2:	8a 1f       	adc	r24, r26
 cf4:	91 1d       	adc	r25, r1
 cf6:	a1 1d       	adc	r26, r1
 cf8:	6a 0f       	add	r22, r26
 cfa:	71 1d       	adc	r23, r1
 cfc:	81 1d       	adc	r24, r1
 cfe:	91 1d       	adc	r25, r1
 d00:	a1 1d       	adc	r26, r1
 d02:	20 d0       	rcall	.+64     	; 0xd44 <__ultoa_invert+0x84>
 d04:	09 f4       	brne	.+2      	; 0xd08 <__ultoa_invert+0x48>
 d06:	68 94       	set
 d08:	3f 91       	pop	r19
 d0a:	2a e0       	ldi	r18, 0x0A	; 10
 d0c:	26 9f       	mul	r18, r22
 d0e:	11 24       	eor	r1, r1
 d10:	30 19       	sub	r19, r0
 d12:	30 5d       	subi	r19, 0xD0	; 208
 d14:	31 93       	st	Z+, r19
 d16:	de f6       	brtc	.-74     	; 0xcce <__ultoa_invert+0xe>
 d18:	cf 01       	movw	r24, r30
 d1a:	08 95       	ret
 d1c:	46 2f       	mov	r20, r22
 d1e:	47 70       	andi	r20, 0x07	; 7
 d20:	40 5d       	subi	r20, 0xD0	; 208
 d22:	41 93       	st	Z+, r20
 d24:	b3 e0       	ldi	r27, 0x03	; 3
 d26:	0f d0       	rcall	.+30     	; 0xd46 <__ultoa_invert+0x86>
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0x5c>
 d2a:	f6 cf       	rjmp	.-20     	; 0xd18 <__ultoa_invert+0x58>
 d2c:	46 2f       	mov	r20, r22
 d2e:	4f 70       	andi	r20, 0x0F	; 15
 d30:	40 5d       	subi	r20, 0xD0	; 208
 d32:	4a 33       	cpi	r20, 0x3A	; 58
 d34:	18 f0       	brcs	.+6      	; 0xd3c <__ultoa_invert+0x7c>
 d36:	49 5d       	subi	r20, 0xD9	; 217
 d38:	31 fd       	sbrc	r19, 1
 d3a:	40 52       	subi	r20, 0x20	; 32
 d3c:	41 93       	st	Z+, r20
 d3e:	02 d0       	rcall	.+4      	; 0xd44 <__ultoa_invert+0x84>
 d40:	a9 f7       	brne	.-22     	; 0xd2c <__ultoa_invert+0x6c>
 d42:	ea cf       	rjmp	.-44     	; 0xd18 <__ultoa_invert+0x58>
 d44:	b4 e0       	ldi	r27, 0x04	; 4
 d46:	a6 95       	lsr	r26
 d48:	97 95       	ror	r25
 d4a:	87 95       	ror	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	ba 95       	dec	r27
 d52:	c9 f7       	brne	.-14     	; 0xd46 <__ultoa_invert+0x86>
 d54:	00 97       	sbiw	r24, 0x00	; 0
 d56:	61 05       	cpc	r22, r1
 d58:	71 05       	cpc	r23, r1
 d5a:	08 95       	ret
 d5c:	9b 01       	movw	r18, r22
 d5e:	ac 01       	movw	r20, r24
 d60:	0a 2e       	mov	r0, r26
 d62:	06 94       	lsr	r0
 d64:	57 95       	ror	r21
 d66:	47 95       	ror	r20
 d68:	37 95       	ror	r19
 d6a:	27 95       	ror	r18
 d6c:	ba 95       	dec	r27
 d6e:	c9 f7       	brne	.-14     	; 0xd62 <__ultoa_invert+0xa2>
 d70:	62 0f       	add	r22, r18
 d72:	73 1f       	adc	r23, r19
 d74:	84 1f       	adc	r24, r20
 d76:	95 1f       	adc	r25, r21
 d78:	a0 1d       	adc	r26, r0
 d7a:	08 95       	ret

00000d7c <_exit>:
 d7c:	f8 94       	cli

00000d7e <__stop_program>:
 d7e:	ff cf       	rjmp	.-2      	; 0xd7e <__stop_program>
