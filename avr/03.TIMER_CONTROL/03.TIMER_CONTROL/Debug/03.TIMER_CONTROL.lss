
03.TIMER_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000037a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2f  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d6  00000000  00000000  0000218d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002263  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c1       	rjmp	.+602    	; 0x29c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0f d1       	rcall	.+542    	; 0x2e2 <main>
  c4:	58 c1       	rjmp	.+688    	; 0x376 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <fnd_display>:
	
	return 0;
}

void fnd_display(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2b 97       	sbiw	r28, 0x0b	; 11
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
#if 0  // common 애노우드
                         // 0   1    2    3     4    5   6     7   8    9    .
	uint8_t fnd_font[] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xd8,0x80,0x90,0x7f};
#else  // common 캐소우드 
						 // 0   1    2    3     4    5   6     7   8    9    .
    uint8_t fnd_font[] = {~0xc0,~0xf9,~0xa4,~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x90,~0x7f};
  dc:	8b e0       	ldi	r24, 0x0B	; 11
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <fnd_display+0x1e>
#endif 

	static int digit_select=0;  // static를 쓰면 전역 변수 처럼 함수가 빠져 나갔다가 다시 들어 오더라도 값을 유지
	
	switch(digit_select)
  ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  f2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 05       	cpc	r25, r1
  fa:	01 f1       	breq	.+64     	; 0x13c <fnd_display+0x74>
  fc:	1c f4       	brge	.+6      	; 0x104 <fnd_display+0x3c>
  fe:	89 2b       	or	r24, r25
 100:	41 f0       	breq	.+16     	; 0x112 <fnd_display+0x4a>
 102:	6f c0       	rjmp	.+222    	; 0x1e2 <fnd_display+0x11a>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	91 05       	cpc	r25, r1
 108:	a9 f1       	breq	.+106    	; 0x174 <fnd_display+0xac>
 10a:	03 97       	sbiw	r24, 0x03	; 3
 10c:	09 f4       	brne	.+2      	; 0x110 <fnd_display+0x48>
 10e:	4e c0       	rjmp	.+156    	; 0x1ac <fnd_display+0xe4>
 110:	68 c0       	rjmp	.+208    	; 0x1e2 <fnd_display+0x11a>
	{
		case 0:
#if 0  // common 애노우드 
			FND_DIGIT_PORT = 0x80;   // 10000000 FND_DIGIT_PORT = 0x80
#else   // common 캐소우드 
			FND_DIGIT_PORT = ~0x80;   // 011111111 FND_DIGIT_PORT = ~0x80
 112:	8f e7       	ldi	r24, 0x7F	; 127
 114:	88 bb       	out	0x18, r24	; 24
#endif 
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초 
 116:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 11a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 11e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 122:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 126:	2a e0       	ldi	r18, 0x0A	; 10
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	01 d1       	rcall	.+514    	; 0x332 <__udivmodsi4>
 130:	fe 01       	movw	r30, r28
 132:	e6 0f       	add	r30, r22
 134:	f7 1f       	adc	r31, r23
 136:	81 81       	ldd	r24, Z+1	; 0x01
 138:	85 bb       	out	0x15, r24	; 21
			break;
 13a:	53 c0       	rjmp	.+166    	; 0x1e2 <fnd_display+0x11a>
		case 1:
#if 0  // common 애노우드
			FND_DIGIT_PORT = 0x40;   // 10000000  
#else   // common 캐소우드
			FND_DIGIT_PORT = ~0x40;  
 13c:	8f eb       	ldi	r24, 0xBF	; 191
 13e:	88 bb       	out	0x18, r24	; 24
#endif 
			FND_DATA_PORT = fnd_font[sec_count / 10 % 6];   // 10단위초
 140:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 144:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 148:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 14c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 150:	2a e0       	ldi	r18, 0x0A	; 10
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	ec d0       	rcall	.+472    	; 0x332 <__udivmodsi4>
 15a:	ca 01       	movw	r24, r20
 15c:	b9 01       	movw	r22, r18
 15e:	26 e0       	ldi	r18, 0x06	; 6
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	e5 d0       	rcall	.+458    	; 0x332 <__udivmodsi4>
 168:	fe 01       	movw	r30, r28
 16a:	e6 0f       	add	r30, r22
 16c:	f7 1f       	adc	r31, r23
 16e:	81 81       	ldd	r24, Z+1	; 0x01
 170:	85 bb       	out	0x15, r24	; 21
			break;
 172:	37 c0       	rjmp	.+110    	; 0x1e2 <fnd_display+0x11a>
		case 2:
#if 0  // common 애노우드
			FND_DIGIT_PORT =  0x20;      
#else   // common 캐소우
			FND_DIGIT_PORT =  ~0x20; // 011111111
 174:	8f ed       	ldi	r24, 0xDF	; 223
 176:	88 bb       	out	0x18, r24	; 24
#endif
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10];   // 1단위 분 
 178:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 17c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 180:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 184:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 188:	2c e3       	ldi	r18, 0x3C	; 60
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	d0 d0       	rcall	.+416    	; 0x332 <__udivmodsi4>
 192:	ca 01       	movw	r24, r20
 194:	b9 01       	movw	r22, r18
 196:	2a e0       	ldi	r18, 0x0A	; 10
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	c9 d0       	rcall	.+402    	; 0x332 <__udivmodsi4>
 1a0:	fe 01       	movw	r30, r28
 1a2:	e6 0f       	add	r30, r22
 1a4:	f7 1f       	adc	r31, r23
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	85 bb       	out	0x15, r24	; 21
			break;
 1aa:	1b c0       	rjmp	.+54     	; 0x1e2 <fnd_display+0x11a>
		case 3:
#if 0  // common 애노우드
			FND_DIGIT_PORT = 0x10;   // 10000000
#else   // common 캐소우드
			FND_DIGIT_PORT = ~0x10;   // 011111111
 1ac:	8f ee       	ldi	r24, 0xEF	; 239
 1ae:	88 bb       	out	0x18, r24	; 24
#endif
			FND_DATA_PORT = fnd_font[sec_count / 600 % 6];   // 10단위 분 
 1b0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 1b4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 1b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 1bc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 1c0:	28 e5       	ldi	r18, 0x58	; 88
 1c2:	32 e0       	ldi	r19, 0x02	; 2
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	b4 d0       	rcall	.+360    	; 0x332 <__udivmodsi4>
 1ca:	ca 01       	movw	r24, r20
 1cc:	b9 01       	movw	r22, r18
 1ce:	26 e0       	ldi	r18, 0x06	; 6
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	ad d0       	rcall	.+346    	; 0x332 <__udivmodsi4>
 1d8:	fe 01       	movw	r30, r28
 1da:	e6 0f       	add	r30, r22
 1dc:	f7 1f       	adc	r31, r23
 1de:	81 81       	ldd	r24, Z+1	; 0x01
 1e0:	85 bb       	out	0x15, r24	; 21
			break;
	}
	digit_select++;
	digit_select %= 4;   // 다음 표시할 자리수 선택
 1e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	83 70       	andi	r24, 0x03	; 3
 1ee:	90 78       	andi	r25, 0x80	; 128
 1f0:	99 23       	and	r25, r25
 1f2:	24 f4       	brge	.+8      	; 0x1fc <fnd_display+0x134>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	8c 6f       	ori	r24, 0xFC	; 252
 1f8:	9f 6f       	ori	r25, 0xFF	; 255
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 200:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
 204:	2b 96       	adiw	r28, 0x0b	; 11
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <init_fnd>:

void init_fnd(void)
{
	FND_DATA_DDR = 0xff;  // 출력 모드로 설정
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	84 bb       	out	0x14, r24	; 20
	// FND_DIGIT_DDR |= 0xf0;   // 자릿수 선택 7654 
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 
 21a:	87 b3       	in	r24, 0x17	; 23
 21c:	80 6f       	ori	r24, 0xF0	; 240
 21e:	87 bb       	out	0x17, r24	; 23
					 | 1 << FND_DIGIT_D4; 
	// fnd를 all off 
#if 0  // common 애노우드 
	FND_DATA_PORT = ~0x00;   // fnd를 all off  0xff;
#else  // common 캐소우드
	FND_DATA_PORT = 0x00;   // fnd를 all off   
 220:	15 ba       	out	0x15, r1	; 21
 222:	08 95       	ret

00000224 <fnd_main>:
uint32_t ms_count=0;  // ms를 재는 count변수 unsigned int --> uint32_t
uint32_t sec_count=0;  // 초를 재는 count변수 unsigned int --> uint32_t

int fnd_main(void)
{
	init_fnd();
 224:	f8 df       	rcall	.-16     	; 0x216 <init_fnd>
	
	while (1)
	{
		fnd_display();
 226:	50 df       	rcall	.-352    	; 0xc8 <fnd_display>
 228:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	9f e0       	ldi	r25, 0x0F	; 15
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <fnd_main+0x8>
 230:	00 c0       	rjmp	.+0      	; 0x232 <fnd_main+0xe>
 232:	00 00       	nop
 234:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ms_count>
		_delay_ms(1);
		ms_count++;
 238:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <ms_count+0x1>
 23c:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <ms_count+0x2>
 240:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <ms_count+0x3>
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	a1 1d       	adc	r26, r1
 248:	b1 1d       	adc	r27, r1
 24a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ms_count>
 24e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ms_count+0x1>
 252:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <ms_count+0x2>
 256:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <ms_count+0x3>
 25a:	88 3e       	cpi	r24, 0xE8	; 232
		if (ms_count >= 1000)   // 1000ms --> 1sec
 25c:	93 40       	sbci	r25, 0x03	; 3
 25e:	a1 05       	cpc	r26, r1
 260:	b1 05       	cpc	r27, r1
 262:	08 f3       	brcs	.-62     	; 0x226 <fnd_main+0x2>
 264:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ms_count>
		{
			ms_count=0;
 268:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <ms_count+0x1>
 26c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ms_count+0x2>
 270:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <ms_count+0x3>
 274:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sec_count>
			sec_count++;
 278:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sec_count+0x1>
 27c:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <sec_count+0x2>
 280:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <sec_count+0x3>
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	a1 1d       	adc	r26, r1
 288:	b1 1d       	adc	r27, r1
 28a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sec_count>
 28e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <sec_count+0x1>
 292:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <sec_count+0x2>
 296:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <sec_count+0x3>
 29a:	c5 cf       	rjmp	.-118    	; 0x226 <fnd_main+0x2>

0000029c <__vector_16>:
// 250개의 pulse를 count(1ms)하면 이곳으로 자동적으로 들어 온다.
// ISR루틴(함수)는 가능한 짧게 작성 한다.
int led_toggle = 0;

ISR(TIMER0_OVF_vect)
{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
	// 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정하는것이다.
	TCNT0 = 6;
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	82 bf       	out	0x32, r24	; 50
	msec_count++; // 1ms마다 1씩 증가
 2ae:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <msec_count>
 2b2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <msec_count+0x1>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <msec_count+0x1>
 2bc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <msec_count>
}
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <init_timer0>:
// ------ 분주비 계산 ------
// (1) 16000000HZ/64 ==> 250,000HZ
// (2) T(주기) 1clock의 소요시간 : 1/f = 1/250,000 ==> 0.0000004sec(4us) : 0.004ms
// (3) 8bit timer 0V(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
// 1ms마다 정확하게 INT를 띄우고 싶으면  0.004ms x 250개를 count = 0.001sec ==> 1ms 마다 오버플로우
   TCNT0 = 6;  // TCNT : 0~256 1마다 TIMER0_OVF_vect로 진입 한다.
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	82 bf       	out	0x32, r24	; 50
               // TCNT0 = 6으로 설정을 한 이유 : 6-->256 : 250개의 펄스를 count하기 때문에 정확히 1ms가 된다.
			   
// (4) 분주비 설정 64분주 (250,000HZ -->250KHZ) P296 표13-1
   TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;  // TCCR0 |= 0xf4 보다 좌측의 code 권장
 2d2:	83 b7       	in	r24, 0x33	; 51
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	83 bf       	out	0x33, r24	; 51
// (5) Timer0 overflow INT를 허용(endable)
   TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
 2d8:	87 b7       	in	r24, 0x37	; 55
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	87 bf       	out	0x37, r24	; 55
   sei(); // 전역(대문)으로 interruput 허용
 2de:	78 94       	sei
 2e0:	08 95       	ret

000002e2 <main>:

// none O/S 또는 loop monitor방식

int main(void)
{
	init_timer0();
 2e2:	f5 df       	rcall	.-22     	; 0x2ce <init_timer0>
	fnd_main();
 2e4:	9f df       	rcall	.-194    	; 0x224 <fnd_main>
 2e6:	61 e0       	ldi	r22, 0x01	; 1
	while(1)
	{
		if(msec_count >= 1000)
		{
			msec_count = 0;
			led_toggle = !led_toggle;
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	4f ef       	ldi	r20, 0xFF	; 255
		}
		if(led_toggle)
			PORTA = 0xff;
 2ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <msec_count>
	fnd_main();
	//led_main();
	
	while(1)
	{
		if(msec_count >= 1000)
 2f0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <msec_count+0x1>
 2f4:	88 3e       	cpi	r24, 0xE8	; 232
 2f6:	93 40       	sbci	r25, 0x03	; 3
 2f8:	94 f0       	brlt	.+36     	; 0x31e <main+0x3c>
 2fa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <msec_count+0x1>
		{
			msec_count = 0;
 2fe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <msec_count>
 302:	96 2f       	mov	r25, r22
			led_toggle = !led_toggle;
 304:	85 2f       	mov	r24, r21
 306:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <led_toggle>
 30a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <led_toggle+0x1>
 30e:	23 2b       	or	r18, r19
 310:	11 f0       	breq	.+4      	; 0x316 <main+0x34>
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <led_toggle>
 31a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_toggle+0x1>
 31e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <led_toggle>
		}
		if(led_toggle)
 322:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <led_toggle+0x1>
 326:	89 2b       	or	r24, r25
 328:	11 f0       	breq	.+4      	; 0x32e <main+0x4c>
 32a:	4b bb       	out	0x1b, r20	; 27
			PORTA = 0xff;
 32c:	df cf       	rjmp	.-66     	; 0x2ec <main+0xa>
 32e:	1b ba       	out	0x1b, r1	; 27
		else 
			PORTA=0x00;
 330:	dd cf       	rjmp	.-70     	; 0x2ec <main+0xa>

00000332 <__udivmodsi4>:
 332:	a1 e2       	ldi	r26, 0x21	; 33
 334:	1a 2e       	mov	r1, r26
 336:	aa 1b       	sub	r26, r26
 338:	bb 1b       	sub	r27, r27
 33a:	fd 01       	movw	r30, r26
 33c:	0d c0       	rjmp	.+26     	; 0x358 <__udivmodsi4_ep>

0000033e <__udivmodsi4_loop>:
 33e:	aa 1f       	adc	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	ee 1f       	adc	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	a2 17       	cp	r26, r18
 348:	b3 07       	cpc	r27, r19
 34a:	e4 07       	cpc	r30, r20
 34c:	f5 07       	cpc	r31, r21
 34e:	20 f0       	brcs	.+8      	; 0x358 <__udivmodsi4_ep>
 350:	a2 1b       	sub	r26, r18
 352:	b3 0b       	sbc	r27, r19
 354:	e4 0b       	sbc	r30, r20
 356:	f5 0b       	sbc	r31, r21

00000358 <__udivmodsi4_ep>:
 358:	66 1f       	adc	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	1a 94       	dec	r1
 362:	69 f7       	brne	.-38     	; 0x33e <__udivmodsi4_loop>
 364:	60 95       	com	r22
 366:	70 95       	com	r23
 368:	80 95       	com	r24
 36a:	90 95       	com	r25
 36c:	9b 01       	movw	r18, r22
 36e:	ac 01       	movw	r20, r24
 370:	bd 01       	movw	r22, r26
 372:	cf 01       	movw	r24, r30
 374:	08 95       	ret

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
