
03.TIMER_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000076e  00000802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800118  00800118  0000081a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed3  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bad  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000878  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000582  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fa  00000000  00000000  0000338a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ff c2       	rjmp	.+1534   	; 0x640 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 33       	cpi	r26, 0x3C	; 60
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e1 d2       	rcall	.+1474   	; 0x686 <main>
  c4:	52 c3       	rjmp	.+1700   	; 0x76a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_button>:
	static unsigned char button_status[BUTTON_NUMER] =
	{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};	
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
  c8:	40 b3       	in	r20, 0x10	; 16
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <get_button+0xc>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <get_button+0x8>
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	24 23       	and	r18, r20
  dc:	35 23       	and	r19, r21
  de:	23 2b       	or	r18, r19
  e0:	b9 f0       	breq	.+46     	; 0x110 <get_button+0x48>
  e2:	fc 01       	movw	r30, r24
  e4:	e8 5e       	subi	r30, 0xE8	; 232
  e6:	fe 4f       	sbci	r31, 0xFE	; 254
  e8:	20 81       	ld	r18, Z
  ea:	21 11       	cpse	r18, r1
  ec:	27 c0       	rjmp	.+78     	; 0x13c <get_button+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	3d ee       	ldi	r19, 0xED	; 237
  f2:	42 e0       	ldi	r20, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	40 40       	sbci	r20, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <get_button+0x2c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <get_button+0x36>
  fe:	00 00       	nop
	{
		_delay_ms(60);   // noise가 지나가기를 기다린다. 
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
 100:	fc 01       	movw	r30, r24
 102:	e8 5e       	subi	r30, 0xE8	; 232
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	20 83       	st	Z, r18
		return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 110:	fc 01       	movw	r30, r24
 112:	e8 5e       	subi	r30, 0xE8	; 232
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	20 81       	ld	r18, Z
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	99 f4       	brne	.+38     	; 0x142 <get_button+0x7a>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	3d ee       	ldi	r19, 0xED	; 237
 120:	42 e0       	ldi	r20, 0x02	; 2
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	40 40       	sbci	r20, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <get_button+0x5a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <get_button+0x64>
 12c:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
 12e:	fc 01       	movw	r30, r24
 130:	e8 5e       	subi	r30, 0xE8	; 232
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	10 82       	st	Z, r1
		return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정		
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret
	}
	
	return 0;   // 버튼이 open상태 
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <fnd_display>:
	
	return 0;
}

void fnd_display(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	2b 97       	sbiw	r28, 0x0b	; 11
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
#if 1  // common 애노우드
                         // 0   1    2    3     4    5   6     7   8    9    .
	uint8_t fnd_font[] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xd8,0x80,0x90,0x7f};
 15c:	8b e0       	ldi	r24, 0x0B	; 11
 15e:	ec e0       	ldi	r30, 0x0C	; 12
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	de 01       	movw	r26, r28
 164:	11 96       	adiw	r26, 0x01	; 1
 166:	01 90       	ld	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	8a 95       	dec	r24
 16c:	e1 f7       	brne	.-8      	; 0x166 <fnd_display+0x1e>
    uint8_t fnd_font[] = {~0xc0,~0xf9,~0xa4,~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x90,~0x7f};
#endif 

	static int digit_select=0;  // static를 쓰면 전역 변수 처럼 함수가 빠져 나갔다가 다시 들어 오더라도 값을 유지
	
	switch(digit_select)
 16e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <digit_select.1744>
 172:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <digit_select.1744+0x1>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	91 05       	cpc	r25, r1
 17a:	01 f1       	breq	.+64     	; 0x1bc <fnd_display+0x74>
 17c:	1c f4       	brge	.+6      	; 0x184 <fnd_display+0x3c>
 17e:	89 2b       	or	r24, r25
 180:	41 f0       	breq	.+16     	; 0x192 <fnd_display+0x4a>
 182:	6f c0       	rjmp	.+222    	; 0x262 <fnd_display+0x11a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	91 05       	cpc	r25, r1
 188:	a9 f1       	breq	.+106    	; 0x1f4 <fnd_display+0xac>
 18a:	03 97       	sbiw	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <fnd_display+0x48>
 18e:	4e c0       	rjmp	.+156    	; 0x22c <fnd_display+0xe4>
 190:	68 c0       	rjmp	.+208    	; 0x262 <fnd_display+0x11a>
	{
		case 0:
#if 1  // common 애노우드 
			FND_DIGIT_PORT = 0x80;   // 10000000 FND_DIGIT_PORT = 0x80
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	88 bb       	out	0x18, r24	; 24
#else   // common 캐소우드 
			FND_DIGIT_PORT = ~0x80;   // 011111111 FND_DIGIT_PORT = ~0x80
#endif 
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초 
 196:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <sec_count>
 19a:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <sec_count+0x1>
 19e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <sec_count+0x2>
 1a2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sec_count+0x3>
 1a6:	2a e0       	ldi	r18, 0x0A	; 10
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	a7 d2       	rcall	.+1358   	; 0x6fe <__udivmodsi4>
 1b0:	fe 01       	movw	r30, r28
 1b2:	e6 0f       	add	r30, r22
 1b4:	f7 1f       	adc	r31, r23
 1b6:	81 81       	ldd	r24, Z+1	; 0x01
 1b8:	85 bb       	out	0x15, r24	; 21
			break;
 1ba:	53 c0       	rjmp	.+166    	; 0x262 <fnd_display+0x11a>
		case 1:
#if 1  // common 애노우드
			FND_DIGIT_PORT = 0x40;   // 10000000  
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	88 bb       	out	0x18, r24	; 24
#else   // common 캐소우드
			FND_DIGIT_PORT = ~0x40;  
#endif 
			FND_DATA_PORT = fnd_font[sec_count / 10 % 6];   // 10단위초
 1c0:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <sec_count>
 1c4:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <sec_count+0x1>
 1c8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <sec_count+0x2>
 1cc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sec_count+0x3>
 1d0:	2a e0       	ldi	r18, 0x0A	; 10
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	92 d2       	rcall	.+1316   	; 0x6fe <__udivmodsi4>
 1da:	ca 01       	movw	r24, r20
 1dc:	b9 01       	movw	r22, r18
 1de:	26 e0       	ldi	r18, 0x06	; 6
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	8b d2       	rcall	.+1302   	; 0x6fe <__udivmodsi4>
 1e8:	fe 01       	movw	r30, r28
 1ea:	e6 0f       	add	r30, r22
 1ec:	f7 1f       	adc	r31, r23
 1ee:	81 81       	ldd	r24, Z+1	; 0x01
 1f0:	85 bb       	out	0x15, r24	; 21
			break;
 1f2:	37 c0       	rjmp	.+110    	; 0x262 <fnd_display+0x11a>
		case 2:
#if 1  // common 애노우드
			FND_DIGIT_PORT =  0x20;      
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	88 bb       	out	0x18, r24	; 24
#else   // common 캐소우
			FND_DIGIT_PORT =  ~0x20; // 011111111
#endif
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10];   // 1단위 분 
 1f8:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <sec_count>
 1fc:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <sec_count+0x1>
 200:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <sec_count+0x2>
 204:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sec_count+0x3>
 208:	2c e3       	ldi	r18, 0x3C	; 60
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	76 d2       	rcall	.+1260   	; 0x6fe <__udivmodsi4>
 212:	ca 01       	movw	r24, r20
 214:	b9 01       	movw	r22, r18
 216:	2a e0       	ldi	r18, 0x0A	; 10
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	6f d2       	rcall	.+1246   	; 0x6fe <__udivmodsi4>
 220:	fe 01       	movw	r30, r28
 222:	e6 0f       	add	r30, r22
 224:	f7 1f       	adc	r31, r23
 226:	81 81       	ldd	r24, Z+1	; 0x01
 228:	85 bb       	out	0x15, r24	; 21
			break;
 22a:	1b c0       	rjmp	.+54     	; 0x262 <fnd_display+0x11a>
		case 3:
#if 1  // common 애노우드
			FND_DIGIT_PORT = 0x10;   // 10000000
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	88 bb       	out	0x18, r24	; 24
#else   // common 캐소우드
			FND_DIGIT_PORT = ~0x10;   // 011111111
#endif
			FND_DATA_PORT = fnd_font[sec_count / 600 % 6];   // 10단위 분 
 230:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <sec_count>
 234:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <sec_count+0x1>
 238:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <sec_count+0x2>
 23c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sec_count+0x3>
 240:	28 e5       	ldi	r18, 0x58	; 88
 242:	32 e0       	ldi	r19, 0x02	; 2
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	5a d2       	rcall	.+1204   	; 0x6fe <__udivmodsi4>
 24a:	ca 01       	movw	r24, r20
 24c:	b9 01       	movw	r22, r18
 24e:	26 e0       	ldi	r18, 0x06	; 6
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	53 d2       	rcall	.+1190   	; 0x6fe <__udivmodsi4>
 258:	fe 01       	movw	r30, r28
 25a:	e6 0f       	add	r30, r22
 25c:	f7 1f       	adc	r31, r23
 25e:	81 81       	ldd	r24, Z+1	; 0x01
 260:	85 bb       	out	0x15, r24	; 21
			break;
	}
	digit_select++;
	digit_select %= 4;   // 다음 표시할 자리수 선택
 262:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <digit_select.1744>
 266:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <digit_select.1744+0x1>
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	83 70       	andi	r24, 0x03	; 3
 26e:	90 78       	andi	r25, 0x80	; 128
 270:	99 23       	and	r25, r25
 272:	24 f4       	brge	.+8      	; 0x27c <fnd_display+0x134>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	8c 6f       	ori	r24, 0xFC	; 252
 278:	9f 6f       	ori	r25, 0xFF	; 255
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <digit_select.1744+0x1>
 280:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <digit_select.1744>
}
 284:	2b 96       	adiw	r28, 0x0b	; 11
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <init_fnd>:

void init_fnd(void)
{
	FND_DATA_DDR = 0xff;  // 출력 모드로 설정
 296:	9f ef       	ldi	r25, 0xFF	; 255
 298:	94 bb       	out	0x14, r25	; 20
	// FND_DIGIT_DDR |= 0xf0;   // 자릿수 선택 7654 
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 
 29a:	87 b3       	in	r24, 0x17	; 23
 29c:	80 6f       	ori	r24, 0xF0	; 240
 29e:	87 bb       	out	0x17, r24	; 23
					 | 1 << FND_DIGIT_D4; 
	// fnd를 all off 
#if 1  // common 애노우드 
	FND_DATA_PORT = ~0x00;   // fnd를 all off  0xff;
 2a0:	95 bb       	out	0x15, r25	; 21
 2a2:	08 95       	ret

000002a4 <fnd_main>:
uint32_t ms_count=0;  // ms를 재는 count변수 unsigned int --> uint32_t
uint32_t sec_count=0;  // 초를 재는 count변수 unsigned int --> uint32_t

int fnd_main(void)
{
	init_fnd();
 2a4:	f8 df       	rcall	.-16     	; 0x296 <init_fnd>
	
	while (1)
	{
		fnd_display();
 2a6:	50 df       	rcall	.-352    	; 0x148 <fnd_display>
 2a8:	8f e9       	ldi	r24, 0x9F	; 159
 2aa:	9f e0       	ldi	r25, 0x0F	; 15
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <fnd_main+0x8>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <fnd_main+0xe>
 2b2:	00 00       	nop
 2b4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ms_count>
		_delay_ms(1);
		ms_count++;
 2b8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ms_count+0x1>
 2bc:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <ms_count+0x2>
 2c0:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <ms_count+0x3>
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	a1 1d       	adc	r26, r1
 2c8:	b1 1d       	adc	r27, r1
 2ca:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ms_count>
 2ce:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ms_count+0x1>
 2d2:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <ms_count+0x2>
 2d6:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <ms_count+0x3>
 2da:	88 3e       	cpi	r24, 0xE8	; 232
		if (ms_count >= 1000)   // 1000ms --> 1sec
 2dc:	93 40       	sbci	r25, 0x03	; 3
 2de:	a1 05       	cpc	r26, r1
 2e0:	b1 05       	cpc	r27, r1
 2e2:	08 f3       	brcs	.-62     	; 0x2a6 <fnd_main+0x2>
 2e4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ms_count>
		{
			ms_count=0;
 2e8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ms_count+0x1>
 2ec:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ms_count+0x2>
 2f0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <ms_count+0x3>
 2f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec_count>
			sec_count++;
 2f8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec_count+0x1>
 2fc:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sec_count+0x2>
 300:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sec_count+0x3>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	a1 1d       	adc	r26, r1
 308:	b1 1d       	adc	r27, r1
 30a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <sec_count>
 30e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <sec_count+0x1>
 312:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <sec_count+0x2>
 316:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <sec_count+0x3>
 31a:	c5 cf       	rjmp	.-118    	; 0x2a6 <fnd_main+0x2>

0000031c <led_main>:
 31c:	8f ef       	ldi	r24, 0xFF	; 255
	PORTA = 0xff;
}

void led_all_off(void)
{
	PORTA = 0x00;
 31e:	8a bb       	out	0x1a, r24	; 26
 320:	01 e0       	ldi	r16, 0x01	; 1
 322:	10 e0       	ldi	r17, 0x00	; 0
 324:	c6 e0       	ldi	r28, 0x06	; 6
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	cb de       	rcall	.-618    	; 0xc8 <get_button>
 332:	89 2b       	or	r24, r25
 334:	71 f0       	breq	.+28     	; 0x352 <led_main+0x36>
 336:	90 2f       	mov	r25, r16
 338:	81 2f       	mov	r24, r17
 33a:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <mode>
 33e:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <mode+0x1>
 342:	23 2b       	or	r18, r19
 344:	11 f0       	breq	.+4      	; 0x34a <led_main+0x2e>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <mode>
 34e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <mode+0x1>
 352:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <mode>
 356:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <mode+0x1>
 35a:	89 2b       	or	r24, r25
 35c:	69 f4       	brne	.+26     	; 0x378 <led_main+0x5c>
 35e:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <state>
 362:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <state+0x1>
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	e0 50       	subi	r30, 0x00	; 0
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	01 90       	ld	r0, Z+
 370:	f0 81       	ld	r31, Z
 372:	e0 2d       	mov	r30, r0
 374:	09 95       	icall
 376:	d8 cf       	rjmp	.-80     	; 0x328 <led_main+0xc>
 378:	65 e0       	ldi	r22, 0x05	; 5
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 2f       	mov	r24, r16
 37e:	91 2f       	mov	r25, r17
 380:	a3 de       	rcall	.-698    	; 0xc8 <get_button>
 382:	89 2b       	or	r24, r25
 384:	59 f0       	breq	.+22     	; 0x39c <led_main+0x80>
 386:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <manual_state>
 38a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <manual_state+0x1>
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	be 01       	movw	r22, r28
 392:	a2 d1       	rcall	.+836    	; 0x6d8 <__divmodhi4>
 394:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <manual_state+0x1>
 398:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <manual_state>
 39c:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <manual_state>
 3a0:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <manual_state+0x1>
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	e0 50       	subi	r30, 0x00	; 0
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	01 90       	ld	r0, Z+
 3ae:	f0 81       	ld	r31, Z
 3b0:	e0 2d       	mov	r30, r0
 3b2:	09 95       	icall
 3b4:	b9 cf       	rjmp	.-142    	; 0x328 <led_main+0xc>

000003b6 <state_transition>:

void state_transition(void)
{
	
 state++;
 state %= FUNC_NUMBER;
 3b6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <state>
 3ba:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <state+0x1>
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	66 e0       	ldi	r22, 0x06	; 6
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	89 d1       	rcall	.+786    	; 0x6d8 <__divmodhi4>
 3c6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <state+0x1>
 3ca:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 3ce:	08 95       	ret

000003d0 <flower_on>:
{
	#if 1
	// (1) for문 제거 (2) _delay_ms(30) 제거
	static int i=0;
	
	if (msec_count >= 100)
 3d0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
 3d4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 3d8:	84 36       	cpi	r24, 0x64	; 100
 3da:	91 05       	cpc	r25, r1
 3dc:	ac f1       	brlt	.+106    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	{
		msec_count=0;
 3de:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <msec_count+0x1>
 3e2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <msec_count>
		if (i >= 4)
 3e6:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <i.1764>
 3ea:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <i.1764+0x1>
 3ee:	24 30       	cpi	r18, 0x04	; 4
 3f0:	31 05       	cpc	r19, r1
 3f2:	6c f0       	brlt	.+26     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			i=0;
 3f4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <i.1764+0x1>
 3f8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <i.1764>
			PORTA=0;
 3fc:	1b ba       	out	0x1b, r1	; 27
			if (mode == AUTO)
 3fe:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <mode>
 402:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <mode+0x1>
 406:	89 2b       	or	r24, r25
 408:	f9 f4       	brne	.+62     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
				state_transition();
 40a:	d5 cf       	rjmp	.-86     	; 0x3b6 <state_transition>
 40c:	08 95       	ret
		}
		else
		{
			PORTA |=  0x10 << i | 0x08 >> i;
 40e:	3b b3       	in	r19, 0x1b	; 27
 410:	80 e1       	ldi	r24, 0x10	; 16
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	ac 01       	movw	r20, r24
 416:	02 2e       	mov	r0, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	44 0f       	add	r20, r20
 41c:	55 1f       	adc	r21, r21
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 428:	95 95       	asr	r25
 42a:	87 95       	ror	r24
 42c:	2a 95       	dec	r18
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	84 2b       	or	r24, r20
 432:	83 2b       	or	r24, r19
 434:	8b bb       	out	0x1b, r24	; 27
			i++;
 436:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <i.1764>
 43a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <i.1764+0x1>
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <i.1764+0x1>
 444:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <i.1764>
 448:	08 95       	ret

0000044a <flower_off>:
	
	#if 1
	// (1) for문 제거 (2) _delay_ms(30) 제거
	static int i=0;
	
	if (msec_count >= 30)
 44a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
 44e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 452:	4e 97       	sbiw	r24, 0x1e	; 30
 454:	ac f1       	brlt	.+106    	; 0x4c0 <flower_off+0x76>
	{
		msec_count=0;
 456:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <msec_count+0x1>
 45a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <msec_count>
		if (i >= 4)
 45e:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <i.1770>
 462:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <i.1770+0x1>
 466:	44 30       	cpi	r20, 0x04	; 4
 468:	51 05       	cpc	r21, r1
 46a:	6c f0       	brlt	.+26     	; 0x486 <flower_off+0x3c>
		{
			i=0;
 46c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <i.1770+0x1>
 470:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <i.1770>
			PORTA=0;
 474:	1b ba       	out	0x1b, r1	; 27
			if (mode == AUTO)
 476:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <mode>
 47a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <mode+0x1>
 47e:	89 2b       	or	r24, r25
 480:	f9 f4       	brne	.+62     	; 0x4c0 <flower_off+0x76>
				state_transition();
 482:	99 cf       	rjmp	.-206    	; 0x3b6 <state_transition>
 484:	08 95       	ret
		}
		else
		{
			PORTA = ((h >> i) & 0xf0) | ((l << i) & 0x0f);
 486:	80 ef       	ldi	r24, 0xF0	; 240
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	04 2e       	mov	r0, r20
 48c:	02 c0       	rjmp	.+4      	; 0x492 <flower_off+0x48>
 48e:	95 95       	asr	r25
 490:	87 95       	ror	r24
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <flower_off+0x44>
 496:	28 2f       	mov	r18, r24
 498:	20 7f       	andi	r18, 0xF0	; 240
 49a:	8f e0       	ldi	r24, 0x0F	; 15
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <flower_off+0x5a>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	4a 95       	dec	r20
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <flower_off+0x56>
 4a8:	8f 70       	andi	r24, 0x0F	; 15
 4aa:	82 2b       	or	r24, r18
 4ac:	8b bb       	out	0x1b, r24	; 27
			i++;
 4ae:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <i.1770>
 4b2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <i.1770+0x1>
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <i.1770+0x1>
 4bc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <i.1770>
 4c0:	08 95       	ret

000004c2 <shift_left_keep_ledon>:
{
	#if 1
	// (1) for문 제거 (2) _delay_ms(30) 제거
	static int i=0;
	
	if (msec_count >= 30)
 4c2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
 4c6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 4ca:	4e 97       	sbiw	r24, 0x1e	; 30
 4cc:	5c f1       	brlt	.+86     	; 0x524 <shift_left_keep_ledon+0x62>
	{
		msec_count=0;
 4ce:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <msec_count+0x1>
 4d2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <msec_count>
		if (i >= 8)
 4d6:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <i.1774>
 4da:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <i.1774+0x1>
 4de:	28 30       	cpi	r18, 0x08	; 8
 4e0:	31 05       	cpc	r19, r1
 4e2:	6c f0       	brlt	.+26     	; 0x4fe <shift_left_keep_ledon+0x3c>
		{
			i=0;
 4e4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <i.1774+0x1>
 4e8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <i.1774>
			PORTA=0;
 4ec:	1b ba       	out	0x1b, r1	; 27
			if (mode == AUTO)
 4ee:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <mode>
 4f2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <mode+0x1>
 4f6:	89 2b       	or	r24, r25
 4f8:	a9 f4       	brne	.+42     	; 0x524 <shift_left_keep_ledon+0x62>
				state_transition();
 4fa:	5d cf       	rjmp	.-326    	; 0x3b6 <state_transition>
 4fc:	08 95       	ret
		}
		else
		{
			PORTA |= 0b00000001 << i;
 4fe:	3b b3       	in	r19, 0x1b	; 27
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <shift_left_keep_ledon+0x48>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	2a 95       	dec	r18
 50c:	e2 f7       	brpl	.-8      	; 0x506 <shift_left_keep_ledon+0x44>
 50e:	83 2b       	or	r24, r19
 510:	8b bb       	out	0x1b, r24	; 27
			i++;
 512:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <i.1774>
 516:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <i.1774+0x1>
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <i.1774+0x1>
 520:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <i.1774>
 524:	08 95       	ret

00000526 <shift_right_keep_ledon>:
{
	#if 1
	{// (1) for문 제거 (2) _delay_ms(30) 제거
	static int i=0;
	
	if (msec_count >= 30)
 526:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
 52a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 52e:	4e 97       	sbiw	r24, 0x1e	; 30
 530:	44 f1       	brlt	.+80     	; 0x582 <shift_right_keep_ledon+0x5c>
	{
		msec_count=0;
 532:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <msec_count+0x1>
 536:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <msec_count>
		if (i >= 8)
 53a:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <i.1778>
 53e:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <i.1778+0x1>
 542:	28 30       	cpi	r18, 0x08	; 8
 544:	31 05       	cpc	r19, r1
 546:	6c f0       	brlt	.+26     	; 0x562 <shift_right_keep_ledon+0x3c>
		{
			i=0;
 548:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <i.1778+0x1>
 54c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <i.1778>
			PORTA=0;
 550:	1b ba       	out	0x1b, r1	; 27
			if (mode == AUTO)
 552:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <mode>
 556:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <mode+0x1>
 55a:	89 2b       	or	r24, r25
 55c:	91 f4       	brne	.+36     	; 0x582 <shift_right_keep_ledon+0x5c>
				state_transition();
 55e:	2b cf       	rjmp	.-426    	; 0x3b6 <state_transition>
 560:	08 95       	ret
		}
		else
		{
			PORTA |= 0b10000000 >> i++;
 562:	c9 01       	movw	r24, r18
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <i.1778+0x1>
 56a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <i.1778>
 56e:	3b b3       	in	r19, 0x1b	; 27
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <shift_right_keep_ledon+0x54>
 576:	95 95       	asr	r25
 578:	87 95       	ror	r24
 57a:	2a 95       	dec	r18
 57c:	e2 f7       	brpl	.-8      	; 0x576 <shift_right_keep_ledon+0x50>
 57e:	83 2b       	or	r24, r19
 580:	8b bb       	out	0x1b, r24	; 27
 582:	08 95       	ret

00000584 <shift_left_ledon>:
{
#if 1
 // (1) for문 제거 (2) _delay_ms(30) 제거
 static int i=0;
 
 if (msec_count >= 30)
 584:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
 588:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 58c:	4e 97       	sbiw	r24, 0x1e	; 30
 58e:	44 f1       	brlt	.+80     	; 0x5e0 <shift_left_ledon+0x5c>
 {
	 msec_count=0;
 590:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <msec_count+0x1>
 594:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <msec_count>
	 if (i >= 8)
 598:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i.1782>
 59c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i.1782+0x1>
 5a0:	88 30       	cpi	r24, 0x08	; 8
 5a2:	91 05       	cpc	r25, r1
 5a4:	6c f0       	brlt	.+26     	; 0x5c0 <shift_left_ledon+0x3c>
	 {
		 i=0;
 5a6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i.1782+0x1>
 5aa:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <i.1782>
		 PORTA=0;
 5ae:	1b ba       	out	0x1b, r1	; 27
		if (mode == AUTO)
 5b0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <mode>
 5b4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <mode+0x1>
 5b8:	89 2b       	or	r24, r25
 5ba:	91 f4       	brne	.+36     	; 0x5e0 <shift_left_ledon+0x5c>
			state_transition();
 5bc:	fc ce       	rjmp	.-520    	; 0x3b6 <state_transition>
 5be:	08 95       	ret
	 }
	 else
	 {
		 PORTA = 0b00000001 << i++;
 5c0:	9c 01       	movw	r18, r24
 5c2:	2f 5f       	subi	r18, 0xFF	; 255
 5c4:	3f 4f       	sbci	r19, 0xFF	; 255
 5c6:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <i.1782+0x1>
 5ca:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <i.1782>
 5ce:	21 e0       	ldi	r18, 0x01	; 1
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	a9 01       	movw	r20, r18
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <shift_left_ledon+0x56>
 5d6:	44 0f       	add	r20, r20
 5d8:	55 1f       	adc	r21, r21
 5da:	8a 95       	dec	r24
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <shift_left_ledon+0x52>
 5de:	4b bb       	out	0x1b, r20	; 27
 5e0:	08 95       	ret

000005e2 <shift_right_ledon>:
{
	#if 1
	// (1) for문 제거 (2) _delay_ms(30) 제거
	static int i=0;
	
	if (msec_count >= 30)
 5e2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
 5e6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 5ea:	4e 97       	sbiw	r24, 0x1e	; 30
 5ec:	44 f1       	brlt	.+80     	; 0x63e <shift_right_ledon+0x5c>
	{
		msec_count=0;
 5ee:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <msec_count+0x1>
 5f2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <msec_count>
		if (i >= 8)
 5f6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <i.1786>
 5fa:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <i.1786+0x1>
 5fe:	88 30       	cpi	r24, 0x08	; 8
 600:	91 05       	cpc	r25, r1
 602:	6c f0       	brlt	.+26     	; 0x61e <shift_right_ledon+0x3c>
		{
			i=0;
 604:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <i.1786+0x1>
 608:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <i.1786>
			PORTA=0;
 60c:	1b ba       	out	0x1b, r1	; 27
			if (mode == AUTO)
 60e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <mode>
 612:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <mode+0x1>
 616:	89 2b       	or	r24, r25
 618:	91 f4       	brne	.+36     	; 0x63e <shift_right_ledon+0x5c>
				state_transition();
 61a:	cd ce       	rjmp	.-614    	; 0x3b6 <state_transition>
 61c:	08 95       	ret
		}
		else
		{
			PORTA = 0b10000000 >> i++;
 61e:	9c 01       	movw	r18, r24
 620:	2f 5f       	subi	r18, 0xFF	; 255
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <i.1786+0x1>
 628:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <i.1786>
 62c:	20 e8       	ldi	r18, 0x80	; 128
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	a9 01       	movw	r20, r18
 632:	02 c0       	rjmp	.+4      	; 0x638 <shift_right_ledon+0x56>
 634:	55 95       	asr	r21
 636:	47 95       	ror	r20
 638:	8a 95       	dec	r24
 63a:	e2 f7       	brpl	.-8      	; 0x634 <shift_right_ledon+0x52>
 63c:	4b bb       	out	0x1b, r20	; 27
 63e:	08 95       	ret

00000640 <__vector_16>:
// 250개의 pulse를 count(1ms)하면 이곳으로 자동적으로 들어 온다.
// ISR루틴(함수)은 가능한 짧게 작성 한다.

int led_toggle=0;
ISR(TIMER0_OVF_vect)
{
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
	// 6~256 : 250(1ms) 그래서 TCTN0를 6으로 설정하는 것이다.
	TCNT0=6;
 64e:	86 e0       	ldi	r24, 0x06	; 6
 650:	82 bf       	out	0x32, r24	; 50
	msec_count++; //1ms마다 1씩 증가
 652:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
 656:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <msec_count+0x1>
 660:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <msec_count>
	
	
}
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <init_timer0>:
// ------- 분주비 계산 ---
// (1) 16000000Hz / 64 ==> 250,000HZ
// (2) T(주기) 1clock의 소요시간 : 1/f = 1/250,000 == 0.000004sec(4us) : 0.004ms
// (3) 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
// 1ms마다 정확하게 INT를 띄우고 싶으면 0.004ms x 250개 count = 0.001sec ===> 1ms
    TCNT0=6; // TCNT : 0~256 1ms 마다 TIMER0_OVF_vect로 진입 한다.
 672:	86 e0       	ldi	r24, 0x06	; 6
 674:	82 bf       	out	0x32, r24	; 50
	         // TCNT = 6으로 설정을 한 이유: 6-->256 : 250개의 펄스를 count하기 때문에 정확히 1ms가 된다.
// (4) 분주비 설정 (250,000HZ --> 250KHz)
TCCR0 |= 1<<CS02 | 0<<CS01 | 0<<CS00; // TCR0 |= 0xf4 보다는 좌측의 code 권장
 676:	83 b7       	in	r24, 0x33	; 51
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	83 bf       	out	0x33, r24	; 51
// (5) Timer0 overflow INT를 허용(enable)
TIMSK |= 1<< TOIE0;
 67c:	87 b7       	in	r24, 0x37	; 55
 67e:	81 60       	ori	r24, 0x01	; 1
 680:	87 bf       	out	0x37, r24	; 55
   sei(); //전역(대문)으로 interrupt 허용
 682:	78 94       	sei
 684:	08 95       	ret

00000686 <main>:


int main(void)
{
	
	init_timer0();
 686:	f5 df       	rcall	.-22     	; 0x672 <init_timer0>
	led_main();
 688:	49 de       	rcall	.-878    	; 0x31c <led_main>
	
	fnd_main();
 68a:	0c de       	rcall	.-1000   	; 0x2a4 <fnd_main>
 68c:	61 e0       	ldi	r22, 0x01	; 1
	while(1)
	{
			if(msec_count>=1000)
			{
				msec_count=0;
				led_toggle = !led_toggle;
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	4f ef       	ldi	r20, 0xFF	; 255
			}
			if(led_toggle)
			PORTA=0xff;
 692:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <msec_count>
	
	fnd_main();

	while(1)
	{
			if(msec_count>=1000)
 696:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <msec_count+0x1>
 69a:	88 3e       	cpi	r24, 0xE8	; 232
 69c:	93 40       	sbci	r25, 0x03	; 3
 69e:	94 f0       	brlt	.+36     	; 0x6c4 <main+0x3e>
 6a0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <msec_count+0x1>
			{
				msec_count=0;
 6a4:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <msec_count>
 6a8:	96 2f       	mov	r25, r22
				led_toggle = !led_toggle;
 6aa:	85 2f       	mov	r24, r21
 6ac:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <led_toggle>
 6b0:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <led_toggle+0x1>
 6b4:	23 2b       	or	r18, r19
 6b6:	11 f0       	breq	.+4      	; 0x6bc <main+0x36>
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <led_toggle>
 6c0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <led_toggle+0x1>
 6c4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <led_toggle>
			}
			if(led_toggle)
 6c8:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <led_toggle+0x1>
 6cc:	89 2b       	or	r24, r25
 6ce:	11 f0       	breq	.+4      	; 0x6d4 <main+0x4e>
 6d0:	4b bb       	out	0x1b, r20	; 27
			PORTA=0xff;
 6d2:	df cf       	rjmp	.-66     	; 0x692 <main+0xc>
 6d4:	1b ba       	out	0x1b, r1	; 27
			else PORTA=0x00;
 6d6:	dd cf       	rjmp	.-70     	; 0x692 <main+0xc>

000006d8 <__divmodhi4>:
 6d8:	97 fb       	bst	r25, 7
 6da:	07 2e       	mov	r0, r23
 6dc:	16 f4       	brtc	.+4      	; 0x6e2 <__divmodhi4+0xa>
 6de:	00 94       	com	r0
 6e0:	06 d0       	rcall	.+12     	; 0x6ee <__divmodhi4_neg1>
 6e2:	77 fd       	sbrc	r23, 7
 6e4:	08 d0       	rcall	.+16     	; 0x6f6 <__divmodhi4_neg2>
 6e6:	2d d0       	rcall	.+90     	; 0x742 <__udivmodhi4>
 6e8:	07 fc       	sbrc	r0, 7
 6ea:	05 d0       	rcall	.+10     	; 0x6f6 <__divmodhi4_neg2>
 6ec:	3e f4       	brtc	.+14     	; 0x6fc <__divmodhi4_exit>

000006ee <__divmodhi4_neg1>:
 6ee:	90 95       	com	r25
 6f0:	81 95       	neg	r24
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	08 95       	ret

000006f6 <__divmodhi4_neg2>:
 6f6:	70 95       	com	r23
 6f8:	61 95       	neg	r22
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255

000006fc <__divmodhi4_exit>:
 6fc:	08 95       	ret

000006fe <__udivmodsi4>:
 6fe:	a1 e2       	ldi	r26, 0x21	; 33
 700:	1a 2e       	mov	r1, r26
 702:	aa 1b       	sub	r26, r26
 704:	bb 1b       	sub	r27, r27
 706:	fd 01       	movw	r30, r26
 708:	0d c0       	rjmp	.+26     	; 0x724 <__udivmodsi4_ep>

0000070a <__udivmodsi4_loop>:
 70a:	aa 1f       	adc	r26, r26
 70c:	bb 1f       	adc	r27, r27
 70e:	ee 1f       	adc	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	a2 17       	cp	r26, r18
 714:	b3 07       	cpc	r27, r19
 716:	e4 07       	cpc	r30, r20
 718:	f5 07       	cpc	r31, r21
 71a:	20 f0       	brcs	.+8      	; 0x724 <__udivmodsi4_ep>
 71c:	a2 1b       	sub	r26, r18
 71e:	b3 0b       	sbc	r27, r19
 720:	e4 0b       	sbc	r30, r20
 722:	f5 0b       	sbc	r31, r21

00000724 <__udivmodsi4_ep>:
 724:	66 1f       	adc	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	1a 94       	dec	r1
 72e:	69 f7       	brne	.-38     	; 0x70a <__udivmodsi4_loop>
 730:	60 95       	com	r22
 732:	70 95       	com	r23
 734:	80 95       	com	r24
 736:	90 95       	com	r25
 738:	9b 01       	movw	r18, r22
 73a:	ac 01       	movw	r20, r24
 73c:	bd 01       	movw	r22, r26
 73e:	cf 01       	movw	r24, r30
 740:	08 95       	ret

00000742 <__udivmodhi4>:
 742:	aa 1b       	sub	r26, r26
 744:	bb 1b       	sub	r27, r27
 746:	51 e1       	ldi	r21, 0x11	; 17
 748:	07 c0       	rjmp	.+14     	; 0x758 <__udivmodhi4_ep>

0000074a <__udivmodhi4_loop>:
 74a:	aa 1f       	adc	r26, r26
 74c:	bb 1f       	adc	r27, r27
 74e:	a6 17       	cp	r26, r22
 750:	b7 07       	cpc	r27, r23
 752:	10 f0       	brcs	.+4      	; 0x758 <__udivmodhi4_ep>
 754:	a6 1b       	sub	r26, r22
 756:	b7 0b       	sbc	r27, r23

00000758 <__udivmodhi4_ep>:
 758:	88 1f       	adc	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	5a 95       	dec	r21
 75e:	a9 f7       	brne	.-22     	; 0x74a <__udivmodhi4_loop>
 760:	80 95       	com	r24
 762:	90 95       	com	r25
 764:	bc 01       	movw	r22, r24
 766:	cd 01       	movw	r24, r26
 768:	08 95       	ret

0000076a <_exit>:
 76a:	f8 94       	cli

0000076c <__stop_program>:
 76c:	ff cf       	rjmp	.-2      	; 0x76c <__stop_program>
