
03.TIMER_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800118  00800118  00000742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001029  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b06  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b9  00000000  00000000  000023d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043d  00000000  00000000  000033db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e4 c2       	rjmp	.+1480   	; 0x60a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bc d2       	rcall	.+1400   	; 0x63c <main>
  c4:	e6 c2       	rjmp	.+1484   	; 0x692 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_button>:
	static unsigned char button_status[BUTTON_NUMER] =
	{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};	
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
  c8:	40 b3       	in	r20, 0x10	; 16
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <get_button+0xc>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <get_button+0x8>
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	24 23       	and	r18, r20
  dc:	35 23       	and	r19, r21
  de:	23 2b       	or	r18, r19
  e0:	b9 f0       	breq	.+46     	; 0x110 <get_button+0x48>
  e2:	fc 01       	movw	r30, r24
  e4:	e8 5e       	subi	r30, 0xE8	; 232
  e6:	fe 4f       	sbci	r31, 0xFE	; 254
  e8:	20 81       	ld	r18, Z
  ea:	21 11       	cpse	r18, r1
  ec:	27 c0       	rjmp	.+78     	; 0x13c <get_button+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	3d ee       	ldi	r19, 0xED	; 237
  f2:	42 e0       	ldi	r20, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	40 40       	sbci	r20, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <get_button+0x2c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <get_button+0x36>
  fe:	00 00       	nop
	{
		_delay_ms(60);   // noise가 지나가기를 기다린다. 
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
 100:	fc 01       	movw	r30, r24
 102:	e8 5e       	subi	r30, 0xE8	; 232
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	20 83       	st	Z, r18
		return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 110:	fc 01       	movw	r30, r24
 112:	e8 5e       	subi	r30, 0xE8	; 232
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	20 81       	ld	r18, Z
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	99 f4       	brne	.+38     	; 0x142 <get_button+0x7a>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	3d ee       	ldi	r19, 0xED	; 237
 120:	42 e0       	ldi	r20, 0x02	; 2
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	40 40       	sbci	r20, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <get_button+0x5a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <get_button+0x64>
 12c:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
 12e:	fc 01       	movw	r30, r24
 130:	e8 5e       	subi	r30, 0xE8	; 232
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	10 82       	st	Z, r1
		return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정		
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret
	}
	
	return 0;   // 버튼이 open상태 
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <flower_on2>:
	PORTA = 0xff;
}

void led_all_off(void)
{
	PORTA = 0x00;
 148:	1b ba       	out	0x1b, r1	; 27
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	a0 e1       	ldi	r26, 0x10	; 16
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e8 e0       	ldi	r30, 0x08	; 8
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	3b b3       	in	r19, 0x1b	; 27
 158:	bd 01       	movw	r22, r26
 15a:	08 2e       	mov	r0, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <flower_on2+0x1a>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <flower_on2+0x16>
 166:	af 01       	movw	r20, r30
 168:	08 2e       	mov	r0, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <flower_on2+0x28>
 16c:	55 95       	asr	r21
 16e:	47 95       	ror	r20
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <flower_on2+0x24>
 174:	26 2f       	mov	r18, r22
 176:	24 2b       	or	r18, r20
 178:	23 2b       	or	r18, r19
 17a:	2b bb       	out	0x1b, r18	; 27
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	36 e7       	ldi	r19, 0x76	; 118
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	21 50       	subi	r18, 0x01	; 1
 184:	30 40       	sbci	r19, 0x00	; 0
 186:	40 40       	sbci	r20, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <flower_on2+0x3a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <flower_on2+0x44>
 18c:	00 00       	nop
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	84 30       	cpi	r24, 0x04	; 4
 192:	91 05       	cpc	r25, r1
 194:	01 f7       	brne	.-64     	; 0x156 <flower_on2+0xe>
 196:	08 95       	ret

00000198 <flower_off2>:
 198:	1b ba       	out	0x1b, r1	; 27
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	e0 ef       	ldi	r30, 0xF0	; 240
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	6f e0       	ldi	r22, 0x0F	; 15
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	cf 01       	movw	r24, r30
 1a8:	02 2e       	mov	r0, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <flower_off2+0x18>
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <flower_off2+0x14>
 1b4:	48 2f       	mov	r20, r24
 1b6:	40 7f       	andi	r20, 0xF0	; 240
 1b8:	cb 01       	movw	r24, r22
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <flower_off2+0x2a>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <flower_off2+0x26>
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	84 2b       	or	r24, r20
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	4f ef       	ldi	r20, 0xFF	; 255
 1ce:	86 e7       	ldi	r24, 0x76	; 118
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	41 50       	subi	r20, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <flower_off2+0x3a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <flower_off2+0x44>
 1dc:	00 00       	nop
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	24 30       	cpi	r18, 0x04	; 4
 1e4:	31 05       	cpc	r19, r1
 1e6:	f9 f6       	brne	.-66     	; 0x1a6 <flower_off2+0xe>
 1e8:	1b ba       	out	0x1b, r1	; 27
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	46 e7       	ldi	r20, 0x76	; 118
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	40 40       	sbci	r20, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <flower_off2+0x58>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <flower_off2+0x62>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <shift_left_keep_ledon2>:
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	4b b3       	in	r20, 0x1b	; 27
 208:	9b 01       	movw	r18, r22
 20a:	08 2e       	mov	r0, r24
 20c:	02 c0       	rjmp	.+4      	; 0x212 <shift_left_keep_ledon2+0x14>
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <shift_left_keep_ledon2+0x10>
 216:	24 2b       	or	r18, r20
 218:	2b bb       	out	0x1b, r18	; 27
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	36 e7       	ldi	r19, 0x76	; 118
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	21 50       	subi	r18, 0x01	; 1
 222:	30 40       	sbci	r19, 0x00	; 0
 224:	40 40       	sbci	r20, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <shift_left_keep_ledon2+0x22>
 228:	00 c0       	rjmp	.+0      	; 0x22a <shift_left_keep_ledon2+0x2c>
 22a:	00 00       	nop
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	91 05       	cpc	r25, r1
 232:	49 f7       	brne	.-46     	; 0x206 <shift_left_keep_ledon2+0x8>
 234:	08 95       	ret

00000236 <shift_right_keep_ledon2>:
 236:	1b ba       	out	0x1b, r1	; 27
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	60 e8       	ldi	r22, 0x80	; 128
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	4b b3       	in	r20, 0x1b	; 27
 242:	9b 01       	movw	r18, r22
 244:	08 2e       	mov	r0, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <shift_right_keep_ledon2+0x16>
 248:	35 95       	asr	r19
 24a:	27 95       	ror	r18
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <shift_right_keep_ledon2+0x12>
 250:	24 2b       	or	r18, r20
 252:	2b bb       	out	0x1b, r18	; 27
 254:	2f ef       	ldi	r18, 0xFF	; 255
 256:	36 e7       	ldi	r19, 0x76	; 118
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	30 40       	sbci	r19, 0x00	; 0
 25e:	40 40       	sbci	r20, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <shift_right_keep_ledon2+0x24>
 262:	00 c0       	rjmp	.+0      	; 0x264 <shift_right_keep_ledon2+0x2e>
 264:	00 00       	nop
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	88 30       	cpi	r24, 0x08	; 8
 26a:	91 05       	cpc	r25, r1
 26c:	49 f7       	brne	.-46     	; 0x240 <shift_right_keep_ledon2+0xa>
 26e:	08 95       	ret

00000270 <shift_left_ledon2>:
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	9a 01       	movw	r18, r20
 27a:	08 2e       	mov	r0, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <shift_left_ledon2+0x12>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <shift_left_ledon2+0xe>
 286:	2b bb       	out	0x1b, r18	; 27
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	36 e7       	ldi	r19, 0x76	; 118
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	30 40       	sbci	r19, 0x00	; 0
 292:	60 40       	sbci	r22, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <shift_left_ledon2+0x1e>
 296:	00 c0       	rjmp	.+0      	; 0x298 <shift_left_ledon2+0x28>
 298:	00 00       	nop
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	88 30       	cpi	r24, 0x08	; 8
 29e:	91 05       	cpc	r25, r1
 2a0:	59 f7       	brne	.-42     	; 0x278 <shift_left_ledon2+0x8>
 2a2:	08 95       	ret

000002a4 <shift_right_ledon2>:
 2a4:	1b ba       	out	0x1b, r1	; 27
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	40 e8       	ldi	r20, 0x80	; 128
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	9a 01       	movw	r18, r20
 2b0:	08 2e       	mov	r0, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <shift_right_ledon2+0x14>
 2b4:	35 95       	asr	r19
 2b6:	27 95       	ror	r18
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <shift_right_ledon2+0x10>
 2bc:	2b bb       	out	0x1b, r18	; 27
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	36 e7       	ldi	r19, 0x76	; 118
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	30 40       	sbci	r19, 0x00	; 0
 2c8:	60 40       	sbci	r22, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <shift_right_ledon2+0x20>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <shift_right_ledon2+0x2a>
 2ce:	00 00       	nop
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	88 30       	cpi	r24, 0x08	; 8
 2d4:	91 05       	cpc	r25, r1
 2d6:	59 f7       	brne	.-42     	; 0x2ae <shift_right_ledon2+0xa>
 2d8:	08 95       	ret

000002da <state_transition>:


void state_transition(void)
{
	state++;
	state %= FUNC_NUMER;
 2da:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state>
 2de:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state+0x1>
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	ad d1       	rcall	.+858    	; 0x644 <__divmodhi4>
 2ea:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <state+0x1>
 2ee:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state>
 2f2:	08 95       	ret

000002f4 <led_main>:
int mode = 0;
int current_state = 0;

int led_main(void)
{
	DDRA = 0xff;   // PORTA에 연결된 pin8개를 output mode로
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	8a bb       	out	0x1a, r24	; 26
	
	while(1)
	{
		if(get_button(BUTTON0, BUTTON0PIN))
		{
			mode = !mode;
 2f8:	01 e0       	ldi	r16, 0x01	; 1
 2fa:	10 e0       	ldi	r17, 0x00	; 0
		else // 수동
		{
			if (get_button(BUTTON1, BUTTON1PIN))
			{
				current_state++;
				current_state %= 6;
 2fc:	c6 e0       	ldi	r28, 0x06	; 6
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
{
	DDRA = 0xff;   // PORTA에 연결된 pin8개를 output mode로
	
	while(1)
	{
		if(get_button(BUTTON0, BUTTON0PIN))
 300:	64 e0       	ldi	r22, 0x04	; 4
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	df de       	rcall	.-578    	; 0xc8 <get_button>
 30a:	89 2b       	or	r24, r25
 30c:	71 f0       	breq	.+28     	; 0x32a <led_main+0x36>
		{
			mode = !mode;
 30e:	90 2f       	mov	r25, r16
 310:	81 2f       	mov	r24, r17
 312:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <mode>
 316:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <mode+0x1>
 31a:	23 2b       	or	r18, r19
 31c:	11 f0       	breq	.+4      	; 0x322 <led_main+0x2e>
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <mode>
 326:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <mode+0x1>
		}
		
		if(mode == 0) // 자동
 32a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mode>
 32e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mode+0x1>
 332:	89 2b       	or	r24, r25
 334:	c1 f4       	brne	.+48     	; 0x366 <led_main+0x72>
		{
			// msec_count가 30 이상일 때 상태 전환이 이루어지도록 수정
			if (msec_count >= 30)
 336:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 33a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 33e:	4e 97       	sbiw	r24, 0x1e	; 30
 340:	2c f0       	brlt	.+10     	; 0x34c <led_main+0x58>
			{
				msec_count = 0;  // msec_count 초기화
 342:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msec_count+0x1>
 346:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msec_count>
				state_transition(); // 상태 전환
 34a:	c7 df       	rcall	.-114    	; 0x2da <state_transition>
			}
			fp1[state]();
 34c:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <state>
 350:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <state+0x1>
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	e4 5f       	subi	r30, 0xF4	; 244
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	01 90       	ld	r0, Z+
 35e:	f0 81       	ld	r31, Z
 360:	e0 2d       	mov	r30, r0
 362:	09 95       	icall
 364:	cd cf       	rjmp	.-102    	; 0x300 <led_main+0xc>
		}
		else // 수동
		{
			if (get_button(BUTTON1, BUTTON1PIN))
 366:	65 e0       	ldi	r22, 0x05	; 5
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	80 2f       	mov	r24, r16
 36c:	91 2f       	mov	r25, r17
 36e:	ac de       	rcall	.-680    	; 0xc8 <get_button>
 370:	89 2b       	or	r24, r25
 372:	59 f0       	breq	.+22     	; 0x38a <led_main+0x96>
			{
				current_state++;
				current_state %= 6;
 374:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current_state>
 378:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current_state+0x1>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	be 01       	movw	r22, r28
 380:	61 d1       	rcall	.+706    	; 0x644 <__divmodhi4>
 382:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <current_state+0x1>
 386:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <current_state>
			}
			fp2[current_state] ();
 38a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <current_state>
 38e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <current_state+0x1>
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	e0 50       	subi	r30, 0x00	; 0
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	01 90       	ld	r0, Z+
 39c:	f0 81       	ld	r31, Z
 39e:	e0 2d       	mov	r30, r0
 3a0:	09 95       	icall
 3a2:	ae cf       	rjmp	.-164    	; 0x300 <led_main+0xc>

000003a4 <flower_on1>:
// 수동
void flower_on1(void)
{
	static int i=0;

	if (msec_count >= 100)
 3a4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 3a8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 3ac:	84 36       	cpi	r24, 0x64	; 100
 3ae:	91 05       	cpc	r25, r1
 3b0:	9c f1       	brlt	.+102    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		msec_count=0;
 3b2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msec_count+0x1>
 3b6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msec_count>
		if (i >= 4)
 3ba:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <i.1778>
 3be:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <i.1778+0x1>
 3c2:	44 30       	cpi	r20, 0x04	; 4
 3c4:	51 05       	cpc	r21, r1
 3c6:	6c f0       	brlt	.+26     	; 0x3e2 <flower_on1+0x3e>
		{
			i=PORTA=0x00;
 3c8:	1b ba       	out	0x1b, r1	; 27
 3ca:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <i.1778+0x1>
 3ce:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <i.1778>
			if(mode == 0)
 3d2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mode>
 3d6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mode+0x1>
 3da:	89 2b       	or	r24, r25
 3dc:	e9 f4       	brne	.+58     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				state_transition();   // state를 천이 to shift_right_keep_ledon
 3de:	7d cf       	rjmp	.-262    	; 0x2da <state_transition>
 3e0:	08 95       	ret
		}
		else
		{
			PORTA |= 0x10 << i | 0x08 >> i++;
 3e2:	ca 01       	movw	r24, r20
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <i.1778+0x1>
 3ea:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <i.1778>
 3ee:	5b b3       	in	r21, 0x1b	; 27
 3f0:	60 e1       	ldi	r22, 0x10	; 16
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	04 2e       	mov	r0, r20
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <flower_on1+0x58>
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <flower_on1+0x54>
 400:	28 e0       	ldi	r18, 0x08	; 8
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	35 95       	asr	r19
 408:	27 95       	ror	r18
 40a:	4a 95       	dec	r20
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	82 2b       	or	r24, r18
 412:	93 2b       	or	r25, r19
 414:	85 2b       	or	r24, r21
 416:	8b bb       	out	0x1b, r24	; 27
 418:	08 95       	ret

0000041a <flower_off1>:
	unsigned char h=0xf0;
	unsigned char l=0x0f;
	
	static int i=0;

	if (msec_count >= 30)
 41a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 41e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 422:	4e 97       	sbiw	r24, 0x1e	; 30
 424:	ac f1       	brlt	.+106    	; 0x490 <flower_off1+0x76>
	{
		msec_count=0;
 426:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msec_count+0x1>
 42a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msec_count>
		if (i >= 4)
 42e:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <i.1791>
 432:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <i.1791+0x1>
 436:	44 30       	cpi	r20, 0x04	; 4
 438:	51 05       	cpc	r21, r1
 43a:	6c f0       	brlt	.+26     	; 0x456 <flower_off1+0x3c>
		{
			i=PORTA=0x00;
 43c:	1b ba       	out	0x1b, r1	; 27
 43e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <i.1791+0x1>
 442:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <i.1791>
			if(mode == 0)
 446:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mode>
 44a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mode+0x1>
 44e:	89 2b       	or	r24, r25
 450:	f9 f4       	brne	.+62     	; 0x490 <flower_off1+0x76>
				state_transition();   // state를 천이 to shift_right_keep_ledon
 452:	43 cf       	rjmp	.-378    	; 0x2da <state_transition>
 454:	08 95       	ret
		}
		else
		{
			PORTA = ( ((h >> i) & 0xf0) | ((l << i) & 0x0f));
 456:	80 ef       	ldi	r24, 0xF0	; 240
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	04 2e       	mov	r0, r20
 45c:	02 c0       	rjmp	.+4      	; 0x462 <flower_off1+0x48>
 45e:	95 95       	asr	r25
 460:	87 95       	ror	r24
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <flower_off1+0x44>
 466:	28 2f       	mov	r18, r24
 468:	20 7f       	andi	r18, 0xF0	; 240
 46a:	8f e0       	ldi	r24, 0x0F	; 15
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <flower_off1+0x5a>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	4a 95       	dec	r20
 476:	e2 f7       	brpl	.-8      	; 0x470 <flower_off1+0x56>
 478:	8f 70       	andi	r24, 0x0F	; 15
 47a:	82 2b       	or	r24, r18
 47c:	8b bb       	out	0x1b, r24	; 27
			i++;
 47e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i.1791>
 482:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <i.1791+0x1>
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <i.1791+0x1>
 48c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <i.1791>
 490:	08 95       	ret

00000492 <shift_left_keep_ledon1>:

void shift_left_keep_ledon1(void)
{
	static int i=0;

	if (msec_count >= 30)
 492:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 496:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 49a:	4e 97       	sbiw	r24, 0x1e	; 30
 49c:	44 f1       	brlt	.+80     	; 0x4ee <shift_left_keep_ledon1+0x5c>
	{
		msec_count=0;
 49e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msec_count+0x1>
 4a2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msec_count>
		if (i >= 8)
 4a6:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <i.1804>
 4aa:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <i.1804+0x1>
 4ae:	28 30       	cpi	r18, 0x08	; 8
 4b0:	31 05       	cpc	r19, r1
 4b2:	6c f0       	brlt	.+26     	; 0x4ce <shift_left_keep_ledon1+0x3c>
		{
			i = PORTA = 0x00;
 4b4:	1b ba       	out	0x1b, r1	; 27
 4b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <i.1804+0x1>
 4ba:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <i.1804>
			if(mode == 0)
 4be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mode>
 4c2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mode+0x1>
 4c6:	89 2b       	or	r24, r25
 4c8:	91 f4       	brne	.+36     	; 0x4ee <shift_left_keep_ledon1+0x5c>
				state_transition();   // state를 천이 to shift_right_keep_ledon
 4ca:	07 cf       	rjmp	.-498    	; 0x2da <state_transition>
 4cc:	08 95       	ret
		}
		else
		{
			PORTA |= 0b00000001 << i++;
 4ce:	c9 01       	movw	r24, r18
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <i.1804+0x1>
 4d6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <i.1804>
 4da:	3b b3       	in	r19, 0x1b	; 27
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <shift_left_keep_ledon1+0x54>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	2a 95       	dec	r18
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <shift_left_keep_ledon1+0x50>
 4ea:	83 2b       	or	r24, r19
 4ec:	8b bb       	out	0x1b, r24	; 27
 4ee:	08 95       	ret

000004f0 <shift_right_keep_ledon1>:
}
void shift_right_keep_ledon1(void)
{
	static int i=0;

	if (msec_count >= 30)
 4f0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 4f4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 4f8:	4e 97       	sbiw	r24, 0x1e	; 30
 4fa:	44 f1       	brlt	.+80     	; 0x54c <shift_right_keep_ledon1+0x5c>
	{
		msec_count=0;
 4fc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msec_count+0x1>
 500:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msec_count>
		if (i >= 8)
 504:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <i.1815>
 508:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <i.1815+0x1>
 50c:	28 30       	cpi	r18, 0x08	; 8
 50e:	31 05       	cpc	r19, r1
 510:	6c f0       	brlt	.+26     	; 0x52c <shift_right_keep_ledon1+0x3c>
		{
			i=PORTA=0x00;
 512:	1b ba       	out	0x1b, r1	; 27
 514:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i.1815+0x1>
 518:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <i.1815>
			if(mode == 0)
 51c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mode>
 520:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mode+0x1>
 524:	89 2b       	or	r24, r25
 526:	91 f4       	brne	.+36     	; 0x54c <shift_right_keep_ledon1+0x5c>
				state_transition();   // state를 천이 to shift_right_keep_ledon
 528:	d8 ce       	rjmp	.-592    	; 0x2da <state_transition>
 52a:	08 95       	ret
		}
		else
		{
			PORTA |= 0b10000000 >> i++;
 52c:	c9 01       	movw	r24, r18
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <i.1815+0x1>
 534:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <i.1815>
 538:	3b b3       	in	r19, 0x1b	; 27
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <shift_right_keep_ledon1+0x54>
 540:	95 95       	asr	r25
 542:	87 95       	ror	r24
 544:	2a 95       	dec	r18
 546:	e2 f7       	brpl	.-8      	; 0x540 <shift_right_keep_ledon1+0x50>
 548:	83 2b       	or	r24, r19
 54a:	8b bb       	out	0x1b, r24	; 27
 54c:	08 95       	ret

0000054e <shift_left_ledon1>:
void shift_left_ledon1(void)
{
   // (1)for문 제거  (2) _delay_ms(30) 제거
   static int i=0;
   
   if (msec_count >= 30)
 54e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 552:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 556:	4e 97       	sbiw	r24, 0x1e	; 30
 558:	44 f1       	brlt	.+80     	; 0x5aa <shift_left_ledon1+0x5c>
   {
	   msec_count=0;
 55a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msec_count+0x1>
 55e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msec_count>
	   if (i >= 8)
 562:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <i.1827>
 566:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <i.1827+0x1>
 56a:	88 30       	cpi	r24, 0x08	; 8
 56c:	91 05       	cpc	r25, r1
 56e:	6c f0       	brlt	.+26     	; 0x58a <shift_left_ledon1+0x3c>
	   {
		   i=PORTA=0;
 570:	1b ba       	out	0x1b, r1	; 27
 572:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <i.1827+0x1>
 576:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <i.1827>
		   if(mode == 0)
 57a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mode>
 57e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mode+0x1>
 582:	89 2b       	or	r24, r25
 584:	91 f4       	brne	.+36     	; 0x5aa <shift_left_ledon1+0x5c>
		   {
			   state_transition();   // state를 천이 to shift_right_keep_ledon
 586:	a9 ce       	rjmp	.-686    	; 0x2da <state_transition>
 588:	08 95       	ret
		   }
	   }
	   else
	   {
		   PORTA = 0b00000001 << i++;  // (1) PORTA = 0b00000001 << i  (2) i++
 58a:	9c 01       	movw	r18, r24
 58c:	2f 5f       	subi	r18, 0xFF	; 255
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <i.1827+0x1>
 594:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <i.1827>
 598:	21 e0       	ldi	r18, 0x01	; 1
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	a9 01       	movw	r20, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <shift_left_ledon1+0x56>
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	8a 95       	dec	r24
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <shift_left_ledon1+0x52>
 5a8:	4b bb       	out	0x1b, r20	; 27
 5aa:	08 95       	ret

000005ac <shift_right_ledon1>:

void shift_right_ledon1(void)
{
	static int i=0;

	if (msec_count >= 30)
 5ac:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 5b0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 5b4:	4e 97       	sbiw	r24, 0x1e	; 30
 5b6:	44 f1       	brlt	.+80     	; 0x608 <shift_right_ledon1+0x5c>
	{
		msec_count=0;
 5b8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msec_count+0x1>
 5bc:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msec_count>
		if (i >= 8)
 5c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i.1838>
 5c4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i.1838+0x1>
 5c8:	88 30       	cpi	r24, 0x08	; 8
 5ca:	91 05       	cpc	r25, r1
 5cc:	6c f0       	brlt	.+26     	; 0x5e8 <shift_right_ledon1+0x3c>
		{
			i=PORTA=0x00;
 5ce:	1b ba       	out	0x1b, r1	; 27
 5d0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i.1838+0x1>
 5d4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i.1838>
			if(mode == 0)
 5d8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <mode>
 5dc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <mode+0x1>
 5e0:	89 2b       	or	r24, r25
 5e2:	91 f4       	brne	.+36     	; 0x608 <shift_right_ledon1+0x5c>
				state_transition();   // state를 천이 to shift_right_keep_ledon
 5e4:	7a ce       	rjmp	.-780    	; 0x2da <state_transition>
 5e6:	08 95       	ret
		}
		else
		{
			PORTA = 0b10000000 >> i++;
 5e8:	9c 01       	movw	r18, r24
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <i.1838+0x1>
 5f2:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <i.1838>
 5f6:	20 e8       	ldi	r18, 0x80	; 128
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	a9 01       	movw	r20, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <shift_right_ledon1+0x56>
 5fe:	55 95       	asr	r21
 600:	47 95       	ror	r20
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <shift_right_ledon1+0x52>
 606:	4b bb       	out	0x1b, r20	; 27
 608:	08 95       	ret

0000060a <__vector_16>:
// 250개의 pulse를 count(1ms)하면 이곳으로 자동적으로 들어 온다.
// ISR루틴(함수)는 가능한 짧게 작성 한다.
int led_toggle = 0;

ISR(TIMER0_OVF_vect)
{
 60a:	1f 92       	push	r1
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
	// 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정하는것이다.
	TCNT0 = 6;
 618:	86 e0       	ldi	r24, 0x06	; 6
 61a:	82 bf       	out	0x32, r24	; 50
	msec_count++; // 1ms마다 1씩 증가
 61c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msec_count>
 620:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <msec_count+0x1>
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <msec_count+0x1>
 62a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <msec_count>
}
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <main>:

// none O/S 또는 loop monitor방식
int main(void)
{
	led_main();
 63c:	5b de       	rcall	.-842    	; 0x2f4 <led_main>
	
	return 0;
}
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	08 95       	ret

00000644 <__divmodhi4>:
 644:	97 fb       	bst	r25, 7
 646:	07 2e       	mov	r0, r23
 648:	16 f4       	brtc	.+4      	; 0x64e <__divmodhi4+0xa>
 64a:	00 94       	com	r0
 64c:	06 d0       	rcall	.+12     	; 0x65a <__divmodhi4_neg1>
 64e:	77 fd       	sbrc	r23, 7
 650:	08 d0       	rcall	.+16     	; 0x662 <__divmodhi4_neg2>
 652:	0b d0       	rcall	.+22     	; 0x66a <__udivmodhi4>
 654:	07 fc       	sbrc	r0, 7
 656:	05 d0       	rcall	.+10     	; 0x662 <__divmodhi4_neg2>
 658:	3e f4       	brtc	.+14     	; 0x668 <__divmodhi4_exit>

0000065a <__divmodhi4_neg1>:
 65a:	90 95       	com	r25
 65c:	81 95       	neg	r24
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__divmodhi4_neg2>:
 662:	70 95       	com	r23
 664:	61 95       	neg	r22
 666:	7f 4f       	sbci	r23, 0xFF	; 255

00000668 <__divmodhi4_exit>:
 668:	08 95       	ret

0000066a <__udivmodhi4>:
 66a:	aa 1b       	sub	r26, r26
 66c:	bb 1b       	sub	r27, r27
 66e:	51 e1       	ldi	r21, 0x11	; 17
 670:	07 c0       	rjmp	.+14     	; 0x680 <__udivmodhi4_ep>

00000672 <__udivmodhi4_loop>:
 672:	aa 1f       	adc	r26, r26
 674:	bb 1f       	adc	r27, r27
 676:	a6 17       	cp	r26, r22
 678:	b7 07       	cpc	r27, r23
 67a:	10 f0       	brcs	.+4      	; 0x680 <__udivmodhi4_ep>
 67c:	a6 1b       	sub	r26, r22
 67e:	b7 0b       	sbc	r27, r23

00000680 <__udivmodhi4_ep>:
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	5a 95       	dec	r21
 686:	a9 f7       	brne	.-22     	; 0x672 <__udivmodhi4_loop>
 688:	80 95       	com	r24
 68a:	90 95       	com	r25
 68c:	bc 01       	movw	r22, r24
 68e:	cd 01       	movw	r24, r26
 690:	08 95       	ret

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
