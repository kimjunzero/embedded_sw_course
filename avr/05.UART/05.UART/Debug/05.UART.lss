
05.UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002fe  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019c  00800114  00800114  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e60  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f0  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000169  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	77 c0       	rjmp	.+238    	; 0x138 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ef       	ldi	r30, 0xFE	; 254
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3b       	cpi	r26, 0xB0	; 176
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	24 d0       	rcall	.+72     	; 0x10c <main>
  c4:	1a c1       	rjmp	.+564    	; 0x2fa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
// 250개의 pulse를 count(1ms)하면 이곳으로 자동적으로 들어 온다. 
// ISR루틴(함수)은 가능한 짧게 작성 한다.

int led_toggle=0; 
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	// 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정하는것이다. 
	TCNT0=6;
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	82 bf       	out	0x32, r24	; 50
	msec_count++;   // 1ms마다 1씩 증가
  da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <init_timer0>:
// ------ 분주비 계산 ----
// (1) 16000000Hz/64 ==> 250,000HZ
// (2) T(주기) 1clock의 소요시간 : 1/f = 1/250,000 ==> 0.0000004sec(4us) : 0.004ms	
// (3) 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms 
// 1ms마다 정확하게 INT를 띄우고 싶은면 0.004ms x 250개를 count = 0.001sec ==>1ms
	TCNT0=6;   // TCNT : 0~256 1ms 마다 TIMER0_OVF_vect로 진입 한다. 
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	82 bf       	out	0x32, r24	; 50
	           // TCNT0 = 6으로 설정을 한 이유: 6-->256 : 250개의 펄스를 count하기 때문에 정확히 1ms가 된다.
// (4) 분주비 설정 64분주 (250,000HZ --> 250KHz) P296 표13-1
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;  // TCCR0 |= 0xf4 보다는 죄측의 code 권장 
  fe:	83 b7       	in	r24, 0x33	; 51
 100:	84 60       	ori	r24, 0x04	; 4
 102:	83 bf       	out	0x33, r24	; 51
// (5) Timer0 overflow INT를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01; 
 104:	87 b7       	in	r24, 0x37	; 55
 106:	81 60       	ori	r24, 0x01	; 1
 108:	87 bf       	out	0x37, r24	; 55
 10a:	08 95       	ret

0000010c <main>:
	flower_off
};

int main(void)
{
	init_timer0();
 10c:	f6 df       	rcall	.-20     	; 0xfa <init_timer0>
	init_uart0();
 10e:	8c d0       	rcall	.+280    	; 0x228 <init_uart0>
 110:	80 e0       	ldi	r24, 0x00	; 0
	stdout = &OUTPUT;   // printf가 동작 될 수 있도록 stdout에 OUTPUT 화일 포인터 assign 
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <__iob+0x3>
 118:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <__iob+0x2>
 11c:	78 94       	sei
	sei();   // 전역(대문)으로 interrupt 허용
 11e:	8e e0       	ldi	r24, 0x0E	; 14
	// led_main();
	
	// printf("init_uart0\n");
	while(1)
	{
		printf("8857\n");
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	bb d0       	rcall	.+374    	; 0x29a <puts>
 124:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	81 ee       	ldi	r24, 0xE1	; 225
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x1e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x28>
 134:	00 00       	nop
 136:	f3 cf       	rjmp	.-26     	; 0x11e <main+0x12>

00000138 <__vector_18>:
 138:	1f 92       	push	r1
*/

int mode = 0;
volatile uint8_t rx_msg_received=0;
ISR(USART0_RX_vect) // 가능한 짧게
{
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	0b b6       	in	r0, 0x3b	; 59
 144:	0f 92       	push	r0
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	1f 92       	push	r1
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
   volatile uint8_t rx_data;
   volatile static int i=0;
   
   rx_data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1byte를 읽어 들인다. 
 168:	8c b1       	in	r24, 0x0c	; 12
 16a:	89 83       	std	Y+1, r24	; 0x01
                    // rx_data = UDR0;를 실행하면 UDR0의 내용이 빈다.(empty)
   if (rx_data == '\n')
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	8a 30       	cpi	r24, 0x0A	; 10
 170:	49 f5       	brne	.+82     	; 0x1c4 <__vector_18+0x8c>
   {
      rx_buff[rear++][i] = '\0';
 172:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <rear>
 176:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <rear+0x1>
 17a:	c9 01       	movw	r24, r18
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <rear+0x1>
 182:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rear>
 186:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <i.1894>
 18a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <i.1894+0x1>
 18e:	48 e2       	ldi	r20, 0x28	; 40
 190:	42 9f       	mul	r20, r18
 192:	f0 01       	movw	r30, r0
 194:	43 9f       	mul	r20, r19
 196:	f0 0d       	add	r31, r0
 198:	11 24       	eor	r1, r1
 19a:	e6 5e       	subi	r30, 0xE6	; 230
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	e8 0f       	add	r30, r24
 1a0:	f9 1f       	adc	r31, r25
 1a2:	10 82       	st	Z, r1
      rear %= COMMAND_NUMBER; // rear : 0 ~ 9
 1a4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <rear>
 1a8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <rear+0x1>
 1ac:	6a e0       	ldi	r22, 0x0A	; 10
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	4d d0       	rcall	.+154    	; 0x24c <__divmodhi4>
 1b2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <rear+0x1>
 1b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rear>
      i = 0; // 다음 string을 저장하기 위한 1차원 index값을 0으로
 1ba:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <i.1894+0x1>
 1be:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <i.1894>
 1c2:	1c c0       	rjmp	.+56     	; 0x1fc <__vector_18+0xc4>
      // !!!! rx_buff queue full check 하는 logic 추가 
   }
   else
   {
      rx_buff[rear][i++] = rx_data;
 1c4:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <rear>
 1c8:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <rear+0x1>
 1cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <i.1894>
 1d0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <i.1894+0x1>
 1d4:	9c 01       	movw	r18, r24
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255
 1da:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <i.1894+0x1>
 1de:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <i.1894>
 1e2:	49 81       	ldd	r20, Y+1	; 0x01
 1e4:	58 e2       	ldi	r21, 0x28	; 40
 1e6:	56 9f       	mul	r21, r22
 1e8:	90 01       	movw	r18, r0
 1ea:	57 9f       	mul	r21, r23
 1ec:	30 0d       	add	r19, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	26 5e       	subi	r18, 0xE6	; 230
 1f2:	3e 4f       	sbci	r19, 0xFE	; 254
 1f4:	f9 01       	movw	r30, r18
 1f6:	e8 0f       	add	r30, r24
 1f8:	f9 1f       	adc	r31, r25
 1fa:	40 83       	st	Z, r20
      // COMMAND_LENGTH를 check하는 logic 추가
   }
}
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0b be       	out	0x3b, r0	; 59
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <init_uart0>:
*/

void init_uart0(void)
{
   // 1. 9600bps로 설정
   UBRR0H = 0x00;
 228:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
   UBRR0L = 207;  // 9600bps P219 표9-9
 22c:	8f ec       	ldi	r24, 0xCF	; 207
 22e:	89 b9       	out	0x09, r24	; 9
   // 2. 2배속 통신  표9-1
   UCSR0A |= 1 << U2X0;  // 2배속 통신 
 230:	59 9a       	sbi	0x0b, 1	; 11
   UCSR0C |= 0x06;   // 비동기/data8bits/none parity
 232:	e5 e9       	ldi	r30, 0x95	; 149
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	86 60       	ori	r24, 0x06	; 6
 23a:	80 83       	st	Z, r24
   // P215 표9-1
   // RXEN0 : UART0로 부터 수신이 가능 하도록 
   // TXEN0 : UART0로 부터 송신이 가능 하도록 
   // RXCIE0 : UART0로 부터 1byte가 들어오면(stop bit가 들어 오면)) rx interrupt를 발생 시켜라
   UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 23c:	8a b1       	in	r24, 0x0a	; 10
 23e:	88 69       	ori	r24, 0x98	; 152
 240:	8a b9       	out	0x0a, r24	; 10
 242:	08 95       	ret

00000244 <UART0_transmit>:

// UART0로 1byte를 전송 하는 함수 (polling방식)
void UART0_transmit(uint8_t data)
{
   // 데이터 전송 중이면 전송이 끝날떄 까지 기다린다. 
   while ( !(UCSR0A & 1 << UDRE0))
 244:	5d 9b       	sbis	0x0b, 5	; 11
 246:	fe cf       	rjmp	.-4      	; 0x244 <UART0_transmit>
      ;   // no operation
   UDR0 = data;  // data를 H/W전송 register에 쏜다. 
 248:	8c b9       	out	0x0c, r24	; 12
 24a:	08 95       	ret

0000024c <__divmodhi4>:
 24c:	97 fb       	bst	r25, 7
 24e:	07 2e       	mov	r0, r23
 250:	16 f4       	brtc	.+4      	; 0x256 <__divmodhi4+0xa>
 252:	00 94       	com	r0
 254:	06 d0       	rcall	.+12     	; 0x262 <__divmodhi4_neg1>
 256:	77 fd       	sbrc	r23, 7
 258:	08 d0       	rcall	.+16     	; 0x26a <__divmodhi4_neg2>
 25a:	0b d0       	rcall	.+22     	; 0x272 <__udivmodhi4>
 25c:	07 fc       	sbrc	r0, 7
 25e:	05 d0       	rcall	.+10     	; 0x26a <__divmodhi4_neg2>
 260:	3e f4       	brtc	.+14     	; 0x270 <__divmodhi4_exit>

00000262 <__divmodhi4_neg1>:
 262:	90 95       	com	r25
 264:	81 95       	neg	r24
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	08 95       	ret

0000026a <__divmodhi4_neg2>:
 26a:	70 95       	com	r23
 26c:	61 95       	neg	r22
 26e:	7f 4f       	sbci	r23, 0xFF	; 255

00000270 <__divmodhi4_exit>:
 270:	08 95       	ret

00000272 <__udivmodhi4>:
 272:	aa 1b       	sub	r26, r26
 274:	bb 1b       	sub	r27, r27
 276:	51 e1       	ldi	r21, 0x11	; 17
 278:	07 c0       	rjmp	.+14     	; 0x288 <__udivmodhi4_ep>

0000027a <__udivmodhi4_loop>:
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	a6 17       	cp	r26, r22
 280:	b7 07       	cpc	r27, r23
 282:	10 f0       	brcs	.+4      	; 0x288 <__udivmodhi4_ep>
 284:	a6 1b       	sub	r26, r22
 286:	b7 0b       	sbc	r27, r23

00000288 <__udivmodhi4_ep>:
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	5a 95       	dec	r21
 28e:	a9 f7       	brne	.-22     	; 0x27a <__udivmodhi4_loop>
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	08 95       	ret

0000029a <puts>:
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__iob+0x2>
 2a6:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__iob+0x3>
 2aa:	23 81       	ldd	r18, Z+3	; 0x03
 2ac:	21 ff       	sbrs	r18, 1
 2ae:	1b c0       	rjmp	.+54     	; 0x2e6 <puts+0x4c>
 2b0:	8c 01       	movw	r16, r24
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	f8 01       	movw	r30, r16
 2b8:	81 91       	ld	r24, Z+
 2ba:	8f 01       	movw	r16, r30
 2bc:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <__iob+0x2>
 2c0:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <__iob+0x3>
 2c4:	db 01       	movw	r26, r22
 2c6:	18 96       	adiw	r26, 0x08	; 8
 2c8:	ed 91       	ld	r30, X+
 2ca:	fc 91       	ld	r31, X
 2cc:	19 97       	sbiw	r26, 0x09	; 9
 2ce:	88 23       	and	r24, r24
 2d0:	31 f0       	breq	.+12     	; 0x2de <puts+0x44>
 2d2:	09 95       	icall
 2d4:	89 2b       	or	r24, r25
 2d6:	79 f3       	breq	.-34     	; 0x2b6 <puts+0x1c>
 2d8:	df ef       	ldi	r29, 0xFF	; 255
 2da:	cf ef       	ldi	r28, 0xFF	; 255
 2dc:	ec cf       	rjmp	.-40     	; 0x2b6 <puts+0x1c>
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	09 95       	icall
 2e2:	89 2b       	or	r24, r25
 2e4:	19 f0       	breq	.+6      	; 0x2ec <puts+0x52>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	9f ef       	ldi	r25, 0xFF	; 255
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <puts+0x56>
 2ec:	8d 2f       	mov	r24, r29
 2ee:	9c 2f       	mov	r25, r28
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
