
02.FND_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000059c  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010c  0080010c  0000063c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d23  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4b  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f7  00000000  00000000  00001ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000282  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d2       	rcall	.+1108   	; 0x518 <main>
  c4:	69 c2       	rjmp	.+1234   	; 0x598 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
// DDRD &= 0x87     // 3, 4, 5, 6을 input으로 설정을 한다. (1) 가독성이 떨어진다. (code 해석이 어렵다)
//                                                        (2) port를 변경시 프로그램 수정이 어렵다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button>:
	static unsigned char button_status[] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE};
	// 지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
  d0:	40 b3       	in	r20, 0x10	; 16
	if(currtn_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 noise 상태. high
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <get_button+0xc>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <get_button+0x8>
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	24 23       	and	r18, r20
  e4:	35 23       	and	r19, r21
  e6:	23 2b       	or	r18, r19
  e8:	b9 f0       	breq	.+46     	; 0x118 <get_button+0x48>
  ea:	fc 01       	movw	r30, r24
  ec:	e4 5f       	subi	r30, 0xF4	; 244
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	20 81       	ld	r18, Z
  f2:	21 11       	cpse	r18, r1
  f4:	27 c0       	rjmp	.+78     	; 0x144 <get_button+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	3d ee       	ldi	r19, 0xED	; 237
  fa:	42 e0       	ldi	r20, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <get_button+0x2c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <get_button+0x36>
 106:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // noise가 지나간 상태의 High 상태
 108:	fc 01       	movw	r30, r24
 10a:	e4 5f       	subi	r30, 0xF4	; 244
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렸다 떼어진 상태가 아니다.
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 95       	ret
	}
	else if(currtn_state == BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 118:	fc 01       	movw	r30, r24
 11a:	e4 5f       	subi	r30, 0xF4	; 244
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	20 81       	ld	r18, Z
 120:	21 30       	cpi	r18, 0x01	; 1
 122:	99 f4       	brne	.+38     	; 0x14a <get_button+0x7a>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	3d ee       	ldi	r19, 0xED	; 237
 128:	42 e0       	ldi	r20, 0x02	; 2
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <get_button+0x5a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <get_button+0x64>
 134:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼 체크를 위해 초기화
 136:	fc 01       	movw	r30, r24
 138:	e4 5f       	subi	r30, 0xF4	; 244
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	10 82       	st	Z, r1
		return 1; // 완전히 1번 눌렸다 떼어진 상태로 인정
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
	}
	return 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
}
 14e:	08 95       	ret

00000150 <fnd_display2>:
	
	return 0;
}

void fnd_display2(void)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	2b 97       	sbiw	r28, 0x0b	; 11
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
	#if 1  // common 애노드
						 // 0     1     2     3     4    5     6     7     8     9     .
	uint8_t fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0x7f};
 164:	8b e0       	ldi	r24, 0x0B	; 11
 166:	e0 e0       	ldi	r30, 0x00	; 0
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	de 01       	movw	r26, r28
 16c:	11 96       	adiw	r26, 0x01	; 1
 16e:	01 90       	ld	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	8a 95       	dec	r24
 174:	e1 f7       	brne	.-8      	; 0x16e <fnd_display2+0x1e>
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
	#endif

	static int digit_select2 = 0; // static를 쓰면 전역 변수처럼 함수가 빠져 나갔다가 다시 들어오더라도 값을 유지
	// 
	switch(digit_select2)
 176:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <digit_select2.1759>
 17a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <digit_select2.1759+0x1>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 05       	cpc	r25, r1
 182:	f9 f0       	breq	.+62     	; 0x1c2 <fnd_display2+0x72>
 184:	1c f4       	brge	.+6      	; 0x18c <fnd_display2+0x3c>
 186:	89 2b       	or	r24, r25
 188:	39 f0       	breq	.+14     	; 0x198 <fnd_display2+0x48>
 18a:	3e c0       	rjmp	.+124    	; 0x208 <fnd_display2+0xb8>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	91 05       	cpc	r25, r1
 190:	a1 f1       	breq	.+104    	; 0x1fa <fnd_display2+0xaa>
 192:	03 97       	sbiw	r24, 0x03	; 3
 194:	b1 f1       	breq	.+108    	; 0x202 <fnd_display2+0xb2>
 196:	38 c0       	rjmp	.+112    	; 0x208 <fnd_display2+0xb8>
	{
		case 0:
		#if 1 // common 애노드
			FND_DIGIT_PORT = 0x80; // 10000000
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	88 bb       	out	0x18, r24	; 24
		#else // common 캐소드
			FND_DIGIT_PORT = ~0x80 // 01111111
		#endif
			FND_DATA_PORT = fnd_font[sec2_count % 10]; // 0~9초
 19c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <sec2_count>
 1a0:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <sec2_count+0x1>
 1a4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sec2_count+0x2>
 1a8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sec2_count+0x3>
 1ac:	2a e0       	ldi	r18, 0x0A	; 10
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	cf d1       	rcall	.+926    	; 0x554 <__udivmodsi4>
 1b6:	fe 01       	movw	r30, r28
 1b8:	e6 0f       	add	r30, r22
 1ba:	f7 1f       	adc	r31, r23
 1bc:	81 81       	ldd	r24, Z+1	; 0x01
 1be:	85 bb       	out	0x15, r24	; 21
		break;
 1c0:	23 c0       	rjmp	.+70     	; 0x208 <fnd_display2+0xb8>
		
		case 1:
		#if 1 // common 애노드
			FND_DIGIT_PORT = 0x40; // 10000000
 1c2:	80 e4       	ldi	r24, 0x40	; 64
 1c4:	88 bb       	out	0x18, r24	; 24
		#else // common 캐소드
			FND_DIGIT_PORT = ~0x40; // 01111111
		#endif
			FND_DATA_PORT = fnd_font[sec2_count / 10 % 6]; // 10단위초
 1c6:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <sec2_count>
 1ca:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <sec2_count+0x1>
 1ce:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sec2_count+0x2>
 1d2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sec2_count+0x3>
 1d6:	2a e0       	ldi	r18, 0x0A	; 10
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	ba d1       	rcall	.+884    	; 0x554 <__udivmodsi4>
 1e0:	ca 01       	movw	r24, r20
 1e2:	b9 01       	movw	r22, r18
 1e4:	26 e0       	ldi	r18, 0x06	; 6
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	b3 d1       	rcall	.+870    	; 0x554 <__udivmodsi4>
 1ee:	fe 01       	movw	r30, r28
 1f0:	e6 0f       	add	r30, r22
 1f2:	f7 1f       	adc	r31, r23
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	85 bb       	out	0x15, r24	; 21
		break;
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <fnd_display2+0xb8>
		
		case 2:
		#if 1 // common 애노드
			FND_DIGIT_PORT = 0x20; // 10000000
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	88 bb       	out	0x18, r24	; 24
		#else // common 캐소드
			FND_DIGIT_PORT = ~0x20; // 01111111
		#endif
			FND_DATA_PORT = 0;
 1fe:	15 ba       	out	0x15, r1	; 21
		break;
 200:	03 c0       	rjmp	.+6      	; 0x208 <fnd_display2+0xb8>
		
		case 3:
		#if 1 // common 애노드
			FND_DIGIT_PORT = 0x10; // 10000000
 202:	80 e1       	ldi	r24, 0x10	; 16
 204:	88 bb       	out	0x18, r24	; 24
		#else // common 캐소드
			FND_DIGIT_PORT = ~0x10; // 01111111
		#endif
			FND_DATA_PORT = 0;
 206:	15 ba       	out	0x15, r1	; 21
		break;
		
	}
	digit_select2++;
	digit_select2 %= 4; // 다음 표시할 자리수 선택
 208:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <digit_select2.1759>
 20c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <digit_select2.1759+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	83 70       	andi	r24, 0x03	; 3
 214:	90 78       	andi	r25, 0x80	; 128
 216:	99 23       	and	r25, r25
 218:	24 f4       	brge	.+8      	; 0x222 <fnd_display2+0xd2>
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	8c 6f       	ori	r24, 0xFC	; 252
 21e:	9f 6f       	ori	r25, 0xFF	; 255
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <digit_select2.1759+0x1>
 226:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <digit_select2.1759>
}
 22a:	2b 96       	adiw	r28, 0x0b	; 11
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <fnd_mode2>:

int fnd_mode2(void)
{
	while(1)
	{
		fnd_display2();
 23c:	89 df       	rcall	.-238    	; 0x150 <fnd_display2>
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <fnd_mode2+0x6>
 246:	00 c0       	rjmp	.+0      	; 0x248 <fnd_mode2+0xc>
 248:	00 00       	nop
		_delay_ms(1);
		ms2_count++;
 24a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ms2_count>
 24e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ms2_count+0x1>
 252:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <ms2_count+0x2>
 256:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <ms2_count+0x3>
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	a1 1d       	adc	r26, r1
 25e:	b1 1d       	adc	r27, r1
		if(ms2_count >= 1000)  // 1000ms --> 1sec
 260:	88 3e       	cpi	r24, 0xE8	; 232
 262:	23 e0       	ldi	r18, 0x03	; 3
 264:	92 07       	cpc	r25, r18
 266:	a1 05       	cpc	r26, r1
 268:	b1 05       	cpc	r27, r1
 26a:	48 f4       	brcc	.+18     	; 0x27e <fnd_mode2+0x42>
{
	while(1)
	{
		fnd_display2();
		_delay_ms(1);
		ms2_count++;
 26c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ms2_count>
 270:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <ms2_count+0x1>
 274:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <ms2_count+0x2>
 278:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <ms2_count+0x3>
 27c:	1b c0       	rjmp	.+54     	; 0x2b4 <fnd_mode2+0x78>
		if(ms2_count >= 1000)  // 1000ms --> 1sec
		{
			ms2_count = 0;
 27e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ms2_count>
 282:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ms2_count+0x1>
 286:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <ms2_count+0x2>
 28a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <ms2_count+0x3>
			sec2_count++;
 28e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sec2_count>
 292:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sec2_count+0x1>
 296:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <sec2_count+0x2>
 29a:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <sec2_count+0x3>
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	a1 1d       	adc	r26, r1
 2a2:	b1 1d       	adc	r27, r1
 2a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <sec2_count>
 2a8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <sec2_count+0x1>
 2ac:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <sec2_count+0x2>
 2b0:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <sec2_count+0x3>
		}
		
		// 버튼이 눌리면 모드 변경을 위해 탈출
		if(get_button(BUTTON0, BUTTON0PIN)) return 0;
 2b4:	64 e0       	ldi	r22, 0x04	; 4
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	09 df       	rcall	.-494    	; 0xd0 <get_button>
 2be:	89 2b       	or	r24, r25
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <fnd_mode2+0x88>
 2c2:	bc cf       	rjmp	.-136    	; 0x23c <fnd_mode2>
		
	}
	
	return 0;
}
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <fnd_display1>:
	}
	digit_select2++;
	digit_select2 %= 4; // 다음 표시할 자리수 선택
}
void fnd_display1(void)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	2b 97       	sbiw	r28, 0x0b	; 11
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
#if 1  // common 애노드
                         // 0     1     2     3     4    5     6     7     8     9     .
	uint8_t fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0x7f};
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	e0 e0       	ldi	r30, 0x00	; 0
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	de 01       	movw	r26, r28
 2e6:	11 96       	adiw	r26, 0x01	; 1
 2e8:	01 90       	ld	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	8a 95       	dec	r24
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <fnd_display1+0x1e>
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
#endif 

	static int digit_select1 = 0; // static를 쓰면 전역 변수처럼 함수가 빠져 나갔다가 다시 들어오더라도 값을 유지
	
	switch(digit_select1)
 2f0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <digit_select1.1769>
 2f4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <digit_select1.1769+0x1>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	91 05       	cpc	r25, r1
 2fc:	01 f1       	breq	.+64     	; 0x33e <fnd_display1+0x74>
 2fe:	1c f4       	brge	.+6      	; 0x306 <fnd_display1+0x3c>
 300:	89 2b       	or	r24, r25
 302:	41 f0       	breq	.+16     	; 0x314 <fnd_display1+0x4a>
 304:	84 c0       	rjmp	.+264    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	91 05       	cpc	r25, r1
 30a:	a9 f1       	breq	.+106    	; 0x376 <fnd_display1+0xac>
 30c:	03 97       	sbiw	r24, 0x03	; 3
 30e:	09 f4       	brne	.+2      	; 0x312 <fnd_display1+0x48>
 310:	63 c0       	rjmp	.+198    	; 0x3d8 <fnd_display1+0x10e>
 312:	7d c0       	rjmp	.+250    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		case 0:
#if 1 // common 애노드
			FND_DIGIT_PORT = 0x80; // 10000000
 314:	80 e8       	ldi	r24, 0x80	; 128
 316:	88 bb       	out	0x18, r24	; 24
#else // common 캐소드
			FND_DIGIT_PORT = ~0x80; // 01111111
#endif
			FND_DATA_PORT = fnd_font[sec1_count % 10]; // 0~9초
 318:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec1_count>
 31c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec1_count+0x1>
 320:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec1_count+0x2>
 324:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec1_count+0x3>
 328:	2a e0       	ldi	r18, 0x0A	; 10
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	11 d1       	rcall	.+546    	; 0x554 <__udivmodsi4>
 332:	fe 01       	movw	r30, r28
 334:	e6 0f       	add	r30, r22
 336:	f7 1f       	adc	r31, r23
 338:	81 81       	ldd	r24, Z+1	; 0x01
 33a:	85 bb       	out	0x15, r24	; 21
			break;
 33c:	68 c0       	rjmp	.+208    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		case 1:
#if 1 // common 애노드
		FND_DIGIT_PORT = 0x40; // 10000000
 33e:	80 e4       	ldi	r24, 0x40	; 64
 340:	88 bb       	out	0x18, r24	; 24
#else // common 캐소드
		FND_DIGIT_PORT = ~0x40; // 01111111
#endif
			FND_DATA_PORT = fnd_font[sec1_count / 10 % 6]; // 10단위초 
 342:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec1_count>
 346:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec1_count+0x1>
 34a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec1_count+0x2>
 34e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec1_count+0x3>
 352:	2a e0       	ldi	r18, 0x0A	; 10
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	fc d0       	rcall	.+504    	; 0x554 <__udivmodsi4>
 35c:	ca 01       	movw	r24, r20
 35e:	b9 01       	movw	r22, r18
 360:	26 e0       	ldi	r18, 0x06	; 6
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	f5 d0       	rcall	.+490    	; 0x554 <__udivmodsi4>
 36a:	fe 01       	movw	r30, r28
 36c:	e6 0f       	add	r30, r22
 36e:	f7 1f       	adc	r31, r23
 370:	81 81       	ldd	r24, Z+1	; 0x01
 372:	85 bb       	out	0x15, r24	; 21
			break;
 374:	4c c0       	rjmp	.+152    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		case 2:
#if 1 // common 애노드
		FND_DIGIT_PORT = 0x20; // 10000000
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	88 bb       	out	0x18, r24	; 24
#else // common 캐소드
		FND_DIGIT_PORT = ~0x20; // 01111111
#endif
			if(sec1_count % 2 == 0)
 37a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec1_count>
 37e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec1_count+0x1>
 382:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec1_count+0x2>
 386:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec1_count+0x3>
 38a:	60 fd       	sbrc	r22, 0
 38c:	13 c0       	rjmp	.+38     	; 0x3b4 <fnd_display1+0xea>
				FND_DATA_PORT = fnd_font[sec1_count / 60 % 10] & 0x7f;// 1단위 분
 38e:	2c e3       	ldi	r18, 0x3C	; 60
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	de d0       	rcall	.+444    	; 0x554 <__udivmodsi4>
 398:	ca 01       	movw	r24, r20
 39a:	b9 01       	movw	r22, r18
 39c:	2a e0       	ldi	r18, 0x0A	; 10
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	d7 d0       	rcall	.+430    	; 0x554 <__udivmodsi4>
 3a6:	fe 01       	movw	r30, r28
 3a8:	e6 0f       	add	r30, r22
 3aa:	f7 1f       	adc	r31, r23
 3ac:	81 81       	ldd	r24, Z+1	; 0x01
 3ae:	8f 77       	andi	r24, 0x7F	; 127
 3b0:	85 bb       	out	0x15, r24	; 21
 3b2:	2d c0       	rjmp	.+90     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			else
				FND_DATA_PORT = fnd_font[sec1_count / 60 % 10];
 3b4:	2c e3       	ldi	r18, 0x3C	; 60
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	cb d0       	rcall	.+406    	; 0x554 <__udivmodsi4>
 3be:	ca 01       	movw	r24, r20
 3c0:	b9 01       	movw	r22, r18
 3c2:	2a e0       	ldi	r18, 0x0A	; 10
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	c4 d0       	rcall	.+392    	; 0x554 <__udivmodsi4>
 3cc:	fe 01       	movw	r30, r28
 3ce:	e6 0f       	add	r30, r22
 3d0:	f7 1f       	adc	r31, r23
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	85 bb       	out	0x15, r24	; 21
 3d6:	1b c0       	rjmp	.+54     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3d8:	80 e1       	ldi	r24, 0x10	; 16
			break;
		case 3:
#if 1 // common 애노드
		FND_DIGIT_PORT = 0x10; // 10000000
 3da:	88 bb       	out	0x18, r24	; 24
 3dc:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec1_count>
#else // common 캐소드
		FND_DIGIT_PORT = ~0x10; // 01111111
#endif
			FND_DATA_PORT = fnd_font[sec1_count / 600 % 6]; // 10단위 분
 3e0:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec1_count+0x1>
 3e4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec1_count+0x2>
 3e8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec1_count+0x3>
 3ec:	28 e5       	ldi	r18, 0x58	; 88
 3ee:	32 e0       	ldi	r19, 0x02	; 2
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	af d0       	rcall	.+350    	; 0x554 <__udivmodsi4>
 3f6:	ca 01       	movw	r24, r20
 3f8:	b9 01       	movw	r22, r18
 3fa:	26 e0       	ldi	r18, 0x06	; 6
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	a8 d0       	rcall	.+336    	; 0x554 <__udivmodsi4>
 404:	fe 01       	movw	r30, r28
 406:	e6 0f       	add	r30, r22
 408:	f7 1f       	adc	r31, r23
 40a:	81 81       	ldd	r24, Z+1	; 0x01
 40c:	85 bb       	out	0x15, r24	; 21
 40e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <digit_select1.1769>
			break;
	}
	digit_select1++;
	digit_select1 %= 4; // 다음 표시할 자리수 선택
 412:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <digit_select1.1769+0x1>
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	83 70       	andi	r24, 0x03	; 3
 41a:	90 78       	andi	r25, 0x80	; 128
 41c:	99 23       	and	r25, r25
 41e:	24 f4       	brge	.+8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	8c 6f       	ori	r24, 0xFC	; 252
 424:	9f 6f       	ori	r25, 0xFF	; 255
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit_select1.1769+0x1>
 42c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <digit_select1.1769>
 430:	2b 96       	adiw	r28, 0x0b	; 11
}
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <fnd_mode1>:
 442:	43 df       	rcall	.-378    	; 0x2ca <fnd_display1>
 444:	8f e9       	ldi	r24, 0x9F	; 159
 446:	9f e0       	ldi	r25, 0x0F	; 15
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <fnd_mode1+0x6>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <fnd_mode1+0xc>
 44e:	00 00       	nop
{
	while(1)
	{
		fnd_display1();
		_delay_ms(1);
		ms1_count++;
 450:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ms1_count>
 454:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ms1_count+0x1>
 458:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <ms1_count+0x2>
 45c:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <ms1_count+0x3>
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	a1 1d       	adc	r26, r1
 464:	b1 1d       	adc	r27, r1
		if(ms1_count >= 1000)  // 1000ms --> 1sec
 466:	88 3e       	cpi	r24, 0xE8	; 232
 468:	23 e0       	ldi	r18, 0x03	; 3
 46a:	92 07       	cpc	r25, r18
 46c:	a1 05       	cpc	r26, r1
 46e:	b1 05       	cpc	r27, r1
 470:	48 f4       	brcc	.+18     	; 0x484 <fnd_mode1+0x42>
{
	while(1)
	{
		fnd_display1();
		_delay_ms(1);
		ms1_count++;
 472:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ms1_count>
 476:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ms1_count+0x1>
 47a:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <ms1_count+0x2>
 47e:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <ms1_count+0x3>
 482:	1b c0       	rjmp	.+54     	; 0x4ba <fnd_mode1+0x78>
		if(ms1_count >= 1000)  // 1000ms --> 1sec
		{
			ms1_count = 0;
 484:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ms1_count>
 488:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ms1_count+0x1>
 48c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ms1_count+0x2>
 490:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ms1_count+0x3>
			sec1_count++;
 494:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec1_count>
 498:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec1_count+0x1>
 49c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <sec1_count+0x2>
 4a0:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <sec1_count+0x3>
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	a1 1d       	adc	r26, r1
 4a8:	b1 1d       	adc	r27, r1
 4aa:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <sec1_count>
 4ae:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <sec1_count+0x1>
 4b2:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <sec1_count+0x2>
 4b6:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <sec1_count+0x3>
		}
		
		// 1분 33초가 되었을 때 리셋
		if (sec1_count == 93) {
 4ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec1_count>
 4be:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec1_count+0x1>
 4c2:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <sec1_count+0x2>
 4c6:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <sec1_count+0x3>
 4ca:	8d 35       	cpi	r24, 0x5D	; 93
 4cc:	91 05       	cpc	r25, r1
 4ce:	a1 05       	cpc	r26, r1
 4d0:	b1 05       	cpc	r27, r1
 4d2:	81 f4       	brne	.+32     	; 0x4f4 <fnd_mode1+0xb2>
			sec1_count = 0;  // 리셋
 4d4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <sec1_count>
 4d8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <sec1_count+0x1>
 4dc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <sec1_count+0x2>
 4e0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <sec1_count+0x3>
			ms1_count = 0;   // 밀리초 카운터도 리셋
 4e4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ms1_count>
 4e8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ms1_count+0x1>
 4ec:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ms1_count+0x2>
 4f0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ms1_count+0x3>
		}
		
		// 버튼이 눌리면 모드 변경을 위해 탈출
		if(get_button(BUTTON0, BUTTON0PIN)) return 0;
 4f4:	64 e0       	ldi	r22, 0x04	; 4
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	e9 dd       	rcall	.-1070   	; 0xd0 <get_button>
 4fe:	89 2b       	or	r24, r25
 500:	09 f4       	brne	.+2      	; 0x504 <fnd_mode1+0xc2>
 502:	9f cf       	rjmp	.-194    	; 0x442 <fnd_mode1>
	}
	
	return 0;
}
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	08 95       	ret

0000050a <init_fnd>:
	digit_select1 %= 4; // 다음 표시할 자리수 선택
}

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력 모드로 설정
 50a:	9f ef       	ldi	r25, 0xFF	; 255
 50c:	94 bb       	out	0x14, r25	; 20
	// FND_DIGIT_DDR |= 0xf0; // 자리수 선택 7654
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;
 50e:	87 b3       	in	r24, 0x17	; 23
 510:	80 6f       	ori	r24, 0xF0	; 240
 512:	87 bb       	out	0x17, r24	; 23
	
	// fnd를 all off
#if 1 // common 애노드
	FND_DATA_PORT = ~0x00; // fnd를 all off 0xff;
 514:	95 bb       	out	0x15, r25	; 21
 516:	08 95       	ret

00000518 <main>:

// none O/S 또는 loop monitor방식
int main(void)
{
	int button0_state = 0;  // 초기 상태를 0으로 출발
	init_fnd();
 518:	f8 df       	rcall	.-16     	; 0x50a <init_fnd>
	
	//int button1_state = 0;
	//int button2_state = 0;
	//int button3_state = 0;
	//int button_state[4] =0
	init_button();
 51a:	d6 dd       	rcall	.-1108   	; 0xc8 <init_button>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
	// led_main();
	       //76543210
    DDRA = 0b11111111; // PORTA를 출력 모드(1)로 설정
 51e:	8a bb       	out	0x1a, r24	; 26
 520:	00 e0       	ldi	r16, 0x00	; 0
#include <util/delay.h> // _delay_ms _delay_us

// none O/S 또는 loop monitor방식
int main(void)
{
	int button0_state = 0;  // 초기 상태를 0으로 출발
 522:	10 e0       	ldi	r17, 0x00	; 0
 524:	ff 24       	eor	r15, r15
#if 1 // 버튼 제어
while(1)
{
	if(get_button(BUTTON0, BUTTON0PIN))
	{
		button0_state = !button0_state;
 526:	f3 94       	inc	r15
 528:	e1 2c       	mov	r14, r1
 52a:	01 c0       	rjmp	.+2      	; 0x52e <main+0x16>
 52c:	8e 01       	movw	r16, r28
#include <avr/io.h>
#include <util/delay.h> // _delay_ms _delay_us

// none O/S 또는 loop monitor방식
int main(void)
{
 52e:	64 e0       	ldi	r22, 0x04	; 4
					   // 0x : hex
					   // DDRA = 0xff;
#if 1 // 버튼 제어
while(1)
{
	if(get_button(BUTTON0, BUTTON0PIN))
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	cc dd       	rcall	.-1128   	; 0xd0 <get_button>
 538:	89 2b       	or	r24, r25
 53a:	c9 f3       	breq	.-14     	; 0x52e <main+0x16>
 53c:	cf 2d       	mov	r28, r15
	{
		button0_state = !button0_state;
 53e:	01 15       	cp	r16, r1
 540:	11 05       	cpc	r17, r1
 542:	09 f0       	breq	.+2      	; 0x546 <main+0x2e>
 544:	ce 2d       	mov	r28, r14
 546:	d0 e0       	ldi	r29, 0x00	; 0
	
		if(button0_state)
 548:	01 2b       	or	r16, r17
			fnd_mode1();
 54a:	11 f4       	brne	.+4      	; 0x550 <main+0x38>
 54c:	7a df       	rcall	.-268    	; 0x442 <fnd_mode1>
 54e:	ee cf       	rjmp	.-36     	; 0x52c <main+0x14>
		else
			fnd_mode2();
 550:	75 de       	rcall	.-790    	; 0x23c <fnd_mode2>
 552:	ec cf       	rjmp	.-40     	; 0x52c <main+0x14>

00000554 <__udivmodsi4>:
 554:	a1 e2       	ldi	r26, 0x21	; 33
 556:	1a 2e       	mov	r1, r26
 558:	aa 1b       	sub	r26, r26
 55a:	bb 1b       	sub	r27, r27
 55c:	fd 01       	movw	r30, r26
 55e:	0d c0       	rjmp	.+26     	; 0x57a <__udivmodsi4_ep>

00000560 <__udivmodsi4_loop>:
 560:	aa 1f       	adc	r26, r26
 562:	bb 1f       	adc	r27, r27
 564:	ee 1f       	adc	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	a2 17       	cp	r26, r18
 56a:	b3 07       	cpc	r27, r19
 56c:	e4 07       	cpc	r30, r20
 56e:	f5 07       	cpc	r31, r21
 570:	20 f0       	brcs	.+8      	; 0x57a <__udivmodsi4_ep>
 572:	a2 1b       	sub	r26, r18
 574:	b3 0b       	sbc	r27, r19
 576:	e4 0b       	sbc	r30, r20
 578:	f5 0b       	sbc	r31, r21

0000057a <__udivmodsi4_ep>:
 57a:	66 1f       	adc	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	1a 94       	dec	r1
 584:	69 f7       	brne	.-38     	; 0x560 <__udivmodsi4_loop>
 586:	60 95       	com	r22
 588:	70 95       	com	r23
 58a:	80 95       	com	r24
 58c:	90 95       	com	r25
 58e:	9b 01       	movw	r18, r22
 590:	ac 01       	movw	r20, r24
 592:	bd 01       	movw	r22, r26
 594:	cf 01       	movw	r24, r30
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
