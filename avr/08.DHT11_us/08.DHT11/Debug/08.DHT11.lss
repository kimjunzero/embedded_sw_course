
08.DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00000fee  00001082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d8  00800200  00800200  00001182  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018c8  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e37  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2a  00000000  00000000  00003a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00004634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000644  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8f  00000000  00000000  00004eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000597b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d8 c2       	rjmp	.+1456   	; 0x5c6 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	b7 c2       	rjmp	.+1390   	; 0x598 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e0 c1       	rjmp	.+960    	; 0x402 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c2       	rjmp	.+1066   	; 0x474 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ee       	ldi	r30, 0xEE	; 238
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 3d       	cpi	r26, 0xD8	; 216
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ca d1       	rcall	.+916    	; 0x458 <main>
  c4:	92 c7       	rjmp	.+3876   	; 0xfea <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_dht11>:

char * error_log = " ";

void init_dht11(void)
{
	DHT_DDR |= 1 << DHT_PIN_NUM;
  c8:	e4 e6       	ldi	r30, 0x64	; 100
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
	DHT_PORT |= 1 << DHT_PIN_NUM; // idle상태가 HIHG임
  d2:	e5 e6       	ldi	r30, 0x65	; 101
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <signal_us_check>:
}

void signal_us_check(int duration, int binary_choice)
{
  de:	dc 01       	movw	r26, r24
	us_count = 0;
  e0:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <us_count>
	while(((DHT_PIN & 1 << DHT_PIN_NUM) >> DHT_PIN_NUM) == binary_choice)
  e4:	e3 e6       	ldi	r30, 0x63	; 99
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	11 c0       	rjmp	.+34     	; 0x10c <signal_us_check+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <signal_us_check+0xe>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <signal_us_check+0x14>
	{
		_delay_us(2);
		us_count += 2;
  f2:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <us_count>
  f6:	2e 5f       	subi	r18, 0xFE	; 254
  f8:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <us_count>
		if(us_count > duration)
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	a2 17       	cp	r26, r18
 100:	b3 07       	cpc	r27, r19
 102:	24 f4       	brge	.+8      	; 0x10c <signal_us_check+0x2e>
		{
			state = TIMEOUT;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
			return;
 10a:	08 95       	ret
}

void signal_us_check(int duration, int binary_choice)
{
	us_count = 0;
	while(((DHT_PIN & 1 << DHT_PIN_NUM) >> DHT_PIN_NUM) == binary_choice)
 10c:	90 81       	ld	r25, Z
 10e:	49 2f       	mov	r20, r25
 110:	41 70       	andi	r20, 0x01	; 1
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	46 17       	cp	r20, r22
 116:	57 07       	cpc	r21, r23
 118:	41 f3       	breq	.-48     	; 0xea <signal_us_check+0xc>
 11a:	08 95       	ret

0000011c <dht11_get_bit>:
	}
}

int dht11_get_bit(void)
{
	us_count = 0;
 11c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <us_count>
	while((DHT_PIN & 1 << DHT_PIN_NUM) >> DHT_PIN_NUM)
 120:	e3 e6       	ldi	r30, 0x63	; 99
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	11 c0       	rjmp	.+34     	; 0x148 <dht11_get_bit+0x2c>
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <dht11_get_bit+0xc>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <dht11_get_bit+0x12>
	{
		_delay_us(2);
		us_count += 2;
 12e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <us_count>
 132:	8e 5f       	subi	r24, 0xFE	; 254
 134:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <us_count>
		if(us_count > 90)
 138:	8b 35       	cpi	r24, 0x5B	; 91
 13a:	30 f0       	brcs	.+12     	; 0x148 <dht11_get_bit+0x2c>
		{
			state = TIMEOUT;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
			return -1;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	9f ef       	ldi	r25, 0xFF	; 255
 146:	08 95       	ret
}

int dht11_get_bit(void)
{
	us_count = 0;
	while((DHT_PIN & 1 << DHT_PIN_NUM) >> DHT_PIN_NUM)
 148:	80 81       	ld	r24, Z
 14a:	80 fd       	sbrc	r24, 0
 14c:	ec cf       	rjmp	.-40     	; 0x126 <dht11_get_bit+0xa>
		_delay_us(2);
		us_count += 2;
		if(us_count > 90)
		{
			state = TIMEOUT;
			return -1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <us_count>
 156:	28 32       	cpi	r18, 0x28	; 40
 158:	08 f4       	brcc	.+2      	; 0x15c <dht11_get_bit+0x40>
 15a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	if(us_count < 40) return 0;
	else if(us_count >= 40) return 1;
}
 15c:	08 95       	ret

0000015e <dht11_main2>:

void dht11_main2(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	2d 97       	sbiw	r28, 0x0d	; 13
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[5] = {0,}; // 온습도 데이터 5바이트를 저장할 공간
 172:	fe 01       	movw	r30, r28
 174:	31 96       	adiw	r30, 0x01	; 1
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	df 01       	movw	r26, r30
 17a:	1d 92       	st	X+, r1
 17c:	8a 95       	dec	r24
 17e:	e9 f7       	brne	.-6      	; 0x17a <dht11_main2+0x1c>
	init_dht11();
 180:	a3 df       	rcall	.-186    	; 0xc8 <init_dht11>
	
	while(1)
	{
		_delay_ms(1000);
		
		memset(data, 0, sizeof(data)); // data 초기화
 182:	fe 01       	movw	r30, r28
 184:	31 96       	adiw	r30, 0x01	; 1
 186:	3f 01       	movw	r6, r30
		// '0' : LOW 50us, HIGH 26~28us
		// '1' : LOW 50us, HIGH 70us

		for(int i = 0; i<5; i++)
		{
			uint8_t pulse[8] = {0,}; // 1개의 pulse를 저장할 변수 (8비트 저장)
 188:	6e 01       	movw	r12, r28
 18a:	f6 e0       	ldi	r31, 0x06	; 6
 18c:	cf 0e       	add	r12, r31
 18e:	d1 1c       	adc	r13, r1
			if(state == OK)
			{
				data[i] = pulse[0] << 0 | pulse[1] << 1 | pulse[2] << 2 | pulse[3] << 3 |
							pulse[4] << 4 | pulse[5] << 5 | pulse[6] << 6 | pulse[7] << 7;
			}else{
				error_log = "get bit fail";
 190:	0f 2e       	mov	r0, r31
 192:	f6 ea       	ldi	r31, 0xA6	; 166
 194:	4f 2e       	mov	r4, r31
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	5f 2e       	mov	r5, r31
 19a:	f0 2d       	mov	r31, r0
					
				// state 확인 필수!
				// HIGH가 몇 us인지 확인
				int dht11_bit = dht11_get_bit();
				if(state == OK) pulse[j] = dht11_bit;
				else error_log = "get bit, high faile";
 19c:	0f 2e       	mov	r0, r31
 19e:	f2 e9       	ldi	r31, 0x92	; 146
 1a0:	af 2e       	mov	r10, r31
 1a2:	f1 e0       	ldi	r31, 0x01	; 1
 1a4:	bf 2e       	mov	r11, r31
 1a6:	f0 2d       	mov	r31, r0
				signal_us_check(70, LOW);
				if(state == TIMEOUT)
				{
					i = 5;
					j = -1;
					error_log = "get bit, 50us low check fail";
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f5 e7       	ldi	r31, 0x75	; 117
 1ac:	8f 2e       	mov	r8, r31
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	9f 2e       	mov	r9, r31
 1b2:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	33 ed       	ldi	r19, 0xD3	; 211
 1b8:	50 e3       	ldi	r21, 0x30	; 48
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	50 40       	sbci	r21, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <dht11_main2+0x5c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <dht11_main2+0x66>
 1c4:	00 00       	nop
	
	while(1)
	{
		_delay_ms(1000);
		
		memset(data, 0, sizeof(data)); // data 초기화
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	d3 01       	movw	r26, r6
 1ca:	1d 92       	st	X+, r1
 1cc:	8a 95       	dec	r24
 1ce:	e9 f7       	brne	.-6      	; 0x1ca <dht11_main2+0x6c>
		state = OK;
 1d0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_end>
		
		// ================ step 1 : start signal ======================
		// idel상태인 HIGH를 100ms 유지 -> 이 후 LOW로 바꾸어 준다.
		init_dht11();
 1d4:	79 df       	rcall	.-270    	; 0xc8 <init_dht11>
 1d6:	bf ef       	ldi	r27, 0xFF	; 255
 1d8:	e1 ee       	ldi	r30, 0xE1	; 225
 1da:	f4 e0       	ldi	r31, 0x04	; 4
 1dc:	b1 50       	subi	r27, 0x01	; 1
 1de:	e0 40       	sbci	r30, 0x00	; 0
 1e0:	f0 40       	sbci	r31, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <dht11_main2+0x7e>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <dht11_main2+0x88>
 1e6:	00 00       	nop
		_delay_ms(100);
		
		DHT_PORT &= ~(1 << DHT_PIN_NUM);
 1e8:	e5 e6       	ldi	r30, 0x65	; 101
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	80 83       	st	Z, r24
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	39 ef       	ldi	r19, 0xF9	; 249
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	30 40       	sbci	r19, 0x00	; 0
 1fc:	50 40       	sbci	r21, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <dht11_main2+0x9a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <dht11_main2+0xa4>
 202:	00 00       	nop
		_delay_ms(20); // LOW상태를 최소 18ms 유지해야함
		
		DHT_PORT |= 1 << DHT_PIN_NUM; // start signal을 보낸 다음에는 HIGH로 유지해야함
 204:	80 81       	ld	r24, Z
 206:	81 60       	ori	r24, 0x01	; 1
 208:	80 83       	st	Z, r24
		DHT_DDR &= ~(1 << DHT_PIN_NUM); // input모드로 변경
 20a:	e4 e6       	ldi	r30, 0x64	; 100
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <dht11_main2+0xb8>
 21a:	00 00       	nop
		_delay_us(1);
		
		// response signal check
		signal_us_check(50, HIGH);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	82 e3       	ldi	r24, 0x32	; 50
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	5c df       	rcall	.-328    	; 0xde <signal_us_check>
		
		if(state != OK)
 226:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 22a:	88 23       	and	r24, r24
 22c:	39 f0       	breq	.+14     	; 0x23c <dht11_main2+0xde>
		{
			error_log = "response signal check faile";
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 236:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			continue;
 23a:	bc cf       	rjmp	.-136    	; 0x1b4 <dht11_main2+0x56>
		}
		// ============= step 2 : response signal check =============
		// step 2 실행 (정상적으로 DATA pin에 LOW가 감지된것)
		signal_us_check(100, LOW);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	84 e6       	ldi	r24, 0x64	; 100
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	4c df       	rcall	.-360    	; 0xde <signal_us_check>
		
		if(state != OK)
 246:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 24a:	88 23       	and	r24, r24
 24c:	39 f0       	breq	.+14     	; 0x25c <dht11_main2+0xfe>
		{
			error_log = "step 2, response signal low check faile";
 24e:	8c e2       	ldi	r24, 0x2C	; 44
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			continue;
 25a:	ac cf       	rjmp	.-168    	; 0x1b4 <dht11_main2+0x56>
		}
		
		// response high 체크
		// LOW가 80us 정도 유지되고 (그니까 100us이내에) 잘 HIGH를 유지했는지 확인
		signal_us_check(100, HIGH);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	84 e6       	ldi	r24, 0x64	; 100
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	3c df       	rcall	.-392    	; 0xde <signal_us_check>
		
		if(state != OK)
 266:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 26a:	88 23       	and	r24, r24
 26c:	39 f0       	breq	.+14     	; 0x27c <dht11_main2+0x11e>
		{
			error_log = "step2, response signal high fail";
 26e:	84 e5       	ldi	r24, 0x54	; 84
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 276:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			continue;
 27a:	9c cf       	rjmp	.-200    	; 0x1b4 <dht11_main2+0x56>
 27c:	e1 2c       	mov	r14, r1
 27e:	f1 2c       	mov	r15, r1
		// '0' : LOW 50us, HIGH 26~28us
		// '1' : LOW 50us, HIGH 70us

		for(int i = 0; i<5; i++)
		{
			uint8_t pulse[8] = {0,}; // 1개의 pulse를 저장할 변수 (8비트 저장)
 280:	68 94       	set
 282:	33 24       	eor	r3, r3
 284:	33 f8       	bld	r3, 3
 286:	d6 01       	movw	r26, r12
 288:	e3 2d       	mov	r30, r3
 28a:	1d 92       	st	X+, r1
 28c:	ea 95       	dec	r30
 28e:	e9 f7       	brne	.-6      	; 0x28a <dht11_main2+0x12c>
			for(int j = 7; j >=0; j--)
 290:	07 e0       	ldi	r16, 0x07	; 7
			{
				// LOW 50us 확인
				signal_us_check(70, LOW);
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	86 e4       	ldi	r24, 0x46	; 70
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	20 df       	rcall	.-448    	; 0xde <signal_us_check>
				if(state == TIMEOUT)
 29e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	59 f4       	brne	.+22     	; 0x2bc <dht11_main2+0x15e>
				{
					i = 5;
					j = -1;
					error_log = "get bit, 50us low check fail";
 2a6:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__data_start+0x1>
 2aa:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_start>
				// LOW 50us 확인
				signal_us_check(70, LOW);
				if(state == TIMEOUT)
				{
					i = 5;
					j = -1;
 2ae:	0f ef       	ldi	r16, 0xFF	; 255
			{
				// LOW 50us 확인
				signal_us_check(70, LOW);
				if(state == TIMEOUT)
				{
					i = 5;
 2b0:	1f ef       	ldi	r17, 0xFF	; 255
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f5 e0       	ldi	r31, 0x05	; 5
 2b6:	ef 2e       	mov	r14, r31
 2b8:	f1 2c       	mov	r15, r1
					error_log = "get bit, 50us low check fail";
				}
					
				// state 확인 필수!
				// HIGH가 몇 us인지 확인
				int dht11_bit = dht11_get_bit();
 2ba:	f0 2d       	mov	r31, r0
 2bc:	2f df       	rcall	.-418    	; 0x11c <dht11_get_bit>
				if(state == OK) pulse[j] = dht11_bit;
 2be:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_end>
 2c2:	91 11       	cpse	r25, r1
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <dht11_main2+0x172>
 2c6:	f6 01       	movw	r30, r12
 2c8:	e0 0f       	add	r30, r16
 2ca:	f1 1f       	adc	r31, r17
 2cc:	80 83       	st	Z, r24
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <dht11_main2+0x17a>
				else error_log = "get bit, high faile";
 2d0:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
 2d4:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
		// '1' : LOW 50us, HIGH 70us

		for(int i = 0; i<5; i++)
		{
			uint8_t pulse[8] = {0,}; // 1개의 pulse를 저장할 변수 (8비트 저장)
			for(int j = 7; j >=0; j--)
 2d8:	01 50       	subi	r16, 0x01	; 1
 2da:	11 09       	sbc	r17, r1
 2dc:	da f6       	brpl	.-74     	; 0x294 <dht11_main2+0x136>
				int dht11_bit = dht11_get_bit();
				if(state == OK) pulse[j] = dht11_bit;
				else error_log = "get bit, high faile";
			}	
			// pulse를 가지고 data로 넣어주기!
			if(state == OK)
 2de:	91 11       	cpse	r25, r1
 2e0:	2d c0       	rjmp	.+90     	; 0x33c <dht11_main2+0x1de>
			{
				data[i] = pulse[0] << 0 | pulse[1] << 1 | pulse[2] << 2 | pulse[3] << 3 |
 2e2:	f3 01       	movw	r30, r6
 2e4:	ee 0d       	add	r30, r14
 2e6:	ff 1d       	adc	r31, r15
 2e8:	2f 81       	ldd	r18, Y+7	; 0x07
 2ea:	32 2f       	mov	r19, r18
 2ec:	33 0f       	add	r19, r19
 2ee:	28 85       	ldd	r18, Y+8	; 0x08
 2f0:	22 0f       	add	r18, r18
 2f2:	22 0f       	add	r18, r18
 2f4:	23 2b       	or	r18, r19
 2f6:	3e 81       	ldd	r19, Y+6	; 0x06
 2f8:	82 2f       	mov	r24, r18
 2fa:	83 2b       	or	r24, r19
 2fc:	49 85       	ldd	r20, Y+9	; 0x09
 2fe:	44 0f       	add	r20, r20
 300:	44 0f       	add	r20, r20
 302:	44 0f       	add	r20, r20
 304:	24 2f       	mov	r18, r20
 306:	28 2b       	or	r18, r24
 308:	8a 85       	ldd	r24, Y+10	; 0x0a
 30a:	30 e1       	ldi	r19, 0x10	; 16
 30c:	83 9f       	mul	r24, r19
 30e:	a0 01       	movw	r20, r0
 310:	11 24       	eor	r1, r1
 312:	42 2b       	or	r20, r18
 314:	8b 85       	ldd	r24, Y+11	; 0x0b
 316:	50 e2       	ldi	r21, 0x20	; 32
 318:	85 9f       	mul	r24, r21
 31a:	90 01       	movw	r18, r0
 31c:	11 24       	eor	r1, r1
 31e:	24 2b       	or	r18, r20
 320:	8c 85       	ldd	r24, Y+12	; 0x0c
 322:	a0 e4       	ldi	r26, 0x40	; 64
 324:	8a 9f       	mul	r24, r26
 326:	a0 01       	movw	r20, r0
 328:	11 24       	eor	r1, r1
 32a:	42 2b       	or	r20, r18
 32c:	8d 85       	ldd	r24, Y+13	; 0x0d
 32e:	b0 e8       	ldi	r27, 0x80	; 128
 330:	8b 9f       	mul	r24, r27
 332:	90 01       	movw	r18, r0
 334:	11 24       	eor	r1, r1
 336:	24 2b       	or	r18, r20
 338:	20 83       	st	Z, r18
 33a:	04 c0       	rjmp	.+8      	; 0x344 <dht11_main2+0x1e6>
							pulse[4] << 4 | pulse[5] << 5 | pulse[6] << 6 | pulse[7] << 7;
			}else{
				error_log = "get bit fail";
 33c:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__data_start+0x1>
 340:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__data_start>
		// 40개의 pulse를 count 한다
		// -> 8비트식 한 바이트를 이루어 의미를 띄므로, 8비트씩 묶어야함
		// '0' : LOW 50us, HIGH 26~28us
		// '1' : LOW 50us, HIGH 70us

		for(int i = 0; i<5; i++)
 344:	ef ef       	ldi	r30, 0xFF	; 255
 346:	ee 1a       	sub	r14, r30
 348:	fe 0a       	sbc	r15, r30
 34a:	f5 e0       	ldi	r31, 0x05	; 5
 34c:	ef 16       	cp	r14, r31
 34e:	f1 04       	cpc	r15, r1
 350:	0c f4       	brge	.+2      	; 0x354 <dht11_main2+0x1f6>
 352:	99 cf       	rjmp	.-206    	; 0x286 <dht11_main2+0x128>
			}
		}
			
		// 5바이트 다 받아옴
		// check sum 확인!!
		if(state == OK)
 354:	91 11       	cpse	r25, r1
 356:	14 c0       	rjmp	.+40     	; 0x380 <dht11_main2+0x222>
		{
			if(data[4] != data[0] + data[1] + data[2] + data[3])
 358:	2d 81       	ldd	r18, Y+5	; 0x05
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	49 81       	ldd	r20, Y+1	; 0x01
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	84 0f       	add	r24, r20
 364:	91 1d       	adc	r25, r1
 366:	4b 81       	ldd	r20, Y+3	; 0x03
 368:	84 0f       	add	r24, r20
 36a:	91 1d       	adc	r25, r1
 36c:	4c 81       	ldd	r20, Y+4	; 0x04
 36e:	84 0f       	add	r24, r20
 370:	91 1d       	adc	r25, r1
 372:	28 17       	cp	r18, r24
 374:	39 07       	cpc	r19, r25
 376:	51 f0       	breq	.+20     	; 0x38c <dht11_main2+0x22e>
			{
				// check sum이 맞지 않는 상황
				state = VALUE_ERROR;
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
 37e:	06 c0       	rjmp	.+12     	; 0x38c <dht11_main2+0x22e>
			}
		}else{
			error_log = "get bit faile 2";
 380:	83 eb       	ldi	r24, 0xB3	; 179
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 388:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 38c:	8f ee       	ldi	r24, 0xEF	; 239
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <dht11_main2+0x232>
 394:	00 c0       	rjmp	.+0      	; 0x396 <dht11_main2+0x238>
 396:	00 00       	nop
		}
		_delay_us(60); // 제일 마지막 단계!! 50us LOW상태 유지
			
		
		// 값 출력
		if(state == OK)
 398:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 39c:	81 11       	cpse	r24, r1
 39e:	1c c0       	rjmp	.+56     	; 0x3d8 <dht11_main2+0x27a>
		{
			printf("temp : %d.%d\n", data[2], data[3]);
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	1f 92       	push	r1
 3a4:	8f 93       	push	r24
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	1f 92       	push	r1
 3aa:	8f 93       	push	r24
 3ac:	83 ec       	ldi	r24, 0xC3	; 195
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	9f 93       	push	r25
 3b2:	8f 93       	push	r24
 3b4:	2c d3       	rcall	.+1624   	; 0xa0e <printf>
			printf("humidity : %d.%d\n", data[0], data[1]);
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	1f 92       	push	r1
 3ba:	8f 93       	push	r24
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	1f 92       	push	r1
 3c0:	8f 93       	push	r24
 3c2:	81 ed       	ldi	r24, 0xD1	; 209
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	21 d3       	rcall	.+1602   	; 0xa0e <printf>
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
		}else
		{
			printf("ERROR : %d\n", state);
 3d6:	0b c0       	rjmp	.+22     	; 0x3ee <dht11_main2+0x290>
 3d8:	1f 92       	push	r1
 3da:	8f 93       	push	r24
 3dc:	83 ee       	ldi	r24, 0xE3	; 227
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	9f 93       	push	r25
 3e2:	8f 93       	push	r24
 3e4:	14 d3       	rcall	.+1576   	; 0xa0e <printf>
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	bf ef       	ldi	r27, 0xFF	; 255
 3f0:	e3 ed       	ldi	r30, 0xD3	; 211
 3f2:	f0 e3       	ldi	r31, 0x30	; 48
 3f4:	b1 50       	subi	r27, 0x01	; 1
 3f6:	e0 40       	sbci	r30, 0x00	; 0
 3f8:	f0 40       	sbci	r31, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <dht11_main2+0x296>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <dht11_main2+0x2a0>
 3fe:	00 00       	nop
 400:	d9 ce       	rjmp	.-590    	; 0x1b4 <dht11_main2+0x56>

00000402 <__vector_16>:

FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

// interrupt service routine은 반드시 main함수 이전에 정의한다.
ISR(TIMER0_OVF_vect)
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
	TCNT0 = 6; // 6 ~ 256으로 돌리기 위해
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	82 bf       	out	0x32, r24	; 50
	msec_count++;
 414:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <msec_count>
 418:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <msec_count+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <msec_count+0x1>
 422:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <msec_count>

	ultrasonic_check_timer++; // 초음파센서에 활용할 타이머!
 426:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ultrasonic_check_timer>
 42a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <ultrasonic_check_timer+0x1>
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ultrasonic_check_timer+0x1>
 434:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ultrasonic_check_timer>
}
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <init_timer0>:
	// 8bit timer overflow 발생 시 소요시간 = 0.004ms * 256 = 1.024ms = 0.001024sec
	//	-> interrupt를 정확하게 1ms마다 오게 하고싶으면, 
	//    사용자 지정으로 256이 아니라 250클록마다 인터럽트가 생기도록
	
	// TCMT0 초기값 설정
	TCNT0 = 6; // 정확히 1ms를 세기 위해 초기값을 0이 아니라 6으로 해준다. (250 펄스 이후에 인터럽트)
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	82 bf       	out	0x32, r24	; 50
	
	// 분주비 설정 (64)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
 44a:	83 b7       	in	r24, 0x33	; 51
 44c:	84 60       	ori	r24, 0x04	; 4
 44e:	83 bf       	out	0x33, r24	; 51
	
	// timer overflow interrupt 허용 (TIMER0 OVF)
	TIMSK |= 1 << TOIE0;	// 지역 인터럽트 허용
 450:	87 b7       	in	r24, 0x37	; 55
 452:	81 60       	ori	r24, 0x01	; 1
 454:	87 bf       	out	0x37, r24	; 55
 456:	08 95       	ret

00000458 <main>:



int main(void)
{
	init_timer0();
 458:	f6 df       	rcall	.-20     	; 0x446 <init_timer0>
	init_uart0();
 45a:	84 d0       	rcall	.+264    	; 0x564 <init_uart0>
	init_ultrasonic();
 45c:	13 d1       	rcall	.+550    	; 0x684 <init_ultrasonic>
 45e:	82 e0       	ldi	r24, 0x02	; 2
	stdout = &OUTPUT;	
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <__iob+0x3>
 466:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <__iob+0x2>
	sei();				
 46a:	78 94       	sei

	dht11_main2();
 46c:	78 de       	rcall	.-784    	; 0x15e <dht11_main2>
 46e:	80 e0       	ldi	r24, 0x00	; 0
	

	return 0;
}
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	08 95       	ret

00000474 <__vector_18>:
 474:	1f 92       	push	r1
PC omportmaster로 부터 1byte가 들어오면 (즉, stop bit가 감지되면) RX complete인터럽트가 호출된다
== 한 바이트마다 인터럽트 처리를 해야하는것!
*/

ISR(USART0_RX_vect)
{
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	0b b6       	in	r0, 0x3b	; 59
 480:	0f 92       	push	r0
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	1f 92       	push	r1
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t rx_data;
	volatile static int i = 0;	// buffer의 index
	
	rx_data = UDR0; // uart0 하드웨어로 들어온 문자 읽어오기
 4a4:	8c b1       	in	r24, 0x0c	; 12
 4a6:	89 83       	std	Y+1, r24	; 0x01
					// 이렇게 assign연산자로 UDR0값을 읽어오는 순간, UDR0는 empty가됨 (자동)
	
	if(rx_data == '\n')
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	8a 30       	cpi	r24, 0x0A	; 10
 4ac:	49 f5       	brne	.+82     	; 0x500 <__vector_18+0x8c>
	{
		rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
 4ae:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <rear>
 4b2:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <rear+0x1>
 4b6:	c9 01       	movw	r24, r18
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <rear+0x1>
 4be:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <rear>
 4c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <i.2079>
 4c6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <i.2079+0x1>
 4ca:	48 e2       	ldi	r20, 0x28	; 40
 4cc:	42 9f       	mul	r20, r18
 4ce:	f0 01       	movw	r30, r0
 4d0:	43 9f       	mul	r20, r19
 4d2:	f0 0d       	add	r31, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	e2 5f       	subi	r30, 0xF2	; 242
 4d8:	fd 4f       	sbci	r31, 0xFD	; 253
 4da:	e8 0f       	add	r30, r24
 4dc:	f9 1f       	adc	r31, r25
 4de:	10 82       	st	Z, r1
		rear %= COMMAND_NUMBER; // 원형큐
 4e0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <rear>
 4e4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <rear+0x1>
 4e8:	6a e0       	ldi	r22, 0x0A	; 10
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	69 d2       	rcall	.+1234   	; 0x9c0 <__divmodhi4>
 4ee:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <rear+0x1>
 4f2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <rear>
		i = 0; // 새로오는건 버퍼에 새롭게 채워야함 (다른 메시지니까!)
 4f6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <i.2079+0x1>
 4fa:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <i.2079>
 4fe:	1c c0       	rjmp	.+56     	; 0x538 <__vector_18+0xc4>
		// 큐 full 여부 확인
	}
	else
	{
		// 그냥 버퍼에 넣기 (push)
		rx_buff[rear][i++] = rx_data;
 500:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <rear>
 504:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <rear+0x1>
 508:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <i.2079>
 50c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <i.2079+0x1>
 510:	9c 01       	movw	r18, r24
 512:	2f 5f       	subi	r18, 0xFF	; 255
 514:	3f 4f       	sbci	r19, 0xFF	; 255
 516:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <i.2079+0x1>
 51a:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <i.2079>
 51e:	49 81       	ldd	r20, Y+1	; 0x01
 520:	58 e2       	ldi	r21, 0x28	; 40
 522:	56 9f       	mul	r21, r22
 524:	90 01       	movw	r18, r0
 526:	57 9f       	mul	r21, r23
 528:	30 0d       	add	r19, r0
 52a:	11 24       	eor	r1, r1
 52c:	22 5f       	subi	r18, 0xF2	; 242
 52e:	3d 4f       	sbci	r19, 0xFD	; 253
 530:	f9 01       	movw	r30, r18
 532:	e8 0f       	add	r30, r24
 534:	f9 1f       	adc	r31, r25
 536:	40 83       	st	Z, r20
		// command length 확인
	}
}
 538:	0f 90       	pop	r0
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0b be       	out	0x3b, r0	; 59
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <init_uart0>:

*/
void init_uart0(void)
{
	// 전송속도 설정
	UBRR0H = 0x00;
 564:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; // 2배속 모드임
 568:	8f ec       	ldi	r24, 0xCF	; 207
 56a:	89 b9       	out	0x09, r24	; 9
	//UBRR0L = 16;
	//UBRR0L = 832;
	
	UCSR0A |= 1 << U2X0; // 2배속 통신
 56c:	59 9a       	sbi	0x0b, 1	; 11
	
	UCSR0C |= 0x06; // 비동기, none 8bit, data 8 bit
 56e:	e5 e9       	ldi	r30, 0x95	; 149
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	86 60       	ori	r24, 0x06	; 6
 576:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	//UCSR0B |= 1 << RXEN0; // 수신 허용
	//UCSR0B |= 1 << TXEN0; // 송신 허용
	//UCSR0B |= 1 << RXCIE0; // 수신 인터럽트 허용
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 578:	8a b1       	in	r24, 0x0a	; 10
 57a:	88 69       	ori	r24, 0x98	; 152
 57c:	8a b9       	out	0x0a, r24	; 10
	
	rear = front = 0;
 57e:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <front+0x1>
 582:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <front>
 586:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <rear+0x1>
 58a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <rear>
 58e:	08 95       	ret

00000590 <UART0_transmit>:

void UART0_transmit(uint8_t data)
{
	// 데이터가 전송중이면, 끝날때까지 기다려야함
	// == 레지스터가 비었는지 안비었는지 확인해양함
	while(!(UCSR0A & 1 << UDRE0)) ; // 버퍼가 비어있을때까지 여기서 무한대기
 590:	5d 9b       	sbis	0x0b, 5	; 11
 592:	fe cf       	rjmp	.-4      	; 0x590 <UART0_transmit>
	
	UDR0 = data; // data를 h/w에 전송
 594:	8c b9       	out	0x0c, r24	; 12
 596:	08 95       	ret

00000598 <__vector_10>:
volatile int ultrasonic_dis = 0;
volatile int overflow_timer2 = 0;
volatile char scm[50];

ISR(TIMER2_OVF_vect)
{
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
	 overflow_timer2++;
 5a6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <overflow_timer2>
 5aa:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <overflow_timer2+0x1>
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <overflow_timer2+0x1>
 5b4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <overflow_timer2>
	//printf("ov\n");
}
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <__vector_5>:

// 상승, 하강 엣지 둘 다 에서 들어옴!
ISR(INT4_vect)
{
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	0b b6       	in	r0, 0x3b	; 59
 5d2:	0f 92       	push	r0
 5d4:	2f 93       	push	r18
 5d6:	3f 93       	push	r19
 5d8:	4f 93       	push	r20
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31
	// 1. rising edge -> 지금 echo는 HIGH
	if(ECHO_PIN & 1 << ECHO)
 5ec:	0c 9b       	sbis	0x01, 4	; 1
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <__vector_5+0x36>
	{
		TCNT2 = 0; // 16bit counter 개수 세기 시작!!
 5f0:	14 bc       	out	0x24, r1	; 36
					// 여기서 clear하니까 init에서 굳이 안했구낭
					// TCNT1 레지스터의 값 자체는 인터럽트랑 관련없이 그냥 timer에 맞춰서 증가하니까!
		overflow_timer2 = 0;
 5f2:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <overflow_timer2+0x1>
 5f6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <overflow_timer2>
 5fa:	31 c0       	rjmp	.+98     	; 0x65e <__vector_5+0x98>
	}
	// 2. falling edge -> 지금 echo는 LOW
	else
	{
		// ECHO핀에 들어온 펄스 개수를 us로 환산한다
		ultrasonic_dis = 1000000.0 * TCNT2 * 64 / F_CPU;
 5fc:	64 b5       	in	r22, 0x24	; 36
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	ee d0       	rcall	.+476    	; 0x7e2 <__floatsisf>
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	34 e2       	ldi	r19, 0x24	; 36
 60a:	44 e7       	ldi	r20, 0x74	; 116
 60c:	59 e4       	ldi	r21, 0x49	; 73
 60e:	75 d1       	rcall	.+746    	; 0x8fa <__mulsf3>
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	40 e8       	ldi	r20, 0x80	; 128
 616:	52 e4       	ldi	r21, 0x42	; 66
 618:	70 d1       	rcall	.+736    	; 0x8fa <__mulsf3>
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	34 e2       	ldi	r19, 0x24	; 36
 61e:	44 e7       	ldi	r20, 0x74	; 116
 620:	5b e4       	ldi	r21, 0x4B	; 75
 622:	44 d0       	rcall	.+136    	; 0x6ac <__divsf3>
 624:	ab d0       	rcall	.+342    	; 0x77c <__fixsfsi>
 626:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <ultrasonic_dis+0x1>
 62a:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <ultrasonic_dis>
		// ex) TCNT1 == 10 일 때
		// 15.625KHz의 1주기는 64us
		// 즉,,, 지금은 640us가 지난시점 == 0.00064sec가 지남!!!
		// 초음파가 1cm에 58us가 걸리니까,,,
		// 640us / 58us ==> 11cm
		sprintf(scm, "dis : %dcm\n",ultrasonic_dis / 58); // 화면에 출력하지 말고 scm에 넣기
 62e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ultrasonic_dis>
 632:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ultrasonic_dis+0x1>
 636:	6a e3       	ldi	r22, 0x3A	; 58
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	c2 d1       	rcall	.+900    	; 0x9c0 <__divmodhi4>
 63c:	7f 93       	push	r23
 63e:	6f 93       	push	r22
 640:	81 ef       	ldi	r24, 0xF1	; 241
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	9f 93       	push	r25
 646:	8f 93       	push	r24
 648:	80 ea       	ldi	r24, 0xA0	; 160
 64a:	93 e0       	ldi	r25, 0x03	; 3
 64c:	9f 93       	push	r25
 64e:	8f 93       	push	r24
 650:	f1 d1       	rcall	.+994    	; 0xa34 <sprintf>
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
	}

}
 65e:	ff 91       	pop	r31
 660:	ef 91       	pop	r30
 662:	bf 91       	pop	r27
 664:	af 91       	pop	r26
 666:	9f 91       	pop	r25
 668:	8f 91       	pop	r24
 66a:	7f 91       	pop	r23
 66c:	6f 91       	pop	r22
 66e:	5f 91       	pop	r21
 670:	4f 91       	pop	r20
 672:	3f 91       	pop	r19
 674:	2f 91       	pop	r18
 676:	0f 90       	pop	r0
 678:	0b be       	out	0x3b, r0	; 59
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <init_ultrasonic>:


void init_ultrasonic(void)
{
	// ddr
	TRIG_DDR |= 1 << TRIG;		// output mode
 684:	e4 e6       	ldi	r30, 0x64	; 100
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	81 60       	ori	r24, 0x01	; 1
 68c:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO);	// input mode로 설정 
 68e:	14 98       	cbi	0x02, 4	; 2
	//ECHO_DDR &= ~(1 << TRIG); // 왜 TRIG로 하셨지,,,,,
	
	// interrupt 설정 (echo, timer)
	
	// rising edge, falling edge 둘 다 인터럽트 받음 == ISCn1, ISCn0 를 01로 설정
	EICRB |= 0 << ISC41 | 1 << ISC40; // 여기도 EICRB가 처음에는 0으로 되어있다고 가정하는걸까,,
 690:	8a b7       	in	r24, 0x3a	; 58
 692:	81 60       	ori	r24, 0x01	; 1
 694:	8a bf       	out	0x3a, r24	; 58
	// 1주기 T = 1 / 15625 = 0.000064s = 0.064ms = 64us
	
	// 1024로 분주
	//TCCR1B  |= 1 << CS12 | 0 << CS11 | 1 << CS10;
	//TCCR2 |= 1 << CS20 | 1 << CS21 | 1 << CS22;
	TCCR2 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
 696:	85 b5       	in	r24, 0x25	; 37
 698:	84 60       	ori	r24, 0x04	; 4
 69a:	85 bd       	out	0x25, r24	; 37
	
	// local interrupt 마스크
	EIMSK |= 1 << INT4; // EXTERNAL interrupt 활성화
 69c:	89 b7       	in	r24, 0x39	; 57
 69e:	80 61       	ori	r24, 0x10	; 16
 6a0:	89 bf       	out	0x39, r24	; 57
	// 타이머는 안하남,,,,,,,,
	// 그냥 타이머에 맞춰 자연증가하는 TCNT값을 사용하는거지 overflow를 사용하는게 아니라 인터럽트 활성화할필요가없나봄!
	// 그냥 카운터로만 쓰는것!
	
	TCNT2 = 0;
 6a2:	14 bc       	out	0x24, r1	; 36
	TIMSK |= 1 << TOIE2;
 6a4:	87 b7       	in	r24, 0x37	; 55
 6a6:	80 64       	ori	r24, 0x40	; 64
 6a8:	87 bf       	out	0x37, r24	; 55
 6aa:	08 95       	ret

000006ac <__divsf3>:
 6ac:	0c d0       	rcall	.+24     	; 0x6c6 <__divsf3x>
 6ae:	eb c0       	rjmp	.+470    	; 0x886 <__fp_round>
 6b0:	e3 d0       	rcall	.+454    	; 0x878 <__fp_pscB>
 6b2:	40 f0       	brcs	.+16     	; 0x6c4 <__divsf3+0x18>
 6b4:	da d0       	rcall	.+436    	; 0x86a <__fp_pscA>
 6b6:	30 f0       	brcs	.+12     	; 0x6c4 <__divsf3+0x18>
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <__divsf3+0x16>
 6ba:	5f 3f       	cpi	r21, 0xFF	; 255
 6bc:	19 f0       	breq	.+6      	; 0x6c4 <__divsf3+0x18>
 6be:	cc c0       	rjmp	.+408    	; 0x858 <__fp_inf>
 6c0:	51 11       	cpse	r21, r1
 6c2:	15 c1       	rjmp	.+554    	; 0x8ee <__fp_szero>
 6c4:	cf c0       	rjmp	.+414    	; 0x864 <__fp_nan>

000006c6 <__divsf3x>:
 6c6:	f0 d0       	rcall	.+480    	; 0x8a8 <__fp_split3>
 6c8:	98 f3       	brcs	.-26     	; 0x6b0 <__divsf3+0x4>

000006ca <__divsf3_pse>:
 6ca:	99 23       	and	r25, r25
 6cc:	c9 f3       	breq	.-14     	; 0x6c0 <__divsf3+0x14>
 6ce:	55 23       	and	r21, r21
 6d0:	b1 f3       	breq	.-20     	; 0x6be <__divsf3+0x12>
 6d2:	95 1b       	sub	r25, r21
 6d4:	55 0b       	sbc	r21, r21
 6d6:	bb 27       	eor	r27, r27
 6d8:	aa 27       	eor	r26, r26
 6da:	62 17       	cp	r22, r18
 6dc:	73 07       	cpc	r23, r19
 6de:	84 07       	cpc	r24, r20
 6e0:	38 f0       	brcs	.+14     	; 0x6f0 <__divsf3_pse+0x26>
 6e2:	9f 5f       	subi	r25, 0xFF	; 255
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255
 6e6:	22 0f       	add	r18, r18
 6e8:	33 1f       	adc	r19, r19
 6ea:	44 1f       	adc	r20, r20
 6ec:	aa 1f       	adc	r26, r26
 6ee:	a9 f3       	breq	.-22     	; 0x6da <__divsf3_pse+0x10>
 6f0:	33 d0       	rcall	.+102    	; 0x758 <__divsf3_pse+0x8e>
 6f2:	0e 2e       	mov	r0, r30
 6f4:	3a f0       	brmi	.+14     	; 0x704 <__divsf3_pse+0x3a>
 6f6:	e0 e8       	ldi	r30, 0x80	; 128
 6f8:	30 d0       	rcall	.+96     	; 0x75a <__divsf3_pse+0x90>
 6fa:	91 50       	subi	r25, 0x01	; 1
 6fc:	50 40       	sbci	r21, 0x00	; 0
 6fe:	e6 95       	lsr	r30
 700:	00 1c       	adc	r0, r0
 702:	ca f7       	brpl	.-14     	; 0x6f6 <__divsf3_pse+0x2c>
 704:	29 d0       	rcall	.+82     	; 0x758 <__divsf3_pse+0x8e>
 706:	fe 2f       	mov	r31, r30
 708:	27 d0       	rcall	.+78     	; 0x758 <__divsf3_pse+0x8e>
 70a:	66 0f       	add	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	88 1f       	adc	r24, r24
 710:	bb 1f       	adc	r27, r27
 712:	26 17       	cp	r18, r22
 714:	37 07       	cpc	r19, r23
 716:	48 07       	cpc	r20, r24
 718:	ab 07       	cpc	r26, r27
 71a:	b0 e8       	ldi	r27, 0x80	; 128
 71c:	09 f0       	breq	.+2      	; 0x720 <__divsf3_pse+0x56>
 71e:	bb 0b       	sbc	r27, r27
 720:	80 2d       	mov	r24, r0
 722:	bf 01       	movw	r22, r30
 724:	ff 27       	eor	r31, r31
 726:	93 58       	subi	r25, 0x83	; 131
 728:	5f 4f       	sbci	r21, 0xFF	; 255
 72a:	2a f0       	brmi	.+10     	; 0x736 <__divsf3_pse+0x6c>
 72c:	9e 3f       	cpi	r25, 0xFE	; 254
 72e:	51 05       	cpc	r21, r1
 730:	68 f0       	brcs	.+26     	; 0x74c <__divsf3_pse+0x82>
 732:	92 c0       	rjmp	.+292    	; 0x858 <__fp_inf>
 734:	dc c0       	rjmp	.+440    	; 0x8ee <__fp_szero>
 736:	5f 3f       	cpi	r21, 0xFF	; 255
 738:	ec f3       	brlt	.-6      	; 0x734 <__divsf3_pse+0x6a>
 73a:	98 3e       	cpi	r25, 0xE8	; 232
 73c:	dc f3       	brlt	.-10     	; 0x734 <__divsf3_pse+0x6a>
 73e:	86 95       	lsr	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b7 95       	ror	r27
 746:	f7 95       	ror	r31
 748:	9f 5f       	subi	r25, 0xFF	; 255
 74a:	c9 f7       	brne	.-14     	; 0x73e <__divsf3_pse+0x74>
 74c:	88 0f       	add	r24, r24
 74e:	91 1d       	adc	r25, r1
 750:	96 95       	lsr	r25
 752:	87 95       	ror	r24
 754:	97 f9       	bld	r25, 7
 756:	08 95       	ret
 758:	e1 e0       	ldi	r30, 0x01	; 1
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	bb 1f       	adc	r27, r27
 762:	62 17       	cp	r22, r18
 764:	73 07       	cpc	r23, r19
 766:	84 07       	cpc	r24, r20
 768:	ba 07       	cpc	r27, r26
 76a:	20 f0       	brcs	.+8      	; 0x774 <__divsf3_pse+0xaa>
 76c:	62 1b       	sub	r22, r18
 76e:	73 0b       	sbc	r23, r19
 770:	84 0b       	sbc	r24, r20
 772:	ba 0b       	sbc	r27, r26
 774:	ee 1f       	adc	r30, r30
 776:	88 f7       	brcc	.-30     	; 0x75a <__divsf3_pse+0x90>
 778:	e0 95       	com	r30
 77a:	08 95       	ret

0000077c <__fixsfsi>:
 77c:	04 d0       	rcall	.+8      	; 0x786 <__fixunssfsi>
 77e:	68 94       	set
 780:	b1 11       	cpse	r27, r1
 782:	b5 c0       	rjmp	.+362    	; 0x8ee <__fp_szero>
 784:	08 95       	ret

00000786 <__fixunssfsi>:
 786:	98 d0       	rcall	.+304    	; 0x8b8 <__fp_splitA>
 788:	88 f0       	brcs	.+34     	; 0x7ac <__fixunssfsi+0x26>
 78a:	9f 57       	subi	r25, 0x7F	; 127
 78c:	90 f0       	brcs	.+36     	; 0x7b2 <__fixunssfsi+0x2c>
 78e:	b9 2f       	mov	r27, r25
 790:	99 27       	eor	r25, r25
 792:	b7 51       	subi	r27, 0x17	; 23
 794:	a0 f0       	brcs	.+40     	; 0x7be <__fixunssfsi+0x38>
 796:	d1 f0       	breq	.+52     	; 0x7cc <__fixunssfsi+0x46>
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	1a f0       	brmi	.+6      	; 0x7a8 <__fixunssfsi+0x22>
 7a2:	ba 95       	dec	r27
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__fixunssfsi+0x12>
 7a6:	12 c0       	rjmp	.+36     	; 0x7cc <__fixunssfsi+0x46>
 7a8:	b1 30       	cpi	r27, 0x01	; 1
 7aa:	81 f0       	breq	.+32     	; 0x7cc <__fixunssfsi+0x46>
 7ac:	9f d0       	rcall	.+318    	; 0x8ec <__fp_zero>
 7ae:	b1 e0       	ldi	r27, 0x01	; 1
 7b0:	08 95       	ret
 7b2:	9c c0       	rjmp	.+312    	; 0x8ec <__fp_zero>
 7b4:	67 2f       	mov	r22, r23
 7b6:	78 2f       	mov	r23, r24
 7b8:	88 27       	eor	r24, r24
 7ba:	b8 5f       	subi	r27, 0xF8	; 248
 7bc:	39 f0       	breq	.+14     	; 0x7cc <__fixunssfsi+0x46>
 7be:	b9 3f       	cpi	r27, 0xF9	; 249
 7c0:	cc f3       	brlt	.-14     	; 0x7b4 <__fixunssfsi+0x2e>
 7c2:	86 95       	lsr	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	b3 95       	inc	r27
 7ca:	d9 f7       	brne	.-10     	; 0x7c2 <__fixunssfsi+0x3c>
 7cc:	3e f4       	brtc	.+14     	; 0x7dc <__fixunssfsi+0x56>
 7ce:	90 95       	com	r25
 7d0:	80 95       	com	r24
 7d2:	70 95       	com	r23
 7d4:	61 95       	neg	r22
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	08 95       	ret

000007de <__floatunsisf>:
 7de:	e8 94       	clt
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <__floatsisf+0x12>

000007e2 <__floatsisf>:
 7e2:	97 fb       	bst	r25, 7
 7e4:	3e f4       	brtc	.+14     	; 0x7f4 <__floatsisf+0x12>
 7e6:	90 95       	com	r25
 7e8:	80 95       	com	r24
 7ea:	70 95       	com	r23
 7ec:	61 95       	neg	r22
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	99 23       	and	r25, r25
 7f6:	a9 f0       	breq	.+42     	; 0x822 <__floatsisf+0x40>
 7f8:	f9 2f       	mov	r31, r25
 7fa:	96 e9       	ldi	r25, 0x96	; 150
 7fc:	bb 27       	eor	r27, r27
 7fe:	93 95       	inc	r25
 800:	f6 95       	lsr	r31
 802:	87 95       	ror	r24
 804:	77 95       	ror	r23
 806:	67 95       	ror	r22
 808:	b7 95       	ror	r27
 80a:	f1 11       	cpse	r31, r1
 80c:	f8 cf       	rjmp	.-16     	; 0x7fe <__floatsisf+0x1c>
 80e:	fa f4       	brpl	.+62     	; 0x84e <__floatsisf+0x6c>
 810:	bb 0f       	add	r27, r27
 812:	11 f4       	brne	.+4      	; 0x818 <__floatsisf+0x36>
 814:	60 ff       	sbrs	r22, 0
 816:	1b c0       	rjmp	.+54     	; 0x84e <__floatsisf+0x6c>
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	16 c0       	rjmp	.+44     	; 0x84e <__floatsisf+0x6c>
 822:	88 23       	and	r24, r24
 824:	11 f0       	breq	.+4      	; 0x82a <__floatsisf+0x48>
 826:	96 e9       	ldi	r25, 0x96	; 150
 828:	11 c0       	rjmp	.+34     	; 0x84c <__floatsisf+0x6a>
 82a:	77 23       	and	r23, r23
 82c:	21 f0       	breq	.+8      	; 0x836 <__floatsisf+0x54>
 82e:	9e e8       	ldi	r25, 0x8E	; 142
 830:	87 2f       	mov	r24, r23
 832:	76 2f       	mov	r23, r22
 834:	05 c0       	rjmp	.+10     	; 0x840 <__floatsisf+0x5e>
 836:	66 23       	and	r22, r22
 838:	71 f0       	breq	.+28     	; 0x856 <__floatsisf+0x74>
 83a:	96 e8       	ldi	r25, 0x86	; 134
 83c:	86 2f       	mov	r24, r22
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	2a f0       	brmi	.+10     	; 0x84e <__floatsisf+0x6c>
 844:	9a 95       	dec	r25
 846:	66 0f       	add	r22, r22
 848:	77 1f       	adc	r23, r23
 84a:	88 1f       	adc	r24, r24
 84c:	da f7       	brpl	.-10     	; 0x844 <__floatsisf+0x62>
 84e:	88 0f       	add	r24, r24
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret

00000858 <__fp_inf>:
 858:	97 f9       	bld	r25, 7
 85a:	9f 67       	ori	r25, 0x7F	; 127
 85c:	80 e8       	ldi	r24, 0x80	; 128
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	08 95       	ret

00000864 <__fp_nan>:
 864:	9f ef       	ldi	r25, 0xFF	; 255
 866:	80 ec       	ldi	r24, 0xC0	; 192
 868:	08 95       	ret

0000086a <__fp_pscA>:
 86a:	00 24       	eor	r0, r0
 86c:	0a 94       	dec	r0
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	09 06       	cpc	r0, r25
 876:	08 95       	ret

00000878 <__fp_pscB>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	05 06       	cpc	r0, r21
 884:	08 95       	ret

00000886 <__fp_round>:
 886:	09 2e       	mov	r0, r25
 888:	03 94       	inc	r0
 88a:	00 0c       	add	r0, r0
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0xc>
 88e:	88 23       	and	r24, r24
 890:	52 f0       	brmi	.+20     	; 0x8a6 <__fp_round+0x20>
 892:	bb 0f       	add	r27, r27
 894:	40 f4       	brcc	.+16     	; 0x8a6 <__fp_round+0x20>
 896:	bf 2b       	or	r27, r31
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0x18>
 89a:	60 ff       	sbrs	r22, 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__fp_round+0x20>
 89e:	6f 5f       	subi	r22, 0xFF	; 255
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__fp_split3>:
 8a8:	57 fd       	sbrc	r21, 7
 8aa:	90 58       	subi	r25, 0x80	; 128
 8ac:	44 0f       	add	r20, r20
 8ae:	55 1f       	adc	r21, r21
 8b0:	59 f0       	breq	.+22     	; 0x8c8 <__fp_splitA+0x10>
 8b2:	5f 3f       	cpi	r21, 0xFF	; 255
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <__fp_splitA+0x1a>
 8b6:	47 95       	ror	r20

000008b8 <__fp_splitA>:
 8b8:	88 0f       	add	r24, r24
 8ba:	97 fb       	bst	r25, 7
 8bc:	99 1f       	adc	r25, r25
 8be:	61 f0       	breq	.+24     	; 0x8d8 <__fp_splitA+0x20>
 8c0:	9f 3f       	cpi	r25, 0xFF	; 255
 8c2:	79 f0       	breq	.+30     	; 0x8e2 <__fp_splitA+0x2a>
 8c4:	87 95       	ror	r24
 8c6:	08 95       	ret
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	14 06       	cpc	r1, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <__fp_split3+0xe>
 8d2:	46 95       	lsr	r20
 8d4:	f1 df       	rcall	.-30     	; 0x8b8 <__fp_splitA>
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <__fp_splitA+0x30>
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	f1 cf       	rjmp	.-30     	; 0x8c4 <__fp_splitA+0xc>
 8e2:	86 95       	lsr	r24
 8e4:	71 05       	cpc	r23, r1
 8e6:	61 05       	cpc	r22, r1
 8e8:	08 94       	sec
 8ea:	08 95       	ret

000008ec <__fp_zero>:
 8ec:	e8 94       	clt

000008ee <__fp_szero>:
 8ee:	bb 27       	eor	r27, r27
 8f0:	66 27       	eor	r22, r22
 8f2:	77 27       	eor	r23, r23
 8f4:	cb 01       	movw	r24, r22
 8f6:	97 f9       	bld	r25, 7
 8f8:	08 95       	ret

000008fa <__mulsf3>:
 8fa:	0b d0       	rcall	.+22     	; 0x912 <__mulsf3x>
 8fc:	c4 cf       	rjmp	.-120    	; 0x886 <__fp_round>
 8fe:	b5 df       	rcall	.-150    	; 0x86a <__fp_pscA>
 900:	28 f0       	brcs	.+10     	; 0x90c <__mulsf3+0x12>
 902:	ba df       	rcall	.-140    	; 0x878 <__fp_pscB>
 904:	18 f0       	brcs	.+6      	; 0x90c <__mulsf3+0x12>
 906:	95 23       	and	r25, r21
 908:	09 f0       	breq	.+2      	; 0x90c <__mulsf3+0x12>
 90a:	a6 cf       	rjmp	.-180    	; 0x858 <__fp_inf>
 90c:	ab cf       	rjmp	.-170    	; 0x864 <__fp_nan>
 90e:	11 24       	eor	r1, r1
 910:	ee cf       	rjmp	.-36     	; 0x8ee <__fp_szero>

00000912 <__mulsf3x>:
 912:	ca df       	rcall	.-108    	; 0x8a8 <__fp_split3>
 914:	a0 f3       	brcs	.-24     	; 0x8fe <__mulsf3+0x4>

00000916 <__mulsf3_pse>:
 916:	95 9f       	mul	r25, r21
 918:	d1 f3       	breq	.-12     	; 0x90e <__mulsf3+0x14>
 91a:	95 0f       	add	r25, r21
 91c:	50 e0       	ldi	r21, 0x00	; 0
 91e:	55 1f       	adc	r21, r21
 920:	62 9f       	mul	r22, r18
 922:	f0 01       	movw	r30, r0
 924:	72 9f       	mul	r23, r18
 926:	bb 27       	eor	r27, r27
 928:	f0 0d       	add	r31, r0
 92a:	b1 1d       	adc	r27, r1
 92c:	63 9f       	mul	r22, r19
 92e:	aa 27       	eor	r26, r26
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	aa 1f       	adc	r26, r26
 936:	64 9f       	mul	r22, r20
 938:	66 27       	eor	r22, r22
 93a:	b0 0d       	add	r27, r0
 93c:	a1 1d       	adc	r26, r1
 93e:	66 1f       	adc	r22, r22
 940:	82 9f       	mul	r24, r18
 942:	22 27       	eor	r18, r18
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	62 1f       	adc	r22, r18
 94a:	73 9f       	mul	r23, r19
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	83 9f       	mul	r24, r19
 954:	a0 0d       	add	r26, r0
 956:	61 1d       	adc	r22, r1
 958:	22 1f       	adc	r18, r18
 95a:	74 9f       	mul	r23, r20
 95c:	33 27       	eor	r19, r19
 95e:	a0 0d       	add	r26, r0
 960:	61 1d       	adc	r22, r1
 962:	23 1f       	adc	r18, r19
 964:	84 9f       	mul	r24, r20
 966:	60 0d       	add	r22, r0
 968:	21 1d       	adc	r18, r1
 96a:	82 2f       	mov	r24, r18
 96c:	76 2f       	mov	r23, r22
 96e:	6a 2f       	mov	r22, r26
 970:	11 24       	eor	r1, r1
 972:	9f 57       	subi	r25, 0x7F	; 127
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	8a f0       	brmi	.+34     	; 0x99a <__mulsf3_pse+0x84>
 978:	e1 f0       	breq	.+56     	; 0x9b2 <__mulsf3_pse+0x9c>
 97a:	88 23       	and	r24, r24
 97c:	4a f0       	brmi	.+18     	; 0x990 <__mulsf3_pse+0x7a>
 97e:	ee 0f       	add	r30, r30
 980:	ff 1f       	adc	r31, r31
 982:	bb 1f       	adc	r27, r27
 984:	66 1f       	adc	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	91 50       	subi	r25, 0x01	; 1
 98c:	50 40       	sbci	r21, 0x00	; 0
 98e:	a9 f7       	brne	.-22     	; 0x97a <__mulsf3_pse+0x64>
 990:	9e 3f       	cpi	r25, 0xFE	; 254
 992:	51 05       	cpc	r21, r1
 994:	70 f0       	brcs	.+28     	; 0x9b2 <__mulsf3_pse+0x9c>
 996:	60 cf       	rjmp	.-320    	; 0x858 <__fp_inf>
 998:	aa cf       	rjmp	.-172    	; 0x8ee <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	ec f3       	brlt	.-6      	; 0x998 <__mulsf3_pse+0x82>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	dc f3       	brlt	.-10     	; 0x998 <__mulsf3_pse+0x82>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	e7 95       	ror	r30
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x8c>
 9b2:	fe 2b       	or	r31, r30
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <__divmodhi4>:
 9c0:	97 fb       	bst	r25, 7
 9c2:	07 2e       	mov	r0, r23
 9c4:	16 f4       	brtc	.+4      	; 0x9ca <__divmodhi4+0xa>
 9c6:	00 94       	com	r0
 9c8:	06 d0       	rcall	.+12     	; 0x9d6 <__divmodhi4_neg1>
 9ca:	77 fd       	sbrc	r23, 7
 9cc:	08 d0       	rcall	.+16     	; 0x9de <__divmodhi4_neg2>
 9ce:	0b d0       	rcall	.+22     	; 0x9e6 <__udivmodhi4>
 9d0:	07 fc       	sbrc	r0, 7
 9d2:	05 d0       	rcall	.+10     	; 0x9de <__divmodhi4_neg2>
 9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__divmodhi4_exit>

000009d6 <__divmodhi4_neg1>:
 9d6:	90 95       	com	r25
 9d8:	81 95       	neg	r24
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	08 95       	ret

000009de <__divmodhi4_neg2>:
 9de:	70 95       	com	r23
 9e0:	61 95       	neg	r22
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255

000009e4 <__divmodhi4_exit>:
 9e4:	08 95       	ret

000009e6 <__udivmodhi4>:
 9e6:	aa 1b       	sub	r26, r26
 9e8:	bb 1b       	sub	r27, r27
 9ea:	51 e1       	ldi	r21, 0x11	; 17
 9ec:	07 c0       	rjmp	.+14     	; 0x9fc <__udivmodhi4_ep>

000009ee <__udivmodhi4_loop>:
 9ee:	aa 1f       	adc	r26, r26
 9f0:	bb 1f       	adc	r27, r27
 9f2:	a6 17       	cp	r26, r22
 9f4:	b7 07       	cpc	r27, r23
 9f6:	10 f0       	brcs	.+4      	; 0x9fc <__udivmodhi4_ep>
 9f8:	a6 1b       	sub	r26, r22
 9fa:	b7 0b       	sbc	r27, r23

000009fc <__udivmodhi4_ep>:
 9fc:	88 1f       	adc	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	5a 95       	dec	r21
 a02:	a9 f7       	brne	.-22     	; 0x9ee <__udivmodhi4_loop>
 a04:	80 95       	com	r24
 a06:	90 95       	com	r25
 a08:	bc 01       	movw	r22, r24
 a0a:	cd 01       	movw	r24, r26
 a0c:	08 95       	ret

00000a0e <printf>:
 a0e:	cf 93       	push	r28
 a10:	df 93       	push	r29
 a12:	cd b7       	in	r28, 0x3d	; 61
 a14:	de b7       	in	r29, 0x3e	; 62
 a16:	ae 01       	movw	r20, r28
 a18:	4b 5f       	subi	r20, 0xFB	; 251
 a1a:	5f 4f       	sbci	r21, 0xFF	; 255
 a1c:	fa 01       	movw	r30, r20
 a1e:	61 91       	ld	r22, Z+
 a20:	71 91       	ld	r23, Z+
 a22:	af 01       	movw	r20, r30
 a24:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <__iob+0x2>
 a28:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <__iob+0x3>
 a2c:	31 d0       	rcall	.+98     	; 0xa90 <vfprintf>
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	08 95       	ret

00000a34 <sprintf>:
 a34:	0f 93       	push	r16
 a36:	1f 93       	push	r17
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	cd b7       	in	r28, 0x3d	; 61
 a3e:	de b7       	in	r29, 0x3e	; 62
 a40:	2e 97       	sbiw	r28, 0x0e	; 14
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	0d 89       	ldd	r16, Y+21	; 0x15
 a4e:	1e 89       	ldd	r17, Y+22	; 0x16
 a50:	86 e0       	ldi	r24, 0x06	; 6
 a52:	8c 83       	std	Y+4, r24	; 0x04
 a54:	1a 83       	std	Y+2, r17	; 0x02
 a56:	09 83       	std	Y+1, r16	; 0x01
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	9f e7       	ldi	r25, 0x7F	; 127
 a5c:	9e 83       	std	Y+6, r25	; 0x06
 a5e:	8d 83       	std	Y+5, r24	; 0x05
 a60:	ae 01       	movw	r20, r28
 a62:	47 5e       	subi	r20, 0xE7	; 231
 a64:	5f 4f       	sbci	r21, 0xFF	; 255
 a66:	6f 89       	ldd	r22, Y+23	; 0x17
 a68:	78 8d       	ldd	r23, Y+24	; 0x18
 a6a:	ce 01       	movw	r24, r28
 a6c:	01 96       	adiw	r24, 0x01	; 1
 a6e:	10 d0       	rcall	.+32     	; 0xa90 <vfprintf>
 a70:	ef 81       	ldd	r30, Y+7	; 0x07
 a72:	f8 85       	ldd	r31, Y+8	; 0x08
 a74:	e0 0f       	add	r30, r16
 a76:	f1 1f       	adc	r31, r17
 a78:	10 82       	st	Z, r1
 a7a:	2e 96       	adiw	r28, 0x0e	; 14
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	f8 94       	cli
 a80:	de bf       	out	0x3e, r29	; 62
 a82:	0f be       	out	0x3f, r0	; 63
 a84:	cd bf       	out	0x3d, r28	; 61
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	1f 91       	pop	r17
 a8c:	0f 91       	pop	r16
 a8e:	08 95       	ret

00000a90 <vfprintf>:
 a90:	2f 92       	push	r2
 a92:	3f 92       	push	r3
 a94:	4f 92       	push	r4
 a96:	5f 92       	push	r5
 a98:	6f 92       	push	r6
 a9a:	7f 92       	push	r7
 a9c:	8f 92       	push	r8
 a9e:	9f 92       	push	r9
 aa0:	af 92       	push	r10
 aa2:	bf 92       	push	r11
 aa4:	cf 92       	push	r12
 aa6:	df 92       	push	r13
 aa8:	ef 92       	push	r14
 aaa:	ff 92       	push	r15
 aac:	0f 93       	push	r16
 aae:	1f 93       	push	r17
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62
 ab8:	2b 97       	sbiw	r28, 0x0b	; 11
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	f8 94       	cli
 abe:	de bf       	out	0x3e, r29	; 62
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	cd bf       	out	0x3d, r28	; 61
 ac4:	6c 01       	movw	r12, r24
 ac6:	7b 01       	movw	r14, r22
 ac8:	8a 01       	movw	r16, r20
 aca:	fc 01       	movw	r30, r24
 acc:	17 82       	std	Z+7, r1	; 0x07
 ace:	16 82       	std	Z+6, r1	; 0x06
 ad0:	83 81       	ldd	r24, Z+3	; 0x03
 ad2:	81 ff       	sbrs	r24, 1
 ad4:	bf c1       	rjmp	.+894    	; 0xe54 <vfprintf+0x3c4>
 ad6:	ce 01       	movw	r24, r28
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	3c 01       	movw	r6, r24
 adc:	f6 01       	movw	r30, r12
 ade:	93 81       	ldd	r25, Z+3	; 0x03
 ae0:	f7 01       	movw	r30, r14
 ae2:	93 fd       	sbrc	r25, 3
 ae4:	85 91       	lpm	r24, Z+
 ae6:	93 ff       	sbrs	r25, 3
 ae8:	81 91       	ld	r24, Z+
 aea:	7f 01       	movw	r14, r30
 aec:	88 23       	and	r24, r24
 aee:	09 f4       	brne	.+2      	; 0xaf2 <vfprintf+0x62>
 af0:	ad c1       	rjmp	.+858    	; 0xe4c <vfprintf+0x3bc>
 af2:	85 32       	cpi	r24, 0x25	; 37
 af4:	39 f4       	brne	.+14     	; 0xb04 <vfprintf+0x74>
 af6:	93 fd       	sbrc	r25, 3
 af8:	85 91       	lpm	r24, Z+
 afa:	93 ff       	sbrs	r25, 3
 afc:	81 91       	ld	r24, Z+
 afe:	7f 01       	movw	r14, r30
 b00:	85 32       	cpi	r24, 0x25	; 37
 b02:	21 f4       	brne	.+8      	; 0xb0c <vfprintf+0x7c>
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	d6 d1       	rcall	.+940    	; 0xeb6 <fputc>
 b0a:	e8 cf       	rjmp	.-48     	; 0xadc <vfprintf+0x4c>
 b0c:	91 2c       	mov	r9, r1
 b0e:	21 2c       	mov	r2, r1
 b10:	31 2c       	mov	r3, r1
 b12:	ff e1       	ldi	r31, 0x1F	; 31
 b14:	f3 15       	cp	r31, r3
 b16:	d8 f0       	brcs	.+54     	; 0xb4e <vfprintf+0xbe>
 b18:	8b 32       	cpi	r24, 0x2B	; 43
 b1a:	79 f0       	breq	.+30     	; 0xb3a <vfprintf+0xaa>
 b1c:	38 f4       	brcc	.+14     	; 0xb2c <vfprintf+0x9c>
 b1e:	80 32       	cpi	r24, 0x20	; 32
 b20:	79 f0       	breq	.+30     	; 0xb40 <vfprintf+0xb0>
 b22:	83 32       	cpi	r24, 0x23	; 35
 b24:	a1 f4       	brne	.+40     	; 0xb4e <vfprintf+0xbe>
 b26:	23 2d       	mov	r18, r3
 b28:	20 61       	ori	r18, 0x10	; 16
 b2a:	1d c0       	rjmp	.+58     	; 0xb66 <vfprintf+0xd6>
 b2c:	8d 32       	cpi	r24, 0x2D	; 45
 b2e:	61 f0       	breq	.+24     	; 0xb48 <vfprintf+0xb8>
 b30:	80 33       	cpi	r24, 0x30	; 48
 b32:	69 f4       	brne	.+26     	; 0xb4e <vfprintf+0xbe>
 b34:	23 2d       	mov	r18, r3
 b36:	21 60       	ori	r18, 0x01	; 1
 b38:	16 c0       	rjmp	.+44     	; 0xb66 <vfprintf+0xd6>
 b3a:	83 2d       	mov	r24, r3
 b3c:	82 60       	ori	r24, 0x02	; 2
 b3e:	38 2e       	mov	r3, r24
 b40:	e3 2d       	mov	r30, r3
 b42:	e4 60       	ori	r30, 0x04	; 4
 b44:	3e 2e       	mov	r3, r30
 b46:	2a c0       	rjmp	.+84     	; 0xb9c <vfprintf+0x10c>
 b48:	f3 2d       	mov	r31, r3
 b4a:	f8 60       	ori	r31, 0x08	; 8
 b4c:	1d c0       	rjmp	.+58     	; 0xb88 <vfprintf+0xf8>
 b4e:	37 fc       	sbrc	r3, 7
 b50:	2d c0       	rjmp	.+90     	; 0xbac <vfprintf+0x11c>
 b52:	20 ed       	ldi	r18, 0xD0	; 208
 b54:	28 0f       	add	r18, r24
 b56:	2a 30       	cpi	r18, 0x0A	; 10
 b58:	40 f0       	brcs	.+16     	; 0xb6a <vfprintf+0xda>
 b5a:	8e 32       	cpi	r24, 0x2E	; 46
 b5c:	b9 f4       	brne	.+46     	; 0xb8c <vfprintf+0xfc>
 b5e:	36 fc       	sbrc	r3, 6
 b60:	75 c1       	rjmp	.+746    	; 0xe4c <vfprintf+0x3bc>
 b62:	23 2d       	mov	r18, r3
 b64:	20 64       	ori	r18, 0x40	; 64
 b66:	32 2e       	mov	r3, r18
 b68:	19 c0       	rjmp	.+50     	; 0xb9c <vfprintf+0x10c>
 b6a:	36 fe       	sbrs	r3, 6
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <vfprintf+0xea>
 b6e:	8a e0       	ldi	r24, 0x0A	; 10
 b70:	98 9e       	mul	r9, r24
 b72:	20 0d       	add	r18, r0
 b74:	11 24       	eor	r1, r1
 b76:	92 2e       	mov	r9, r18
 b78:	11 c0       	rjmp	.+34     	; 0xb9c <vfprintf+0x10c>
 b7a:	ea e0       	ldi	r30, 0x0A	; 10
 b7c:	2e 9e       	mul	r2, r30
 b7e:	20 0d       	add	r18, r0
 b80:	11 24       	eor	r1, r1
 b82:	22 2e       	mov	r2, r18
 b84:	f3 2d       	mov	r31, r3
 b86:	f0 62       	ori	r31, 0x20	; 32
 b88:	3f 2e       	mov	r3, r31
 b8a:	08 c0       	rjmp	.+16     	; 0xb9c <vfprintf+0x10c>
 b8c:	8c 36       	cpi	r24, 0x6C	; 108
 b8e:	21 f4       	brne	.+8      	; 0xb98 <vfprintf+0x108>
 b90:	83 2d       	mov	r24, r3
 b92:	80 68       	ori	r24, 0x80	; 128
 b94:	38 2e       	mov	r3, r24
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x10c>
 b98:	88 36       	cpi	r24, 0x68	; 104
 b9a:	41 f4       	brne	.+16     	; 0xbac <vfprintf+0x11c>
 b9c:	f7 01       	movw	r30, r14
 b9e:	93 fd       	sbrc	r25, 3
 ba0:	85 91       	lpm	r24, Z+
 ba2:	93 ff       	sbrs	r25, 3
 ba4:	81 91       	ld	r24, Z+
 ba6:	7f 01       	movw	r14, r30
 ba8:	81 11       	cpse	r24, r1
 baa:	b3 cf       	rjmp	.-154    	; 0xb12 <vfprintf+0x82>
 bac:	98 2f       	mov	r25, r24
 bae:	9f 7d       	andi	r25, 0xDF	; 223
 bb0:	95 54       	subi	r25, 0x45	; 69
 bb2:	93 30       	cpi	r25, 0x03	; 3
 bb4:	28 f4       	brcc	.+10     	; 0xbc0 <vfprintf+0x130>
 bb6:	0c 5f       	subi	r16, 0xFC	; 252
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	9f e3       	ldi	r25, 0x3F	; 63
 bbc:	99 83       	std	Y+1, r25	; 0x01
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <vfprintf+0x14a>
 bc0:	83 36       	cpi	r24, 0x63	; 99
 bc2:	31 f0       	breq	.+12     	; 0xbd0 <vfprintf+0x140>
 bc4:	83 37       	cpi	r24, 0x73	; 115
 bc6:	71 f0       	breq	.+28     	; 0xbe4 <vfprintf+0x154>
 bc8:	83 35       	cpi	r24, 0x53	; 83
 bca:	09 f0       	breq	.+2      	; 0xbce <vfprintf+0x13e>
 bcc:	55 c0       	rjmp	.+170    	; 0xc78 <vfprintf+0x1e8>
 bce:	20 c0       	rjmp	.+64     	; 0xc10 <vfprintf+0x180>
 bd0:	f8 01       	movw	r30, r16
 bd2:	80 81       	ld	r24, Z
 bd4:	89 83       	std	Y+1, r24	; 0x01
 bd6:	0e 5f       	subi	r16, 0xFE	; 254
 bd8:	1f 4f       	sbci	r17, 0xFF	; 255
 bda:	88 24       	eor	r8, r8
 bdc:	83 94       	inc	r8
 bde:	91 2c       	mov	r9, r1
 be0:	53 01       	movw	r10, r6
 be2:	12 c0       	rjmp	.+36     	; 0xc08 <vfprintf+0x178>
 be4:	28 01       	movw	r4, r16
 be6:	f2 e0       	ldi	r31, 0x02	; 2
 be8:	4f 0e       	add	r4, r31
 bea:	51 1c       	adc	r5, r1
 bec:	f8 01       	movw	r30, r16
 bee:	a0 80       	ld	r10, Z
 bf0:	b1 80       	ldd	r11, Z+1	; 0x01
 bf2:	36 fe       	sbrs	r3, 6
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <vfprintf+0x16c>
 bf6:	69 2d       	mov	r22, r9
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x170>
 bfc:	6f ef       	ldi	r22, 0xFF	; 255
 bfe:	7f ef       	ldi	r23, 0xFF	; 255
 c00:	c5 01       	movw	r24, r10
 c02:	4e d1       	rcall	.+668    	; 0xea0 <strnlen>
 c04:	4c 01       	movw	r8, r24
 c06:	82 01       	movw	r16, r4
 c08:	f3 2d       	mov	r31, r3
 c0a:	ff 77       	andi	r31, 0x7F	; 127
 c0c:	3f 2e       	mov	r3, r31
 c0e:	15 c0       	rjmp	.+42     	; 0xc3a <vfprintf+0x1aa>
 c10:	28 01       	movw	r4, r16
 c12:	22 e0       	ldi	r18, 0x02	; 2
 c14:	42 0e       	add	r4, r18
 c16:	51 1c       	adc	r5, r1
 c18:	f8 01       	movw	r30, r16
 c1a:	a0 80       	ld	r10, Z
 c1c:	b1 80       	ldd	r11, Z+1	; 0x01
 c1e:	36 fe       	sbrs	r3, 6
 c20:	03 c0       	rjmp	.+6      	; 0xc28 <vfprintf+0x198>
 c22:	69 2d       	mov	r22, r9
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <vfprintf+0x19c>
 c28:	6f ef       	ldi	r22, 0xFF	; 255
 c2a:	7f ef       	ldi	r23, 0xFF	; 255
 c2c:	c5 01       	movw	r24, r10
 c2e:	2d d1       	rcall	.+602    	; 0xe8a <strnlen_P>
 c30:	4c 01       	movw	r8, r24
 c32:	f3 2d       	mov	r31, r3
 c34:	f0 68       	ori	r31, 0x80	; 128
 c36:	3f 2e       	mov	r3, r31
 c38:	82 01       	movw	r16, r4
 c3a:	33 fc       	sbrc	r3, 3
 c3c:	19 c0       	rjmp	.+50     	; 0xc70 <vfprintf+0x1e0>
 c3e:	82 2d       	mov	r24, r2
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	88 16       	cp	r8, r24
 c44:	99 06       	cpc	r9, r25
 c46:	a0 f4       	brcc	.+40     	; 0xc70 <vfprintf+0x1e0>
 c48:	b6 01       	movw	r22, r12
 c4a:	80 e2       	ldi	r24, 0x20	; 32
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	33 d1       	rcall	.+614    	; 0xeb6 <fputc>
 c50:	2a 94       	dec	r2
 c52:	f5 cf       	rjmp	.-22     	; 0xc3e <vfprintf+0x1ae>
 c54:	f5 01       	movw	r30, r10
 c56:	37 fc       	sbrc	r3, 7
 c58:	85 91       	lpm	r24, Z+
 c5a:	37 fe       	sbrs	r3, 7
 c5c:	81 91       	ld	r24, Z+
 c5e:	5f 01       	movw	r10, r30
 c60:	b6 01       	movw	r22, r12
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	28 d1       	rcall	.+592    	; 0xeb6 <fputc>
 c66:	21 10       	cpse	r2, r1
 c68:	2a 94       	dec	r2
 c6a:	21 e0       	ldi	r18, 0x01	; 1
 c6c:	82 1a       	sub	r8, r18
 c6e:	91 08       	sbc	r9, r1
 c70:	81 14       	cp	r8, r1
 c72:	91 04       	cpc	r9, r1
 c74:	79 f7       	brne	.-34     	; 0xc54 <vfprintf+0x1c4>
 c76:	e1 c0       	rjmp	.+450    	; 0xe3a <vfprintf+0x3aa>
 c78:	84 36       	cpi	r24, 0x64	; 100
 c7a:	11 f0       	breq	.+4      	; 0xc80 <vfprintf+0x1f0>
 c7c:	89 36       	cpi	r24, 0x69	; 105
 c7e:	39 f5       	brne	.+78     	; 0xcce <vfprintf+0x23e>
 c80:	f8 01       	movw	r30, r16
 c82:	37 fe       	sbrs	r3, 7
 c84:	07 c0       	rjmp	.+14     	; 0xc94 <vfprintf+0x204>
 c86:	60 81       	ld	r22, Z
 c88:	71 81       	ldd	r23, Z+1	; 0x01
 c8a:	82 81       	ldd	r24, Z+2	; 0x02
 c8c:	93 81       	ldd	r25, Z+3	; 0x03
 c8e:	0c 5f       	subi	r16, 0xFC	; 252
 c90:	1f 4f       	sbci	r17, 0xFF	; 255
 c92:	08 c0       	rjmp	.+16     	; 0xca4 <vfprintf+0x214>
 c94:	60 81       	ld	r22, Z
 c96:	71 81       	ldd	r23, Z+1	; 0x01
 c98:	07 2e       	mov	r0, r23
 c9a:	00 0c       	add	r0, r0
 c9c:	88 0b       	sbc	r24, r24
 c9e:	99 0b       	sbc	r25, r25
 ca0:	0e 5f       	subi	r16, 0xFE	; 254
 ca2:	1f 4f       	sbci	r17, 0xFF	; 255
 ca4:	f3 2d       	mov	r31, r3
 ca6:	ff 76       	andi	r31, 0x6F	; 111
 ca8:	3f 2e       	mov	r3, r31
 caa:	97 ff       	sbrs	r25, 7
 cac:	09 c0       	rjmp	.+18     	; 0xcc0 <vfprintf+0x230>
 cae:	90 95       	com	r25
 cb0:	80 95       	com	r24
 cb2:	70 95       	com	r23
 cb4:	61 95       	neg	r22
 cb6:	7f 4f       	sbci	r23, 0xFF	; 255
 cb8:	8f 4f       	sbci	r24, 0xFF	; 255
 cba:	9f 4f       	sbci	r25, 0xFF	; 255
 cbc:	f0 68       	ori	r31, 0x80	; 128
 cbe:	3f 2e       	mov	r3, r31
 cc0:	2a e0       	ldi	r18, 0x0A	; 10
 cc2:	30 e0       	ldi	r19, 0x00	; 0
 cc4:	a3 01       	movw	r20, r6
 cc6:	33 d1       	rcall	.+614    	; 0xf2e <__ultoa_invert>
 cc8:	88 2e       	mov	r8, r24
 cca:	86 18       	sub	r8, r6
 ccc:	44 c0       	rjmp	.+136    	; 0xd56 <vfprintf+0x2c6>
 cce:	85 37       	cpi	r24, 0x75	; 117
 cd0:	31 f4       	brne	.+12     	; 0xcde <vfprintf+0x24e>
 cd2:	23 2d       	mov	r18, r3
 cd4:	2f 7e       	andi	r18, 0xEF	; 239
 cd6:	b2 2e       	mov	r11, r18
 cd8:	2a e0       	ldi	r18, 0x0A	; 10
 cda:	30 e0       	ldi	r19, 0x00	; 0
 cdc:	25 c0       	rjmp	.+74     	; 0xd28 <vfprintf+0x298>
 cde:	93 2d       	mov	r25, r3
 ce0:	99 7f       	andi	r25, 0xF9	; 249
 ce2:	b9 2e       	mov	r11, r25
 ce4:	8f 36       	cpi	r24, 0x6F	; 111
 ce6:	c1 f0       	breq	.+48     	; 0xd18 <vfprintf+0x288>
 ce8:	18 f4       	brcc	.+6      	; 0xcf0 <vfprintf+0x260>
 cea:	88 35       	cpi	r24, 0x58	; 88
 cec:	79 f0       	breq	.+30     	; 0xd0c <vfprintf+0x27c>
 cee:	ae c0       	rjmp	.+348    	; 0xe4c <vfprintf+0x3bc>
 cf0:	80 37       	cpi	r24, 0x70	; 112
 cf2:	19 f0       	breq	.+6      	; 0xcfa <vfprintf+0x26a>
 cf4:	88 37       	cpi	r24, 0x78	; 120
 cf6:	21 f0       	breq	.+8      	; 0xd00 <vfprintf+0x270>
 cf8:	a9 c0       	rjmp	.+338    	; 0xe4c <vfprintf+0x3bc>
 cfa:	e9 2f       	mov	r30, r25
 cfc:	e0 61       	ori	r30, 0x10	; 16
 cfe:	be 2e       	mov	r11, r30
 d00:	b4 fe       	sbrs	r11, 4
 d02:	0d c0       	rjmp	.+26     	; 0xd1e <vfprintf+0x28e>
 d04:	fb 2d       	mov	r31, r11
 d06:	f4 60       	ori	r31, 0x04	; 4
 d08:	bf 2e       	mov	r11, r31
 d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x28e>
 d0c:	34 fe       	sbrs	r3, 4
 d0e:	0a c0       	rjmp	.+20     	; 0xd24 <vfprintf+0x294>
 d10:	29 2f       	mov	r18, r25
 d12:	26 60       	ori	r18, 0x06	; 6
 d14:	b2 2e       	mov	r11, r18
 d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0x294>
 d18:	28 e0       	ldi	r18, 0x08	; 8
 d1a:	30 e0       	ldi	r19, 0x00	; 0
 d1c:	05 c0       	rjmp	.+10     	; 0xd28 <vfprintf+0x298>
 d1e:	20 e1       	ldi	r18, 0x10	; 16
 d20:	30 e0       	ldi	r19, 0x00	; 0
 d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x298>
 d24:	20 e1       	ldi	r18, 0x10	; 16
 d26:	32 e0       	ldi	r19, 0x02	; 2
 d28:	f8 01       	movw	r30, r16
 d2a:	b7 fe       	sbrs	r11, 7
 d2c:	07 c0       	rjmp	.+14     	; 0xd3c <vfprintf+0x2ac>
 d2e:	60 81       	ld	r22, Z
 d30:	71 81       	ldd	r23, Z+1	; 0x01
 d32:	82 81       	ldd	r24, Z+2	; 0x02
 d34:	93 81       	ldd	r25, Z+3	; 0x03
 d36:	0c 5f       	subi	r16, 0xFC	; 252
 d38:	1f 4f       	sbci	r17, 0xFF	; 255
 d3a:	06 c0       	rjmp	.+12     	; 0xd48 <vfprintf+0x2b8>
 d3c:	60 81       	ld	r22, Z
 d3e:	71 81       	ldd	r23, Z+1	; 0x01
 d40:	80 e0       	ldi	r24, 0x00	; 0
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0e 5f       	subi	r16, 0xFE	; 254
 d46:	1f 4f       	sbci	r17, 0xFF	; 255
 d48:	a3 01       	movw	r20, r6
 d4a:	f1 d0       	rcall	.+482    	; 0xf2e <__ultoa_invert>
 d4c:	88 2e       	mov	r8, r24
 d4e:	86 18       	sub	r8, r6
 d50:	fb 2d       	mov	r31, r11
 d52:	ff 77       	andi	r31, 0x7F	; 127
 d54:	3f 2e       	mov	r3, r31
 d56:	36 fe       	sbrs	r3, 6
 d58:	0d c0       	rjmp	.+26     	; 0xd74 <vfprintf+0x2e4>
 d5a:	23 2d       	mov	r18, r3
 d5c:	2e 7f       	andi	r18, 0xFE	; 254
 d5e:	a2 2e       	mov	r10, r18
 d60:	89 14       	cp	r8, r9
 d62:	58 f4       	brcc	.+22     	; 0xd7a <vfprintf+0x2ea>
 d64:	34 fe       	sbrs	r3, 4
 d66:	0b c0       	rjmp	.+22     	; 0xd7e <vfprintf+0x2ee>
 d68:	32 fc       	sbrc	r3, 2
 d6a:	09 c0       	rjmp	.+18     	; 0xd7e <vfprintf+0x2ee>
 d6c:	83 2d       	mov	r24, r3
 d6e:	8e 7e       	andi	r24, 0xEE	; 238
 d70:	a8 2e       	mov	r10, r24
 d72:	05 c0       	rjmp	.+10     	; 0xd7e <vfprintf+0x2ee>
 d74:	b8 2c       	mov	r11, r8
 d76:	a3 2c       	mov	r10, r3
 d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x2f0>
 d7a:	b8 2c       	mov	r11, r8
 d7c:	01 c0       	rjmp	.+2      	; 0xd80 <vfprintf+0x2f0>
 d7e:	b9 2c       	mov	r11, r9
 d80:	a4 fe       	sbrs	r10, 4
 d82:	0f c0       	rjmp	.+30     	; 0xda2 <vfprintf+0x312>
 d84:	fe 01       	movw	r30, r28
 d86:	e8 0d       	add	r30, r8
 d88:	f1 1d       	adc	r31, r1
 d8a:	80 81       	ld	r24, Z
 d8c:	80 33       	cpi	r24, 0x30	; 48
 d8e:	21 f4       	brne	.+8      	; 0xd98 <vfprintf+0x308>
 d90:	9a 2d       	mov	r25, r10
 d92:	99 7e       	andi	r25, 0xE9	; 233
 d94:	a9 2e       	mov	r10, r25
 d96:	09 c0       	rjmp	.+18     	; 0xdaa <vfprintf+0x31a>
 d98:	a2 fe       	sbrs	r10, 2
 d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0x318>
 d9c:	b3 94       	inc	r11
 d9e:	b3 94       	inc	r11
 da0:	04 c0       	rjmp	.+8      	; 0xdaa <vfprintf+0x31a>
 da2:	8a 2d       	mov	r24, r10
 da4:	86 78       	andi	r24, 0x86	; 134
 da6:	09 f0       	breq	.+2      	; 0xdaa <vfprintf+0x31a>
 da8:	b3 94       	inc	r11
 daa:	a3 fc       	sbrc	r10, 3
 dac:	10 c0       	rjmp	.+32     	; 0xdce <vfprintf+0x33e>
 dae:	a0 fe       	sbrs	r10, 0
 db0:	06 c0       	rjmp	.+12     	; 0xdbe <vfprintf+0x32e>
 db2:	b2 14       	cp	r11, r2
 db4:	80 f4       	brcc	.+32     	; 0xdd6 <vfprintf+0x346>
 db6:	28 0c       	add	r2, r8
 db8:	92 2c       	mov	r9, r2
 dba:	9b 18       	sub	r9, r11
 dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <vfprintf+0x348>
 dbe:	b2 14       	cp	r11, r2
 dc0:	58 f4       	brcc	.+22     	; 0xdd8 <vfprintf+0x348>
 dc2:	b6 01       	movw	r22, r12
 dc4:	80 e2       	ldi	r24, 0x20	; 32
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	76 d0       	rcall	.+236    	; 0xeb6 <fputc>
 dca:	b3 94       	inc	r11
 dcc:	f8 cf       	rjmp	.-16     	; 0xdbe <vfprintf+0x32e>
 dce:	b2 14       	cp	r11, r2
 dd0:	18 f4       	brcc	.+6      	; 0xdd8 <vfprintf+0x348>
 dd2:	2b 18       	sub	r2, r11
 dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x34a>
 dd6:	98 2c       	mov	r9, r8
 dd8:	21 2c       	mov	r2, r1
 dda:	a4 fe       	sbrs	r10, 4
 ddc:	0f c0       	rjmp	.+30     	; 0xdfc <vfprintf+0x36c>
 dde:	b6 01       	movw	r22, r12
 de0:	80 e3       	ldi	r24, 0x30	; 48
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	68 d0       	rcall	.+208    	; 0xeb6 <fputc>
 de6:	a2 fe       	sbrs	r10, 2
 de8:	16 c0       	rjmp	.+44     	; 0xe16 <vfprintf+0x386>
 dea:	a1 fc       	sbrc	r10, 1
 dec:	03 c0       	rjmp	.+6      	; 0xdf4 <vfprintf+0x364>
 dee:	88 e7       	ldi	r24, 0x78	; 120
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	02 c0       	rjmp	.+4      	; 0xdf8 <vfprintf+0x368>
 df4:	88 e5       	ldi	r24, 0x58	; 88
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	b6 01       	movw	r22, r12
 dfa:	0c c0       	rjmp	.+24     	; 0xe14 <vfprintf+0x384>
 dfc:	8a 2d       	mov	r24, r10
 dfe:	86 78       	andi	r24, 0x86	; 134
 e00:	51 f0       	breq	.+20     	; 0xe16 <vfprintf+0x386>
 e02:	a1 fe       	sbrs	r10, 1
 e04:	02 c0       	rjmp	.+4      	; 0xe0a <vfprintf+0x37a>
 e06:	8b e2       	ldi	r24, 0x2B	; 43
 e08:	01 c0       	rjmp	.+2      	; 0xe0c <vfprintf+0x37c>
 e0a:	80 e2       	ldi	r24, 0x20	; 32
 e0c:	a7 fc       	sbrc	r10, 7
 e0e:	8d e2       	ldi	r24, 0x2D	; 45
 e10:	b6 01       	movw	r22, r12
 e12:	90 e0       	ldi	r25, 0x00	; 0
 e14:	50 d0       	rcall	.+160    	; 0xeb6 <fputc>
 e16:	89 14       	cp	r8, r9
 e18:	30 f4       	brcc	.+12     	; 0xe26 <vfprintf+0x396>
 e1a:	b6 01       	movw	r22, r12
 e1c:	80 e3       	ldi	r24, 0x30	; 48
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	4a d0       	rcall	.+148    	; 0xeb6 <fputc>
 e22:	9a 94       	dec	r9
 e24:	f8 cf       	rjmp	.-16     	; 0xe16 <vfprintf+0x386>
 e26:	8a 94       	dec	r8
 e28:	f3 01       	movw	r30, r6
 e2a:	e8 0d       	add	r30, r8
 e2c:	f1 1d       	adc	r31, r1
 e2e:	80 81       	ld	r24, Z
 e30:	b6 01       	movw	r22, r12
 e32:	90 e0       	ldi	r25, 0x00	; 0
 e34:	40 d0       	rcall	.+128    	; 0xeb6 <fputc>
 e36:	81 10       	cpse	r8, r1
 e38:	f6 cf       	rjmp	.-20     	; 0xe26 <vfprintf+0x396>
 e3a:	22 20       	and	r2, r2
 e3c:	09 f4       	brne	.+2      	; 0xe40 <vfprintf+0x3b0>
 e3e:	4e ce       	rjmp	.-868    	; 0xadc <vfprintf+0x4c>
 e40:	b6 01       	movw	r22, r12
 e42:	80 e2       	ldi	r24, 0x20	; 32
 e44:	90 e0       	ldi	r25, 0x00	; 0
 e46:	37 d0       	rcall	.+110    	; 0xeb6 <fputc>
 e48:	2a 94       	dec	r2
 e4a:	f7 cf       	rjmp	.-18     	; 0xe3a <vfprintf+0x3aa>
 e4c:	f6 01       	movw	r30, r12
 e4e:	86 81       	ldd	r24, Z+6	; 0x06
 e50:	97 81       	ldd	r25, Z+7	; 0x07
 e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x3c8>
 e54:	8f ef       	ldi	r24, 0xFF	; 255
 e56:	9f ef       	ldi	r25, 0xFF	; 255
 e58:	2b 96       	adiw	r28, 0x0b	; 11
 e5a:	0f b6       	in	r0, 0x3f	; 63
 e5c:	f8 94       	cli
 e5e:	de bf       	out	0x3e, r29	; 62
 e60:	0f be       	out	0x3f, r0	; 63
 e62:	cd bf       	out	0x3d, r28	; 61
 e64:	df 91       	pop	r29
 e66:	cf 91       	pop	r28
 e68:	1f 91       	pop	r17
 e6a:	0f 91       	pop	r16
 e6c:	ff 90       	pop	r15
 e6e:	ef 90       	pop	r14
 e70:	df 90       	pop	r13
 e72:	cf 90       	pop	r12
 e74:	bf 90       	pop	r11
 e76:	af 90       	pop	r10
 e78:	9f 90       	pop	r9
 e7a:	8f 90       	pop	r8
 e7c:	7f 90       	pop	r7
 e7e:	6f 90       	pop	r6
 e80:	5f 90       	pop	r5
 e82:	4f 90       	pop	r4
 e84:	3f 90       	pop	r3
 e86:	2f 90       	pop	r2
 e88:	08 95       	ret

00000e8a <strnlen_P>:
 e8a:	fc 01       	movw	r30, r24
 e8c:	05 90       	lpm	r0, Z+
 e8e:	61 50       	subi	r22, 0x01	; 1
 e90:	70 40       	sbci	r23, 0x00	; 0
 e92:	01 10       	cpse	r0, r1
 e94:	d8 f7       	brcc	.-10     	; 0xe8c <strnlen_P+0x2>
 e96:	80 95       	com	r24
 e98:	90 95       	com	r25
 e9a:	8e 0f       	add	r24, r30
 e9c:	9f 1f       	adc	r25, r31
 e9e:	08 95       	ret

00000ea0 <strnlen>:
 ea0:	fc 01       	movw	r30, r24
 ea2:	61 50       	subi	r22, 0x01	; 1
 ea4:	70 40       	sbci	r23, 0x00	; 0
 ea6:	01 90       	ld	r0, Z+
 ea8:	01 10       	cpse	r0, r1
 eaa:	d8 f7       	brcc	.-10     	; 0xea2 <strnlen+0x2>
 eac:	80 95       	com	r24
 eae:	90 95       	com	r25
 eb0:	8e 0f       	add	r24, r30
 eb2:	9f 1f       	adc	r25, r31
 eb4:	08 95       	ret

00000eb6 <fputc>:
 eb6:	0f 93       	push	r16
 eb8:	1f 93       	push	r17
 eba:	cf 93       	push	r28
 ebc:	df 93       	push	r29
 ebe:	fb 01       	movw	r30, r22
 ec0:	23 81       	ldd	r18, Z+3	; 0x03
 ec2:	21 fd       	sbrc	r18, 1
 ec4:	03 c0       	rjmp	.+6      	; 0xecc <fputc+0x16>
 ec6:	8f ef       	ldi	r24, 0xFF	; 255
 ec8:	9f ef       	ldi	r25, 0xFF	; 255
 eca:	2c c0       	rjmp	.+88     	; 0xf24 <fputc+0x6e>
 ecc:	22 ff       	sbrs	r18, 2
 ece:	16 c0       	rjmp	.+44     	; 0xefc <fputc+0x46>
 ed0:	46 81       	ldd	r20, Z+6	; 0x06
 ed2:	57 81       	ldd	r21, Z+7	; 0x07
 ed4:	24 81       	ldd	r18, Z+4	; 0x04
 ed6:	35 81       	ldd	r19, Z+5	; 0x05
 ed8:	42 17       	cp	r20, r18
 eda:	53 07       	cpc	r21, r19
 edc:	44 f4       	brge	.+16     	; 0xeee <fputc+0x38>
 ede:	a0 81       	ld	r26, Z
 ee0:	b1 81       	ldd	r27, Z+1	; 0x01
 ee2:	9d 01       	movw	r18, r26
 ee4:	2f 5f       	subi	r18, 0xFF	; 255
 ee6:	3f 4f       	sbci	r19, 0xFF	; 255
 ee8:	31 83       	std	Z+1, r19	; 0x01
 eea:	20 83       	st	Z, r18
 eec:	8c 93       	st	X, r24
 eee:	26 81       	ldd	r18, Z+6	; 0x06
 ef0:	37 81       	ldd	r19, Z+7	; 0x07
 ef2:	2f 5f       	subi	r18, 0xFF	; 255
 ef4:	3f 4f       	sbci	r19, 0xFF	; 255
 ef6:	37 83       	std	Z+7, r19	; 0x07
 ef8:	26 83       	std	Z+6, r18	; 0x06
 efa:	14 c0       	rjmp	.+40     	; 0xf24 <fputc+0x6e>
 efc:	8b 01       	movw	r16, r22
 efe:	ec 01       	movw	r28, r24
 f00:	fb 01       	movw	r30, r22
 f02:	00 84       	ldd	r0, Z+8	; 0x08
 f04:	f1 85       	ldd	r31, Z+9	; 0x09
 f06:	e0 2d       	mov	r30, r0
 f08:	09 95       	icall
 f0a:	89 2b       	or	r24, r25
 f0c:	e1 f6       	brne	.-72     	; 0xec6 <fputc+0x10>
 f0e:	d8 01       	movw	r26, r16
 f10:	16 96       	adiw	r26, 0x06	; 6
 f12:	8d 91       	ld	r24, X+
 f14:	9c 91       	ld	r25, X
 f16:	17 97       	sbiw	r26, 0x07	; 7
 f18:	01 96       	adiw	r24, 0x01	; 1
 f1a:	17 96       	adiw	r26, 0x07	; 7
 f1c:	9c 93       	st	X, r25
 f1e:	8e 93       	st	-X, r24
 f20:	16 97       	sbiw	r26, 0x06	; 6
 f22:	ce 01       	movw	r24, r28
 f24:	df 91       	pop	r29
 f26:	cf 91       	pop	r28
 f28:	1f 91       	pop	r17
 f2a:	0f 91       	pop	r16
 f2c:	08 95       	ret

00000f2e <__ultoa_invert>:
 f2e:	fa 01       	movw	r30, r20
 f30:	aa 27       	eor	r26, r26
 f32:	28 30       	cpi	r18, 0x08	; 8
 f34:	51 f1       	breq	.+84     	; 0xf8a <__ultoa_invert+0x5c>
 f36:	20 31       	cpi	r18, 0x10	; 16
 f38:	81 f1       	breq	.+96     	; 0xf9a <__ultoa_invert+0x6c>
 f3a:	e8 94       	clt
 f3c:	6f 93       	push	r22
 f3e:	6e 7f       	andi	r22, 0xFE	; 254
 f40:	6e 5f       	subi	r22, 0xFE	; 254
 f42:	7f 4f       	sbci	r23, 0xFF	; 255
 f44:	8f 4f       	sbci	r24, 0xFF	; 255
 f46:	9f 4f       	sbci	r25, 0xFF	; 255
 f48:	af 4f       	sbci	r26, 0xFF	; 255
 f4a:	b1 e0       	ldi	r27, 0x01	; 1
 f4c:	3e d0       	rcall	.+124    	; 0xfca <__ultoa_invert+0x9c>
 f4e:	b4 e0       	ldi	r27, 0x04	; 4
 f50:	3c d0       	rcall	.+120    	; 0xfca <__ultoa_invert+0x9c>
 f52:	67 0f       	add	r22, r23
 f54:	78 1f       	adc	r23, r24
 f56:	89 1f       	adc	r24, r25
 f58:	9a 1f       	adc	r25, r26
 f5a:	a1 1d       	adc	r26, r1
 f5c:	68 0f       	add	r22, r24
 f5e:	79 1f       	adc	r23, r25
 f60:	8a 1f       	adc	r24, r26
 f62:	91 1d       	adc	r25, r1
 f64:	a1 1d       	adc	r26, r1
 f66:	6a 0f       	add	r22, r26
 f68:	71 1d       	adc	r23, r1
 f6a:	81 1d       	adc	r24, r1
 f6c:	91 1d       	adc	r25, r1
 f6e:	a1 1d       	adc	r26, r1
 f70:	20 d0       	rcall	.+64     	; 0xfb2 <__ultoa_invert+0x84>
 f72:	09 f4       	brne	.+2      	; 0xf76 <__ultoa_invert+0x48>
 f74:	68 94       	set
 f76:	3f 91       	pop	r19
 f78:	2a e0       	ldi	r18, 0x0A	; 10
 f7a:	26 9f       	mul	r18, r22
 f7c:	11 24       	eor	r1, r1
 f7e:	30 19       	sub	r19, r0
 f80:	30 5d       	subi	r19, 0xD0	; 208
 f82:	31 93       	st	Z+, r19
 f84:	de f6       	brtc	.-74     	; 0xf3c <__ultoa_invert+0xe>
 f86:	cf 01       	movw	r24, r30
 f88:	08 95       	ret
 f8a:	46 2f       	mov	r20, r22
 f8c:	47 70       	andi	r20, 0x07	; 7
 f8e:	40 5d       	subi	r20, 0xD0	; 208
 f90:	41 93       	st	Z+, r20
 f92:	b3 e0       	ldi	r27, 0x03	; 3
 f94:	0f d0       	rcall	.+30     	; 0xfb4 <__ultoa_invert+0x86>
 f96:	c9 f7       	brne	.-14     	; 0xf8a <__ultoa_invert+0x5c>
 f98:	f6 cf       	rjmp	.-20     	; 0xf86 <__ultoa_invert+0x58>
 f9a:	46 2f       	mov	r20, r22
 f9c:	4f 70       	andi	r20, 0x0F	; 15
 f9e:	40 5d       	subi	r20, 0xD0	; 208
 fa0:	4a 33       	cpi	r20, 0x3A	; 58
 fa2:	18 f0       	brcs	.+6      	; 0xfaa <__ultoa_invert+0x7c>
 fa4:	49 5d       	subi	r20, 0xD9	; 217
 fa6:	31 fd       	sbrc	r19, 1
 fa8:	40 52       	subi	r20, 0x20	; 32
 faa:	41 93       	st	Z+, r20
 fac:	02 d0       	rcall	.+4      	; 0xfb2 <__ultoa_invert+0x84>
 fae:	a9 f7       	brne	.-22     	; 0xf9a <__ultoa_invert+0x6c>
 fb0:	ea cf       	rjmp	.-44     	; 0xf86 <__ultoa_invert+0x58>
 fb2:	b4 e0       	ldi	r27, 0x04	; 4
 fb4:	a6 95       	lsr	r26
 fb6:	97 95       	ror	r25
 fb8:	87 95       	ror	r24
 fba:	77 95       	ror	r23
 fbc:	67 95       	ror	r22
 fbe:	ba 95       	dec	r27
 fc0:	c9 f7       	brne	.-14     	; 0xfb4 <__ultoa_invert+0x86>
 fc2:	00 97       	sbiw	r24, 0x00	; 0
 fc4:	61 05       	cpc	r22, r1
 fc6:	71 05       	cpc	r23, r1
 fc8:	08 95       	ret
 fca:	9b 01       	movw	r18, r22
 fcc:	ac 01       	movw	r20, r24
 fce:	0a 2e       	mov	r0, r26
 fd0:	06 94       	lsr	r0
 fd2:	57 95       	ror	r21
 fd4:	47 95       	ror	r20
 fd6:	37 95       	ror	r19
 fd8:	27 95       	ror	r18
 fda:	ba 95       	dec	r27
 fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__ultoa_invert+0xa2>
 fde:	62 0f       	add	r22, r18
 fe0:	73 1f       	adc	r23, r19
 fe2:	84 1f       	adc	r24, r20
 fe4:	95 1f       	adc	r25, r21
 fe6:	a0 1d       	adc	r26, r0
 fe8:	08 95       	ret

00000fea <_exit>:
 fea:	f8 94       	cli

00000fec <__stop_program>:
 fec:	ff cf       	rjmp	.-2      	; 0xfec <__stop_program>
