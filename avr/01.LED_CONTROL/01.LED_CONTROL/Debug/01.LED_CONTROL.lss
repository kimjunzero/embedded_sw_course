
01.LED_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eda  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a60  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000745  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000025a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  000026ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051c  00000000  00000000  00002b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000030bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	16 d1       	rcall	.+556    	; 0x2f0 <main>
  c4:	4d c1       	rjmp	.+666    	; 0x360 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
void init_button(void);
int get_button(int button_num, int button_pin);

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button>:
	static unsigned char button_status[] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE};
	// 지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
  d0:	40 b3       	in	r20, 0x10	; 16
	if(currtn_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 noise 상태. high
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <get_button+0xc>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <get_button+0x8>
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	24 23       	and	r18, r20
  e4:	35 23       	and	r19, r21
  e6:	23 2b       	or	r18, r19
  e8:	b9 f0       	breq	.+46     	; 0x118 <get_button+0x48>
  ea:	fc 01       	movw	r30, r24
  ec:	e0 5f       	subi	r30, 0xF0	; 240
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	20 81       	ld	r18, Z
  f2:	21 11       	cpse	r18, r1
  f4:	27 c0       	rjmp	.+78     	; 0x144 <get_button+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	3d ee       	ldi	r19, 0xED	; 237
  fa:	42 e0       	ldi	r20, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <get_button+0x2c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <get_button+0x36>
 106:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // noise가 지나간 상태의 High 상태
 108:	fc 01       	movw	r30, r24
 10a:	e0 5f       	subi	r30, 0xF0	; 240
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렸다 떼어진 상태가 아니다.
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 95       	ret
	}
	else if(currtn_state == BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 118:	fc 01       	movw	r30, r24
 11a:	e0 5f       	subi	r30, 0xF0	; 240
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	20 81       	ld	r18, Z
 120:	21 30       	cpi	r18, 0x01	; 1
 122:	99 f4       	brne	.+38     	; 0x14a <get_button+0x7a>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	3d ee       	ldi	r19, 0xED	; 237
 128:	42 e0       	ldi	r20, 0x02	; 2
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <get_button+0x5a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <get_button+0x64>
 134:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼 체크를 위해 초기화
 136:	fc 01       	movw	r30, r24
 138:	e0 5f       	subi	r30, 0xF0	; 240
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	10 82       	st	Z, r1
		return 1; // 완전히 1번 눌렸다 떼어진 상태로 인정
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
		
	}
	
	return 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
}
 14e:	08 95       	ret

00000150 <shift_left_keep_ledon>:
		shift_left_ledon();
		shift_right_ledon();
		shift_left_keep_ledon();
		shift_right_keep_ledon();
		flower_on();
		flower_off();
 150:	1b ba       	out	0x1b, r1	; 27
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	4b b3       	in	r20, 0x1b	; 27
 15c:	9b 01       	movw	r18, r22
 15e:	08 2e       	mov	r0, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <shift_left_keep_ledon+0x16>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <shift_left_keep_ledon+0x12>
 16a:	24 2b       	or	r18, r20
 16c:	2b bb       	out	0x1b, r18	; 27
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	39 ef       	ldi	r19, 0xF9	; 249
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	21 50       	subi	r18, 0x01	; 1
 176:	30 40       	sbci	r19, 0x00	; 0
 178:	40 40       	sbci	r20, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <shift_left_keep_ledon+0x24>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <shift_left_keep_ledon+0x2e>
 17e:	00 00       	nop
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	91 05       	cpc	r25, r1
 186:	49 f7       	brne	.-46     	; 0x15a <shift_left_keep_ledon+0xa>
 188:	08 95       	ret

0000018a <shift_right_keep_ledon>:
 18a:	1b ba       	out	0x1b, r1	; 27
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	60 e8       	ldi	r22, 0x80	; 128
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	4b b3       	in	r20, 0x1b	; 27
 196:	9b 01       	movw	r18, r22
 198:	08 2e       	mov	r0, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <shift_right_keep_ledon+0x16>
 19c:	35 95       	asr	r19
 19e:	27 95       	ror	r18
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <shift_right_keep_ledon+0x12>
 1a4:	24 2b       	or	r18, r20
 1a6:	2b bb       	out	0x1b, r18	; 27
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	39 ef       	ldi	r19, 0xF9	; 249
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	30 40       	sbci	r19, 0x00	; 0
 1b2:	40 40       	sbci	r20, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <shift_right_keep_ledon+0x24>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <shift_right_keep_ledon+0x2e>
 1b8:	00 00       	nop
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	91 05       	cpc	r25, r1
 1c0:	49 f7       	brne	.-46     	; 0x194 <shift_right_keep_ledon+0xa>
 1c2:	08 95       	ret

000001c4 <shift_left_ledon>:
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	9a 01       	movw	r18, r20
 1ce:	08 2e       	mov	r0, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <shift_left_ledon+0x12>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <shift_left_ledon+0xe>
 1da:	2b bb       	out	0x1b, r18	; 27
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	39 ef       	ldi	r19, 0xF9	; 249
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	30 40       	sbci	r19, 0x00	; 0
 1e6:	60 40       	sbci	r22, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <shift_left_ledon+0x1e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <shift_left_ledon+0x28>
 1ec:	00 00       	nop
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	88 30       	cpi	r24, 0x08	; 8
 1f2:	91 05       	cpc	r25, r1
 1f4:	59 f7       	brne	.-42     	; 0x1cc <shift_left_ledon+0x8>
 1f6:	08 95       	ret

000001f8 <shift_right_ledon>:
 1f8:	1b ba       	out	0x1b, r1	; 27
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	40 e8       	ldi	r20, 0x80	; 128
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	9a 01       	movw	r18, r20
 204:	08 2e       	mov	r0, r24
 206:	02 c0       	rjmp	.+4      	; 0x20c <shift_right_ledon+0x14>
 208:	35 95       	asr	r19
 20a:	27 95       	ror	r18
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <shift_right_ledon+0x10>
 210:	2b bb       	out	0x1b, r18	; 27
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	39 ef       	ldi	r19, 0xF9	; 249
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	30 40       	sbci	r19, 0x00	; 0
 21c:	60 40       	sbci	r22, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <shift_right_ledon+0x20>
 220:	00 c0       	rjmp	.+0      	; 0x222 <shift_right_ledon+0x2a>
 222:	00 00       	nop
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	88 30       	cpi	r24, 0x08	; 8
 228:	91 05       	cpc	r25, r1
 22a:	59 f7       	brne	.-42     	; 0x202 <shift_right_ledon+0xa>
 22c:	08 95       	ret

0000022e <flower_on>:
 22e:	1b ba       	out	0x1b, r1	; 27
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	e0 e1       	ldi	r30, 0x10	; 16
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	68 e0       	ldi	r22, 0x08	; 8
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	4b b3       	in	r20, 0x1b	; 27
 23e:	9f 01       	movw	r18, r30
 240:	08 2e       	mov	r0, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <flower_on+0x1a>
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <flower_on+0x16>
 24c:	24 2b       	or	r18, r20
 24e:	2b bb       	out	0x1b, r18	; 27
 250:	4b b3       	in	r20, 0x1b	; 27
 252:	9b 01       	movw	r18, r22
 254:	08 2e       	mov	r0, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <flower_on+0x2e>
 258:	35 95       	asr	r19
 25a:	27 95       	ror	r18
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <flower_on+0x2a>
 260:	24 2b       	or	r18, r20
 262:	2b bb       	out	0x1b, r18	; 27
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	39 ef       	ldi	r19, 0xF9	; 249
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	30 40       	sbci	r19, 0x00	; 0
 26e:	40 40       	sbci	r20, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <flower_on+0x3c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <flower_on+0x46>
 274:	00 00       	nop
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	84 30       	cpi	r24, 0x04	; 4
 27a:	91 05       	cpc	r25, r1
 27c:	f9 f6       	brne	.-66     	; 0x23c <flower_on+0xe>
 27e:	08 95       	ret

00000280 <flower_off>:
 280:	1b ba       	out	0x1b, r1	; 27
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	e0 ef       	ldi	r30, 0xF0	; 240
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	6f e0       	ldi	r22, 0x0F	; 15
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	cf 01       	movw	r24, r30
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <flower_off+0x18>
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <flower_off+0x14>
 29c:	48 2f       	mov	r20, r24
 29e:	40 7f       	andi	r20, 0xF0	; 240
 2a0:	cb 01       	movw	r24, r22
 2a2:	02 2e       	mov	r0, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <flower_off+0x2a>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <flower_off+0x26>
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	84 2b       	or	r24, r20
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	4f ef       	ldi	r20, 0xFF	; 255
 2b6:	89 ef       	ldi	r24, 0xF9	; 249
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	41 50       	subi	r20, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <flower_off+0x3a>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <flower_off+0x44>
 2c4:	00 00       	nop
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	24 30       	cpi	r18, 0x04	; 4
 2cc:	31 05       	cpc	r19, r1
 2ce:	f9 f6       	brne	.-66     	; 0x28e <flower_off+0xe>
 2d0:	1b ba       	out	0x1b, r1	; 27
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	49 ef       	ldi	r20, 0xF9	; 249
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	40 40       	sbci	r20, 0x00	; 0
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <flower_off+0x58>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <flower_off+0x62>
 2e2:	00 00       	nop
 2e4:	08 95       	ret

000002e6 <led_all_on>:
	
}

void led_all_on(void)
{
	PORTA = 0xff;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	08 95       	ret

000002ec <led_all_off>:
}

void led_all_off(void)
{
	PORTA = 0x00;
 2ec:	1b ba       	out	0x1b, r1	; 27
 2ee:	08 95       	ret

000002f0 <main>:
extern void led_all_on(void);
extern void led_all_off(void);

// none O/S 또는 loop monitor방식
int main(void)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	60 97       	sbiw	r28, 0x10	; 16
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
	int button0_state = 0;  // 초기 상태를 0으로 출발
	
	void (*fp[]) (void) = // 함수 포인터 배열
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	e0 e0       	ldi	r30, 0x00	; 0
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	de 01       	movw	r26, r28
 30c:	11 96       	adiw	r26, 0x01	; 1
 30e:	01 90       	ld	r0, Z+
 310:	0d 92       	st	X+, r0
 312:	8a 95       	dec	r24
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x1e>
	//int button1_state = 0;
	//int button2_state = 0;
	//int button3_state = 0;
	//int button_state[4] =0
	
	init_button();
 316:	d8 de       	rcall	.-592    	; 0xc8 <init_button>
	// led_main();
	       //76543210
    DDRA = 0b11111111; // PORTA를 출력 모드(1)로 설정
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	8a bb       	out	0x1a, r24	; 26
extern void led_all_off(void);

// none O/S 또는 loop monitor방식
int main(void)
{
	int button0_state = 0;  // 초기 상태를 0으로 출발
 31c:	00 e0       	ldi	r16, 0x00	; 0
 31e:	10 e0       	ldi	r17, 0x00	; 0
					   // 0x : hex
					   // DDRA = 0xff;
#if 1 // 함수 포인터 배열
while (1) // for(;;)
{
	if(get_button(BUTTON0, BUTTON0PIN))
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	d3 de       	rcall	.-602    	; 0xd0 <get_button>
 32a:	89 2b       	or	r24, r25
 32c:	59 f0       	breq	.+22     	; 0x344 <main+0x54>
	{
		button0_state++;
 32e:	c8 01       	movw	r24, r16
 330:	01 96       	adiw	r24, 0x01	; 1
		button0_state %= 8;
 332:	87 70       	andi	r24, 0x07	; 7
 334:	90 78       	andi	r25, 0x80	; 128
 336:	99 23       	and	r25, r25
 338:	24 f4       	brge	.+8      	; 0x342 <main+0x52>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	88 6f       	ori	r24, 0xF8	; 248
 33e:	9f 6f       	ori	r25, 0xFF	; 255
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	8c 01       	movw	r16, r24
	}
	fp[button0_state]();
 344:	f8 01       	movw	r30, r16
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	8c 0f       	add	r24, r28
 350:	9d 1f       	adc	r25, r29
 352:	e8 0f       	add	r30, r24
 354:	f9 1f       	adc	r31, r25
 356:	01 90       	ld	r0, Z+
 358:	f0 81       	ld	r31, Z
 35a:	e0 2d       	mov	r30, r0
 35c:	09 95       	icall
}
 35e:	e0 cf       	rjmp	.-64     	; 0x320 <main+0x30>

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
